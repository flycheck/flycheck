This chapter explains the usage of Flycheck.

@menu
* Syntax checking::             How syntax is checked
* Selection::                   How syntax checkers are selected
* Configuration::               How to configure individual syntax checkers
* Reporting::                   How syntax warnings and errors are reported
* Navigation::                  How to navigate syntax warnings and errors
* Mode line::                   How status information is displayed in the mode
                                 line
@end menu

@node Syntax checking, Selection, Usage, Usage
@comment  node-name,  next,  previous,  up
@section Syntax checking

By default, @code{flycheck-mode} checks syntax automatically when

@itemize
@item
the mode is enabled,
@item
the file is saved,
@item
or if new lines are inserted.
@end itemize

@noindent
However, you can customize automatic syntax checking with
@code{flycheck-check-syntax-automatically}:

@defopt flycheck-check-syntax-automatically
When Flycheck should check syntax automatically.

This variable is list of events that may trigger syntax checks.  The
following events are known:

@table @code
@item mode-enabled
Check syntax immediately if @code{flycheck-mode} is enabled.
@item save
Check syntax immediately after the buffer was saved.
@item new-line
Check syntax immediately after a new line was inserted into the buffer.
@item idle-change
Check syntax a short time after the last change to the buffer.
@end table

An syntax check is only conducted for events that are contained in this
list.  For instance, the following setting will cause Flycheck to
@emph{only} check if the mode is enabled or the buffer was saved, but
@emph{never} after changes to the buffer contents:

@lisp
(setq flycheck-check-syntax-automatically '(mode-enabled save))
@end lisp

If the list is empty syntax is never checked automatically.  In this
case, use @code{flycheck-buffer} to check syntax manually.
@end defopt

@defopt flycheck-idle-change-delay
How many seconds to wait before starting a syntax check.

After the buffer was changed, Flycheck waits as many seconds as the
value of this variable before starting a syntax check.  If the buffer is
changed during this time, Flycheck starts to wait again.

This variable has no effekt, if @code{idle-change} is not contained in
@code{flycheck-check-syntax-automatically}.
@end defopt

@noindent
Regardless of automatic syntax checking you can also check the buffer
manually:

@table @kbd
@item C-c ! c
@itemx M-x flycheck-buffer
@findex flycheck-buffer
Start a syntax check in the current buffer.
@end table

Each syntax check is comprised of the following steps:

@enumerate
@item
Run hooks in @code{flycheck-before-syntax-check-hook}.
@item
Clear error information from previous syntax checks.
@item
Select a suitable syntax checker.  @xref{Selection}, for more
information on how syntax checkers are selected.
@item
Copy the contents of the buffer to be checked to a temporary file.
@item
Execute the syntax checker.
@item
Parse the output of the tool, and report all errors and warnings.
@xref{Reporting}, for more information.
@item
If the buffer can be checked with another syntax checker, continue from
step 4, but with the next syntax checker.  This is called ``chaining''
of syntax checkers.
@item
Run hooks in @code{flycheck-after-syntax-check-hook}.
@end enumerate

@defopt flycheck-after-syntax-check-hook
Functions to run after each syntax check.

This hook is run after a syntax check was finished.

At this point, @b{all} chained checkers were run, and all errors were
parsed, highlighted and reported.  @xref{Reporting}, for more
information about error reporting.  The variable
@code{flycheck-current-errors} contains all errors from all syntax
checkers run during the syntax check, so you can use the various error
analysis functions.

Note that this hook does @b{not} run after each individual syntax
checker in the syntax checker chain, but only after the @b{last
checker}.

This variable is a normal hook. @xref{Hooks, , ,elisp}.
@end defopt

@defopt flycheck-before-syntax-check-hook
Functions to run before each syntax check.

This hook is run right before a syntax check starts.

Error information from the previous syntax check is @b{not} cleared
before this hook runs.

Note that this hook does not @b{run} before each individual syntax
checker in the syntax checker chain, but only before the @b{first
checker}.

This variable is a normal hook. @xref{Hooks, , ,elisp}.
@end defopt

There is also a hook run whenever a syntax check fails:

@defopt flycheck-syntax-check-failed-hook
Functions to run if a syntax check failed.

This hook is run whenever an error occurs during Flycheck's
internal processing.  No information about the error is given to
this hook.

You should use this hook to conduct additional cleanup actions
when Flycheck failed.

This variable is a normal hook. @xref{Hooks, , ,elisp}.
@end defopt


@node Selection, Configuration, Syntax checking, Usage
@comment  node-name,  next,  previous,  up
@section Syntax checker selection

By default Flycheck automatically selects a suitable syntax checker from
@code{flycheck-checkers}:

@defopt flycheck-checkers
A list of all syntax checkers to use as candidates for automatic checker
selection.

The first suitable syntax checker from this list is used to check a
buffer.  A syntax checker is suitable, if
@itemize
@item
it may be used for the current major mode,
@item
its predicate matches,
@item
and if the syntax checking tool exists.
@end itemize

A syntax checker contained in this list is said to be @dfn{registered}.

@xref{Syntax checkers}, for a list of available checkers.
@end defopt

If no suitable syntax checker is found the syntax check is
@emph{silently} omitted.  @emph{No} error is signaled, and only a
specific indicator informs about the omitted syntax check.  @xref{Mode
line}.

You can manually select a specific syntax checker for the current
buffer, too:

@table @kbd
@item C-c ! s
@itemx M-x flycheck-select-checker
@findex flycheck-select-checker
Prompt for a checker.  If no syntax checker is entered deselect the
current syntax checker, and re-enable automatic selection again.  With
prefix arg, re-enable automatic selection without prompting.

Syntax checker do @emph{not} need to be registered to be manually
selected with this command.
@end table

@noindent
@code{flycheck-select-checker} sets @code{flycheck-checker}:

@defvar flycheck-checker
Syntax checker to use for the current buffer.

The variable is buffer local, and safe as file local variable for
registered checkers.

If unset, automatically select a suitable syntax checker.

If set, only use this syntax checker.  Automatic selection is
@emph{disabled}.  If the syntax checker is unusable, signal an error.
@end defvar

@noindent
You may directly set this variable, e.g. via file local variables.  For
instance, you can use the following file local variable within a Python
source file to always check this file with @command{pylint}:

@example
# Local Variables:
# flycheck-checker: python-pylint
# End:
@end example

@noindent
@xref{Specifying File Variables, , ,emacs}, for more information about
file variables.

Each syntax checker provides documentation with information about the
executable the syntax checker uses, in which buffers it will be used for
syntax checks, and whether it can be configured.  @xref{Configuration},
for more information about syntax checker configuration.

@table @kbd
@item C-c ! ?
@itemx M-x flycheck-describe-checker
@findex flycheck-describe-checker
Show the documentation of a syntax checker.
@end table

@node Configuration, Reporting, Selection, Usage
@comment  node-name,  next,  previous,  up
@section Syntax checker configuration

Some syntax checkers can be configured via options.  The following
options are provided by Flycheck (use @kbd{C-h v} or @kbd{M-x
describe-variable} on the variable name for detailed help):

@defopt flycheck-flake8-maximum-complexity
The maximum McCabe complexity the @code{python-flake8} syntax checker
allows without reporting a warning.
@end defopt

@defopt flycheck-flake8-maximum-line-length
The maximum length of a line in characters the @code{python-flake8}
syntax checker allows without reporting an error.
@end defopt

@defopt flycheck-phpcs-standard
The coding standard the syntax checker @code{php-phpcs} shall use.
@end defopt

Some syntax checkers also read configuration files denoted by associated
@dfn{configuration file variables}.  The following configuration files
are provided by Flycheck:

@defopt flycheck-chktexrc
The configuration file for the @code{tex-chktex} syntax checker.
@end defopt

@defopt flycheck-coffeelintrc
The configuration file for the @code{coffee-coffeelint} syntax checker.
@end defopt

@defopt flycheck-flake8rc
The configuration file for the @code{python-flake8} syntax checker.
@end defopt

@defopt flycheck-jshintrc
The configuration file for the @code{javascript-jshint} syntax checker.
@end defopt

@defopt flycheck-rubocoprc
The configuration file for the @code{ruby-rubocop} syntax checker.
@end defopt

@defopt flycheck-tidyrc
The configuration file for the @code{html-tidy} syntax checker.
@end defopt

Customize these variables using @kbd{M-x customize-group RET
flycheck-config-files}.  Use @code{flycheck-describe-checker} to find
out whether a syntax checker has a configuration file.

You may also use these variables as file-local variables.  For instance,
the following checks the Javascript file always with @file{.jshintrc}
from the parent directory:

@example
// Local variables:
// flycheck-jshintrc: "../.jshintrc"
// End:
@end example

These configuration files are located using the functions in
@code{flycheck-locate-config-file-functions}:

@defopt flycheck-locate-config-file-functions
Functions to locate syntax checker configuration files.

Each function in this hook must accept two arguments: The value of the
configuration file variable, and the syntax checker symbol.  It must
return either a string with an absolute path to the configuration file,
or nil, if it cannot locate the configuration file.

The functions in this hook are called in order of appearance, until a
function returns non-nil.  The configuration file returned by that
function is then given to the syntax checker if it exists.
@end defopt

With the default value of this variable, configuration files are located
by the following algorithm:

@enumerate
@item
If the configuration file variable contains a path a directory
separator, expand the path against the buffer's default directory and
use the resulting path as configuration file.
@item
If @uref{https://github.com/bbatsov/projectile, Projectile} is available
and the current buffer is part of a project project, search the
configuration file in the root directory of the project.
@item
If the buffer has a file name, search the buffer's directory and any
ancestors thereof for the configuration file.
@item
Eventually attempt to locate the configuration file in the user's home
directory.
@end enumerate

If any of these steps succeeds, the subsequent steps are not executed.

@node Reporting, Navigation, Configuration, Usage
@comment  node-name,  next,  previous,  up
@section Error reporting

Errors and warnings from a syntax checker are
@itemize
@item
reported in the mode line or in a popup buffer, depending on the length
of the error messages,
@item
indicated according to @code{flycheck-indication-mode},
@item
and highlighted in the buffer with @code{flycheck-error} and
@code{flycheck-warning} faces respectively, according to
@code{flycheck-highlighting-mode}
@end itemize

@defvr {Face} flycheck-error
@defvrx {Face} flycheck-warning
The faces to use to highlight errors and warnings respectively.

Note that the default faces provided by GNU Emacs are ill-suited to
highlight errors because these are relatively pale and do not specify a
background color or underline.  Hence highlights are easily overlook and
even @b{invisible} for white space.

For best error highlighting customize these faces, or choose a color
theme that has reasonable Flycheck faces, for instance the excellent
@url{https://github.com/bbatsov/solarized-emacs,Solarized theme}.
@end defvr

@defopt flycheck-highlighting-mode
This variable determines how to highlight errors:

If set to @code{columns}, only highlight the error column.  If the error
is not specific to a column, highlight the whole line.

If set to @code{sexps}, highlight the expression at the error column.
If there is no expression at the error column, highlight the column
only.  If the error is not specific to a column, highlight the whole
line.  This mode is the default.

If set to @code{lines}, highlight the whole line the error refers to,
regardless of whether the error is specific to a column.

If set to @code{nil}, do not highlight errors at all.  However, errors
will still be reported in the mode line and in error message popups, and
indicated according to @code{flycheck-indication-mode}.

Note that this variable does @emph{not} affect error @emph{navigation}.
@code{next-error} and @code{previous-error} always jump to the error
column, regardless of the highlighting mode.
@end defopt

@defvr {Face} flycheck-fringe-error
@defvrx {Face} flycheck-fringe-warning
The faces of fringe indicators for errors and warnings respectively.
@end defvr

@defopt flycheck-indication-mode
This variable determines how to indicate errors:

If set to @code{left-fringe} or @code{right-fringe}, indicate errors and
warnings in the left and right fringe respectively.

If set to @code{nil}, do not indicate errors.  Errors will still be
reported in the mode line and in error message popups, and highlighted
according to @code{flycheck-highlighting-mode}.
@end defopt

You can also completely customize error processing by hooking into
Flycheck:

@defopt flycheck-process-error-functions
Functions to process errors.

Each function in this hook must accept a single argument:  The Flycheck
error to process.  @xref{Error API}, for more information about Flycheck
error objects.

The functions in this hook are called in order of appearance, until a
function returns non-nil.  Thus, a function in this hook may return nil,
to allow for further processing of the error, or t, to indicate that the
error was fully processed and inhibit any further processing.
@end defopt

You can also list all errors in the current buffer:

@table @kbd
@item C-c ! l
@itemx M-x flycheck-list-errors
@findex flycheck-list-errors
List all errors in the current buffer in a separate buffer.
@end table

If you hover a highlighted error with the mouse, a tooltip with the
top-most error message will be shown.

Flycheck also displays errors under point, via
@code{flycheck-display-errors-function}:

@defopt flycheck-display-errors-function
A function to display errors under point.

If set to a function, call the function with a list of all errors to
show.  If set to nil, to not display errors at all.

The default function @code{flycheck-display-error-messages} shows all
error messages separated by empty lines in the echo area or in a
separate buffer depending on the number of messages.
@end defopt

You can also work with the error messages at point, and copy them into
the kill ring or search them on Google:

@table @kbd
@item C-c ! C-w
@itemx M-x flycheck-copy-messages-as-kill
@findex flycheck-copy-messages-as-kill
Copy all Flycheck error messages at the current point into kill ring.

@item C-c ! /
@itemx M-x flycheck-google-messages
@findex flycheck-google-messages
Google for all Flycheck error messages at the current point.

If there are more than @code{flycheck-google-max-messages} errors at
point, signal an error, to avoid spamming your browser with Google tabs.

Requires the @uref{https://github.com/Bruce-Connor/emacs-google-this,
Google This} library which is available on
@uref{http://melpa.milkbox.net/, MELPA}.

@item C-c ! C
@itemx M-x flycheck-clear
@findex flycheck-clear
Clear all Flycheck errors and warnings in the current buffer.
@end table

@node Navigation, Mode line, Reporting, Usage
@comment  node-name,  next,  previous,  up
@section Error navigation

Flycheck supports the standard error navigation commands of Emacs.  If
@b{no} compilation buffer (including those from @kbd{M-x compile},
@kbd{M-x grep}, @kbd{M-x occur}, etc.) is visible, @kbd{M-g n}
(@code{next-error}) and @kbd{M-g p} (@code{previous-error}) will
navigate between Flycheck warnings and errors in the current buffer.
@xref{Compilation Mode, , ,emacs}, for more information about these
commands.

Visible compilation buffers take precedence over Flycheck navigation.
If such a buffer is visible, @kbd{M-g n} and @kbd{M-g p} will ignore
Flycheck errors and warnings, and navigate errors (or generally results)
reported by the compilation buffer instead.

To address this issue, Flycheck provides independent error navigation
commands:

@table @kbd
@item C-c ! n
@itemx M-x flycheck-next-error
@findex flycheck-next-error
Jump to the next Flycheck error.

With prefix argument, jump forwards by as many errors as specified by
the prefix argument, e.g. @kbd{M-3 C-c ! n} will move to the 3rd error
from the current point.

@item C-c ! p
@itemx M-x flycheck-previous-error
@findex flycheck-previous-error
Jump to the previous Flycheck error.

With prefix argument, jump backwards by as many errors as specified by
the prefix argument, e.g. @kbd{M-3 C-c ! p} will move to the 3rd
previous error from the current point.

@item M-x flycheck-first-error
Jump to the first Flycheck error.

With prefix argument, jump forwards to by as many errors as specified by
the prefix argument, e.g. @kbd{M-3 M-x flycheck-first-error} moves to
the 3rd error from the beginning of the buffer.

@end table

Error navigation jumps to the exact error column, or to the first
non-whitespace character of a line if the error is not specific to a
column.

@node Mode line,  , Navigation, Usage
@comment  node-name,  next,  previous,  up
@section Mode line

Flycheck indicates its state in the mode line:

@table @samp
@item FlyC
There are no errors in the current buffer.
@item FlyC*
A syntax check is being performed currently.
@item FlyC:3/4
There are three errors and four warnings in the current buffer.
@item FlyC-
Automatic syntax checker selection did not find a suitable syntax
checker.  @xref{Selection}, for more information.
@item FlyC!
The syntax check failed.  Inspect the @code{*Messages*} buffer for
details.
@item FlyC?
The syntax check had a dubious result.  The definition of the syntax
checker may be flawed.  Inspect the @code{*Messages*} buffer for
details.  This indicator should never be displayed for built-in syntax
checkers.  If it is, please report this issue to the Flycheck
developers.  @xref{Reporting issues}.
@end table

@c Local Variables:
@c mode: texinfo
@c TeX-master: "flycheck"
@c End:
