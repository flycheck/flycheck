@macro flyclanguage{language}
@unnumberedsec \language\
@anchor{language-\language\}
@cindex Language, \language\
@cindex \language\ language
@end macro

@macro flycoption{option}
@item @code{\option\}
@vindex \option\
@end macro

@macro flycoptionx{option}
@itemx @code{\option\}
@vindex \option\
@end macro

@macro flycconfigfile{option, tool}
@item @code{\option\}
@vindex \option\
Configuration file for \tool\.  @xref{Syntax checker
configuration files}, for more information about configuration files.
@end macro

@flyclanguage Ada

@itemize
@item
@flyc{ada-gnat}
(@uref{https://gcc.gnu.org/onlinedocs/gnat_ugn_unw/,GNAT}), with the
following options:

@table @asis
@flycoption flycheck-gnat-args
A list of additional arguments to GNAT.
@flycoption flycheck-gnat-include-path
A list of include directories for GNAT.  Relative paths are relative to
the file being checked.
@flycoption flycheck-gnat-language-standard
The language standard to use in GNAT, as string.
@flycoption flycheck-gnat-warnings
A list of additional warnings to enable in GNAT.  Each item is the name
of a warning category to enable.
@end table

@end itemize

@flyclanguage AsciiDoc

@itemize
@item
@flyc{asciidoc} (@uref{http://www.methods.co.nz/asciidoc,AsciiDoc})
@end itemize

@flyclanguage{C/C++}

@enumerate
@item
@flyc{c/c++-clang} (syntax and type check with
@uref{http://clang.llvm.org/,Clang}) or @flyc{c/c++-gcc} (syntax and
type check with @uref{https://gcc.gnu.org/, GCC}), and
@item
@flyc{c/c++-cppcheck} (style and error check with
@uref{http://cppcheck.sourceforge.net/,cppcheck}).
@end enumerate

@flyc{c/c++-clang} and @flyc{c/c++-gcc} provide the following options:

@table @asis
@flycoption flycheck-clang-args
@flycoptionx flycheck-gcc-args
A list of additional arguments for Clang/GCC.
@flycoption flycheck-clang-blocks
Whether to enable blocks in Clang.
@flycoption flycheck-clang-definitions
@flycoptionx flycheck-gcc-definitions
A list of additional preprocessor definitions for Clang/GCC.
@flycoption flycheck-clang-include-path
@flycoptionx flycheck-gcc-include-path
A list of include directories for Clang/GCC, relative to the file being
checked.
@flycoption flycheck-clang-includes
@flycoptionx flycheck-gcc-includes
A list of additional include files for Clang/GCC, relative to the file
being checked.
@flycoption flycheck-clang-language-standard
@flycoptionx flycheck-gcc-language-standard
The language standard to use in Clang/GCC, as string, via the
@option{-std} option.
@flycoption flycheck-clang-ms-extensions
Whether to enable Microsoft extensions to C/C++ in Clang.
@flycoption flycheck-clang-no-exceptions
@flycoption flycheck-gcc-no-exceptions
Whether to disable exceptions in Clang/GCC.
@flycoption flycheck-clang-no-rtti
@flycoptionx flycheck-gcc-no-rtti
Whether to disable RTTI in Clang/GCC, via @option{-fno-rtti}.
@flycoption flycheck-clang-standard-library
The name of the standard library to use for Clang, as string.
@flycoption flycheck-gcc-openmp
Whether to enable OpenMP in GCC.
@flycoption flycheck-clang-pedantic
@flycoption flycheck-gcc-pedantic
Whether to warn about language extensions in Clang/GCC.
@flycoption flycheck-clang-pedantic-errors
@flycoption flycheck-gcc-pedantic-errors
Whether to error on language extensions in Clang/GCC.
@flycoption flycheck-clang-warnings
@flycoptionx flycheck-gcc-warnings
A list of additional warnings to enable in Clang.  Each item is the name
of a warning or warning category for @option{-W}.
@end table

@noindent
@flyc{c/c++-cppcheck} provides the following options:

@table @asis
@flycoption flycheck-cppcheck-checks
A list of enabled checks for cppcheck.  Each item is the name of a
check for the @option{--enable} option.
@flycoption flycheck-cppcheck-inconclusive
Whether to enable inconclusive checks in cppcheck.  These checks may
yield more false positives than normal checks.
@flycoption flycheck-cppcheck-include-path
A list of include directories for cppcheck.  Relative paths are relative to
the file being checked.
@end table

@flyclanguage{CFEngine}

@itemize
@item
@flyc{cfengine} (@uref{http://cfengine.com/,CFEngine})
@end itemize

@flyclanguage{Chef}

@itemize
@item
@flyc{chef-foodcritic} (style check with
@uref{http://acrmp.github.io/foodcritic/,foodcritic}), with the
following option:

@table @asis
@flycoption flycheck-foodcritic-tags
A list of tags to select for Foodcritic.
@end table

@end itemize

@flyclanguage{Coffeescript}

@enumerate
@item
@flyc{coffee} (syntax check with @uref{http://coffeescript.org/,coffee})
@item
@flyc{coffee-coffeelint} (code style check with
@uref{http://www.coffeelint.org/,coffeelint}), with the following
option:

@table @asis
@flycconfigfile{flycheck-coffeelintrc,coffeelint}
@end table

@end enumerate

@flyclanguage{Coq}

@itemize
@item
@flyc{coq} (@uref{http://coq.inria.fr/,Coq})
@end itemize

@flyclanguage{CSS}

@itemize
@item
@flyc{css-csslint} (style and error check with
@uref{https://github.com/CSSLint/csslint,CSSLint})
@end itemize

@flyclanguage{D}

@itemize
@item
@flyc{d-dmd} (@uref{http://dlang.org/,DMD}), with the following options:

@table @asis
@flycoption flycheck-dmd-include-path
A list of include directories for DMD.
@flycoption flycheck-dmd-args
A list of additional arguments for DMD.
@end table

@end itemize

@smallindentedblock
The extension @ghref{flycheck/flycheck-d-unittest,flycheck-d-unittest}
adds a syntax checker which runs D unittests on the fly and reports the
results.
@end smallindentedblock

@flyclanguage{Emacs Lisp}

@enumerate
@item
@flyc{emacs-lisp} (syntax check with the built-in Emacs byte compiler)
@item
@flyc{emacs-lisp-checkdoc} (code and documentation check with
@code{checkdoc})
@end enumerate

@smallindentedblock
The extension @ghref{purcell/flycheck-package,flycheck-package} adds a
syntax checker which checks for violations of Emacs Lisp packaging
conventions.
@end smallindentedblock

The @flyc{emacs-lisp} checker provides the following options

@table @asis
@flycoption flycheck-emacs-lisp-load-path
The load path to use while checking Emacs Lisp files, as list of
strings.  Relative directories are expanded against the
@code{default-directory} of the buffer being checked.

@flycoption flycheck-emacs-lisp-initialize-packages
Whether to initialize Emacs' package manager with
@code{package-initialize} before checking the buffer.  If set to
@code{auto} (the default), only initialize the package managers for
files in under @code{user-emacs-directory}.

@flycoption flycheck-emacs-lisp-package-user-dir
The package directory for the Emacs Lisp checker, as string.  Has no
effect if @code{flycheck-emacs-lisp-initialize-packages} is nil.
@end table

@flyclanguage{Erlang}

@itemize
@item
@flyc{erlang} (@uref{http://www.erlang.org/,Erlang})

@table @asis
@flycoption flycheck-erlang-include-path
A list of include directories for Erlang.

@flycoption flycheck-erlang-library-path
A list of library directories for Erlang.
@end table

@end itemize

@flyclanguage{ERuby}

@itemize
@item
@flyc{eruby-erubis}
(@uref{http://www.kuwata-lab.com/erubis/,@command{erubis}})
@end itemize

@flyclanguage{Fortran}

@enumerate
@item
@flyc{fortran-gfortran}
(@uref{https://gcc.gnu.org/onlinedocs/gfortran/,GFortran}), with the
following options:

@table @asis
@flycoption flycheck-gfortran-args
A list of additional arguments to GFortran.

@flycoption flycheck-gfortran-include-path
A list of include directories for GFortran.  Relative paths are relative
to the file being checked.

@flycoption flycheck-gfortran-language-standard
The language standard to use with GFortran, for the @option{-std}
option.

@flycoption flycheck-gfortran-layout
The source code layout to use with GFortran.  Set to @code{free} or
@code{fixed} for free or fixed layout respectively, or nil (the default)
to let GFortran automatically determine the layout.

@flycoption flycheck-gfortran-warnings
A list of warnings enabled for GFortran, via the @option{-W} option.
@end table

@end enumerate

@flyclanguage{Go}

@enumerate
@item
@flyc{go-gofmt} (syntax check with
@uref{http://golang.org/cmd/gofmt/,gofmt})
@item
@flyc{go-golint} (coding style with
@uref{https://github.com/golang/lint,Golint})
@item
@flyc{go-vet} (check for suspicious code with
@uref{http://godoc.org/golang.org/x/tools/cmd/vet, @command{go tool
vet}})
@item
@flyc{go-build} or @flyc{go-test} (syntax and type check with
@uref{http://golang.org/cmd/go, Go}, for source and tests
respectively)
@item
@flyc{go-errcheck} (check for unhandled error returns with
@uref{https://github.com/kisielk/errcheck, errcheck})
@end enumerate

@flyc{go-vet} provides the following option:

@table @asis
@flycoption flycheck-go-vet-print-functions
A list of print-like functions for go vet.  Go vet will check these
functions for format string problems.
@end table

@flyclanguage{Groovy}

@itemize
@item
@flyc{groovy} (syntax check using groovy compiler API (@uref{http://www.groovy-lang.org/}))

@end itemize

@flyclanguage{Haml}

@itemize
@item
@flyc{haml} (@uref{http://haml.info/,Haml})
@end itemize

@flyclanguage{Handlebars}

@itemize
@item
@flyc{handlebars} (@uref{http://handlebarsjs.com/,Handlebars})
@end itemize

@flyclanguage{Haskell}

@enumerate
@item
@itemize @bullet
@item
@flyc{haskell-stack-ghc} (syntax and type checker using
@uref{https://github.com/commercialhaskell/stack, Stack}) in Stack
projects, or
@item
@flyc{haskell-ghc} (syntax and type checker with
@uref{http://www.haskell.org/ghc/,GHC}),
@end itemize

@item
and @flyc{haskell-hlint} (style checker with
@uref{https://github.com/ndmitchell/hlint,hlint}), with the
following options:

@table @asis
@flycoption flycheck-hlint-language-extensions
Extensions list.

@flycoption flycheck-hlint-ignore-rules
Ignore rules list.

@flycoption flycheck-hlint-hint-packages
Hint packages to include.
@end table

@table @asis
@flycconfigfile{flycheck-hlintrc,hlint}
@end table

@end enumerate

@smallindentedblock
The extension @ghref{flycheck/flycheck-haskell,flycheck-haskell}
configures Flycheck from the current Cabal project, and adds support for
Cabal sandboxes.  The extension
@ghref{flycheck/flycheck-hdevtools,flycheck-hdevtools} adds an
alternative syntax checker for @code{haskell-ghc} using
@uref{https://github.com/bitc/hdevtools/,hdevtools}.
@end smallindentedblock

The @flyc{haskell-ghc} checker provides the following options:

@table @asis
@flycoption flycheck-ghc-args
A list of additional arguments for GHC.

@flycoption flycheck-ghc-no-user-package-database
Whether to disable the user package database in GHC.

@flycoption flycheck-ghc-package-databases
A list of additional package databases for GHC.  Each item points to a
directory containing a package directory, for the @option{-package-db}
option.

@flycoption flycheck-ghc-search-path
A list of module directories for GHC, via the @option{-i} option.

@flycoption flycheck-ghc-language-extensions
A list of language extensions for GHC, via @option{-X}.
@end table

@flyclanguage{HTML}

@itemize
@item
@flyc{html-tidy} (@uref{https://github.com/w3c/tidy-html5,Tidy HTML5}),
with the following option:

@table @asis
@flycconfigfile{flycheck-tidyrc,Tidy}
@end table

@end itemize

@flyclanguage{Jade}

@itemize
@item
@flyc{jade} (using @uref{http://jade-lang.com/,Jade})
@end itemize

@flyclanguage{Javascript}

@enumerate
@item
@itemize
@item
@flyc{javascript-jshint} (@uref{http://jshint.com/,JSHint}),
@item
or @flyc{javascript-eslint} (@uref{http://eslint.org/,ESLint}),
@item
or @flyc{javascript-gjslint}
(@uref{https://developers.google.com/closure/utilities,Closure Linter})
@end itemize
@item
@flyc{javascript-jscs} (@uref{http://jscs.info/,JSCS})
@item
@flyc{javascript-standard}
(@uref{https://github.com/feross/standard,Standard} or
@uref{https://github.com/Flet/semistandard,Semistandard})
@end enumerate

These syntax checkers provide the following options:
checker provides the following option:

@table @asis
@flycoption flycheck-eslint-rulesdir
A directory with custom rules for  @flyc{javascript-eslint}.
@flycoption flycheck-jscs-esprima
A directory with a custom Esprima version for @flyc{javascript-jscs}.
@end table

They also read the following configuration files:

@table @asis
@flycconfigfile{flycheck-eslintrc,ESLint}
@flycconfigfile{flycheck-jshintrc,JSHint}
@flycconfigfile{flycheck-gjslintrc,Closure Linter}
@flycconfigfile{flycheck-jscsrc,JSCS}
@end table

@flyclanguage{JSON}

@itemize
@item
@flyc{json-jsonlint} (@uref{https://github.com/zaach/jsonlint,jsonlint})
@end itemize

@flyclanguage{Less}

@itemize
@item
@flyc{less} (@uref{http://lesscss.org/,less})
@end itemize

@flyclanguage{Lua}

@itemize
@item
@flyc{luacheck} (@uref{https://github.com/mpeterv/luacheck,Luacheck})
with the following option:

@table @asis
@flycconfigfile{flycheck-luacheckrc,Luacheck}
@end table

@item
@flyc{lua} (@uref{http://www.lua.org/,Lua compiler})
@end itemize

@flyclanguage{Perl}

@enumerate
@item
@flyc{perl} (syntax check with the @uref{http://www.perl.org/,Perl
interpreter})
@item
@flyc{perl-perlcritic} (style and code check with
@uref{https://metacpan.org/pod/Perl::Critic, Perl::Critic})
@end enumerate

These syntax checkers checker provide the following options:

@table @asis
@flycoption flycheck-perl-include-path
A list of include directories for Perl, relative to the file being
checked.
@flycoption flycheck-perlcritic-severity
The severity level for Perl::Critic, as integer for the
@option{--severity} option of Perl::Critic.
@end table

@flyclanguage{PHP}

@enumerate
@item
@flyc{php} (syntax check with
@uref{https://metacpan.org/pod/Perl::Critic,PHP CLI})
@item
@flyc{php-phpmd} (code check with @uref{http://phpmd.org/,PHP Mess
Detector})
@item
@flyc{php-phpcs} (style check with
@uref{http://pear.php.net/package/PHP_CodeSniffer/, PHP CodeSniffer})
@end enumerate

These checkers provide the following options:

@table @asis
@flycoption flycheck-phpmd-rulesets
A list of rule sets for PHP Mess Detector as strings.  Each item is
either the name of a default rule set, or the path to a custom rule set
file.

@flycoption flycheck-phpcs-standard
The coding standard for PHP CodeSniffer, either as name of a built-in
standard, or as path to a standard specification.
@end table

@flyclanguage{Puppet}

@itemize
@item
@flyc{puppet-parser} (syntax check with @uref{http://puppetlabs.com/, Puppet})
@item
@flyc{puppet-lint} (style check with @uref{http://puppet-lint.com/,
Puppet Lint})
@end itemize

@flyclanguage{Python}

@itemize
@item
@flyc{python-flake8} (syntax and style checking with
@uref{https://pypi.python.org/pypi/flake8,flake8}), or
@item
@flyc{python-pylint} (syntax and style checking with
@uref{http://pylint.org/,Pylint}), or
@item
@flyc{python-pycompile} (syntax checking with Python's
@uref{https://docs.python.org/3.4/library/py_compile.html,built-in byte
compiler}, as last resort)
@end itemize

@smallindentedblock
The extension @ghref{Wilfred/flycheck-pyflakes,flycheck-pyflakes} adds a
syntax checker using
@uref{https://pypi.python.org/pypi/pyflakes,Pyflakes}.
@end smallindentedblock

@flyc{python-flake8} provides the following options:

@table @asis
@flycoption flycheck-flake8-error-level-alist
An alist mapping Flake8 error IDs to Flycheck error levels.

@flycoption flycheck-flake8-maximum-complexity
The maximum McCabe complexity of methods allowed by Flake8.

@flycoption flycheck-flake8-maximum-line-length
The maximum length of lines for Flake8.

@flycconfigfile{flycheck-flake8rc,Flake8}
@end table

@flyc{python-pylint} provides the following options:

@table @asis
@flycoption flycheck-pylint-use-symbolic-id
A boolean indicating whether to report symbolic or numeric message identifiers.
For example, whether to report a message type as no-name-in-module, or E0611.
On by default.

@flycconfigfile{flycheck-pylintrc,Pylint}
@end table

@flyclanguage{R}

@itemize
@item
@flyc{r-lintr} (syntax and style check with
@uref{jimhester/lintr,lintr}), with the following options:

@table @asis
@flycoption flycheck-lintr-caching
Whether to enable caching in lintr.  On by default.  Only disable it if
caching causes real problems.

@flycoption flycheck-lintr-linters
Linters to use with lintr, as a string containing an R expression which
selects the linters to use.
@end table

@end itemize

@flyclanguage{Racket}

@itemize
@item
@flyc{racket} (@uref{http://racket-lang.org/,Racket})
@end itemize

@flyclanguage{RPM Spec}

@itemize
@item
@flyc{rpm-rpmlint}
(@uref{http://sourceforge.net/projects/rpmlint/,rpmlint})
@end itemize

@flyclanguage{reStructuredText}

@itemize
@item
@flyc{rst-sphinx} (using @uref{http://sphinx-doc.org/,Sphinx}, for Sphinx
documentation files), or
@flyc{rst} (using @uref{http://docutils.sourceforge.net/,docutils}, for
plain reStructuredFiles files)
@end itemize

@flyc{rst-sphinx} provides the following option:

@table @asis
@flycoption flycheck-sphinx-warn-on-missing-references
Whether to emit warnings for all missing references in Sphinx.
@end table

@flyclanguage{Ruby}

@enumerate
@item
@flyc{ruby-rubocop} (syntax and style check using
@uref{http://batsov.com/rubocop/,RuboCop})
@item
@flyc{ruby-rubylint} (syntax and style check using
@uref{http://code.yorickpeterse.com/ruby-lint/latest/,ruby-lint})
@end enumerate

These checkers provide the following options

@table @asis
@flycoption flycheck-rubocop-lint-only
Whether to suppress warnings about style issues in Rubocop, via the
@option{--lint} option.
@flycconfigfile{flycheck-rubocoprc,Rubocop}
@flycconfigfile{flycheck-rubylintrc,ruby-lint}
@end table

If none of the above is available, Flycheck will fall back to one of the
following checkers for very basic checking:

@itemize
@item
@flyc{ruby} (using the @uref{https://www.ruby-lang.org/,standard Ruby
interpreter}),
@item
@flyc{ruby-jruby} (using @uref{http://jruby.org/,JRuby})
@end itemize

@flyclanguage{Rust}

@itemize
@item
@flyc{rust} (using the @uref{http://www.rust-lang.org/,Rust compiler}),
with the following options:

@table @asis
@flycoption flycheck-rust-args
A list of additional arguments for the Rust compiler @command{rustc}.
@flycoption flycheck-rust-check-tests
Whether to check test code in Rust.

@flycoption flycheck-rust-crate-root
A path to the crate root for the current buffer, or nil if the current
buffer is a crate by itself.

@flycoption flycheck-rust-crate-type
The type of the crate to check, as string for the @option{--crate-type}
option.

@flycoption flycheck-rust-library-path
A list of library directories for Rust.  Relative paths are relative to
the buffer being checked.
@end table

@end itemize

@smallindentedblock
The @ghref{flycheck/flycheck-rust,flycheck-rust} extension configures
Flycheck according to the current
@uref{http://doc.crates.io/guide.html,Cargo} project.
@end smallindentedblock

@flyclanguage{Sass}

@itemize
@item
@flyc{sass} (using the @uref{http://sass-lang.com/,standard Sass
processor}), with the following option:

@table @asis
@flycoption flycheck-sass-compass
Whether to enable the Compass CSS framework in SASS, via
@option{--compass}.
@end table

@end itemize

@flyclanguage{Scala}

@enumerate
@item
@flyc{scala} (syntax and type check using the
@uref{http://www.scala-lang.org/,Scala compiler})
@item
@flyc{scala-scalastyle} (style check using
@uref{http://www.scalastyle.org/,Scalastyle})
@end enumerate

The @flyc{scala-scalastyle} syntax checker needs the following options:

@table @asis
@flycoption flycheck-scalastyle-jar
The path to the main JAR file of Scalastyle.
@flycconfigfile{flycheck-scalastylerc,Scalastyle}
@end table

If these options are not set, @flyc{scala-scalastyle} will not be used.

@flyclanguage{SCSS}

@itemize
@item
@flyc{scss-lint} (using @uref{https://github.com/brigade/scss-lint,
SCSS-Lint}), or
@item
@flyc{scss} (using the @uref{http://sass-lang.com/,standard SCSS
processor})
@end itemize

These syntax checkers provide the following options:

@table @asis
@flycoption flycheck-scss-compass
Whether to enable the Compass CSS framework in SCSS, via
@option{--compass}.
@flycconfigfile{flycheck-scss-lintrc,SCSS-Lint}
@end table

@flyclanguage{Shell scripting languages}

@enumerate
@item
Syntax check with one of the following checkers, depending on the shell
used for the current Sh Mode buffer,
@itemize
@item
@flyc{sh-bash} (for @uref{http://www.gnu.org/software/bash/,Bash})
@item
@flyc{sh-posix-dash} or @flyc{sh-posix-bash} (for POSIX shell scripts,
using @uref{http://gondor.apana.org.au/~herbert/dash/,Dash} or
@uref{http://www.gnu.org/software/bash/,Bash} respectively)
@item
@flyc{sh-zsh} (for @uref{http://www.zsh.org/,Zsh})
@end itemize
@item
@flyc{sh-shellcheck} (code and style check using
@uref{https://github.com/koalaman/shellcheck/,ShellCheck})
@end enumerate

@flyc{sh-shellcheck} provides the following option:

@table @asis
@flycoption flycheck-shellcheck-excluded-warnings
A list of excluded warnings for ShellCheck.
@end table

@flyclanguage{Slim}

@itemize
@item
@flyc{slim} (using @uref{http://slim-lang.com/,Slim})
@end itemize

@flyclanguage{SQL}

@itemize
@item
@flyc{sql-sqlint} (using @uref{https://github.com/purcell/sqlint,Sqlint})
@end itemize

@flyclanguage{TeX/LaTeX}

@itemize
@item
@flyc{tex-chktex} (style check using
@uref{http://www.nongnu.org/chktex/,ChkTeX}), or
@item
@flyc{tex-lacheck} (style check using
@uref{http://www.ctan.org/pkg/lacheck,Lacheck})
@end itemize

@flyc{tex-chktex} provides the following option:

@table @asis
@flycconfigfile{flycheck-chktexrc,ChkTeX}
@end table

@flyclanguage{Texinfo}

@itemize
@item
@flyc{texinfo} (using
@uref{http://www.gnu.org/software/texinfo/,makeinfo})
@end itemize

@flyclanguage{Verilog}

@itemize
@item
@flyc{verilog-verilator} (using
@uref{http://www.veripool.org/wiki/verilator,Verilator})
@end itemize

@flyc{verilog-verilator} provides the following options:

@table @asis
@flycoption flycheck-verilator-include-path
A list of include directories for Verilator.  Relative paths are relative to
the file being checked.
@end table

@flyclanguage{XML}

@itemize
@item
@flyc{xml-xmlstarlet} (using @uref{http://xmlstar.sourceforge.net,XMLStarlet}),
or
@item
@flyc{xml-xmllint} (using @uref{http://www.xmlsoft.org/,xmllint})
@end itemize

@flyclanguage{YAML}

@itemize
@item
@flyc{yaml-jsyaml} (using
@uref{https://github.com/nodeca/js-yaml,js-yaml}), or
@item
@flyc{yaml-ruby} (using Ruby's YAML parser)
@end itemize

@c Local Variables:
@c mode: texinfo
@c TeX-master: "flycheck"
@c End:
