\input texinfo
@setfilename flycheck.info
@settitle The Flycheck manual
@documentencoding UTF-8
@documentlanguage en

@c Macros

@c A Github link shortcut
@macro gh{url, text}
@uref{https://github.com/\url\, \text\}
@end macro

@macro flyc{checker}
@code{\checker\}
@end macro

@macro iflyc{checker}
@item @flyc{\checker\}
@end macro

@syncodeindex vr cp
@syncodeindex fn cp
@syncodeindex tp cp

@ifhtml
@html
<div id="frontmatter">

<p class="text-center lead">
Modern on-the-fly syntax checking for GNU Emacs 24
<small>(aka “Flymake done right”)</small>
</p>

<p class="text-center">
<small>Copyright © 2013, 2014 Sebastian Wiesner</small>
</p>

<p class="text-center">
<small>Flycheck is distributed under the
terms of the <a href="http://www.gnu.org/licenses/gpl-3.0.en.html"
target="_blank">GNU GPL 3 or any later version</a>.</small>
</p>

<p class="text-center">
<small>This manual is distributed under the terms of the <a
href="http://www.gnu.org/licenses/fdl-1.3.en.html" target="_blank">GNU
FDL 1.3 or any later version</a>, with no Invariant Sections, no
Front-Cover Texts, and no Back-Cover Texts.</small>
<p>

<p class="text-center">
<a class="btn btn-info btn-large" href="Introduction.html#Introduction">
Introduction
</a>
<a class="btn btn-primary btn-large"
   href="https://github.com/flycheck/flycheck"
   target="_blank">
Github
</a>
<a class="btn btn-primary btn-large"
   href="https://github.com/flycheck/flycheck/wiki"
   target="_blank">
Wiki
</a>
</p>
@end html

@center @image{screenshot,,,Flycheck in action}

@html
</div>
@end html

@end ifhtml

@copying
This manual is for Flycheck, the on-the-fly syntax checker for GNU Emacs.

Copyright @copyright{} 2013, 2014 Sebastian Wiesner

@quotation
  Permission is granted to copy, distribute and/or modify this document
  under the terms of the GNU Free Documentation License, Version 1.3 or
  any later version published by the Free Software Foundation; with no
  Invariant Sections, no Front-Cover Texts, and no Back-Cover Texts.  A
  copy of the license is included in the section entitled ``GNU Free
  Documentation License''.
@end quotation
@end copying

@dircategory Emacs
@direntry
* Flycheck: (flycheck). On the fly syntax checking (aka ``flymake done right'')
@end direntry

@titlepage
@end titlepage

@contents

@node Top, Introduction, (dir), (dir)
@top Flycheck manual

@insertcopying

@menu
* Introduction::                Introduce Flycheck, aka ``flymake done right''
* Usage::                       How to use Flycheck for on-the-fly syntax checking
* Extending::                   How to extend Flycheck with new syntax checkers
* API::                         An overview about the Flycheck API
* Contribution::                How to contribute to Flycheck development
* Changes::                     Changes to Flycheck
* Credits::                     Developers and contributors to Flycheck
* GNU Free Documentation License::  The license of this documentation
* Syntax checkers::             Available syntax checkers
* Definition Index::            An index of all types, functions and variables
@end menu

@node Introduction, Usage, Top, Top
@comment  node-name,  next,  previous,  up
@chapter Introduction

Flycheck (aka ``Flymake done right'') is a modern on-the-fly syntax
checking extension for GNU Emacs 24 with

@itemize @bullet
@item
ready-to-use syntax checkers for a bunch of languages,
@item
easy customization,
@item
a comprehensive manual,
@item
a dead simple, declarative API to create new syntax checkers,
@item
major-mode based selection of syntax checkers,
@item
multiple syntax checkers per buffer,
@item
optional error list popup,
@item
a ``doesn't get in your way'' guarantee,
@item
and a clean, concise and understandable implementation with decent test
coverage.
@end itemize

@ifhtml
@noindent
And this is how it looks in action, using the awesome
@uref{https://github.com/bbatsov/zenburn-emacs, Zenburn} color theme and
the great @uref{https://github.com/adobe/source-code-pro, Source Code
Pro} font:
@center @image{screenshot,,,Flycheck in action}
@end ifhtml

@menu
* Features::                    What Flycheck can do for you
* Installation::                How to install Flycheck in your GNU Emacs 24
* Activation::                  How to activate Flycheck for on-the-fly syntax
                                 checking
@end menu

@node Features, Installation, Introduction, Introduction
@comment  node-name,  next,  previous,  up
@section Features

@itemize @bullet
@item
Automatic on-the-fly syntax checking while editing
@item
Fully automatic selection of the syntax checker
@item
Optional manual selection of a syntax checker with
@code{flycheck-select-checker} at @kbd{C-c ! s}
@item
Built-in syntax checkers for:

@itemize @bullet
@item
AsciiDoc (using @command{asciidoc})
@item
C/C++ (using @command{clang} and @command{cppcheck})
@item
CFEngine (using @command{cf-promises})
@item
Chef cookbooks (using @command{foodcritic}))
@item
CoffeeScript (using @command{coffee} and @command{coffeelint})
@item
CSS (using @command{csslint}))
@item
D (using @command{dmd})
@item
Elixir (using @command{elixirc})
@item
Emacs Lisp (using the byte compiler and CheckDoc)
@item
Erlang (using @command{erlc})
@item
ERuby (using @command{erubis})
@item
Go (using @command{gofmt}, @command{go build} and @command{go test})
@item
Haml (using @command{haml})
@item
Handlebars (using @command{handlebars})
@item
Haskell (using @command{ghc} and @command{hlint})
@item
HTML (using @command{tidy})
@item
Javascript (using @command{jshint}, @command{eslint} and @command{gjslint})
@item
JSON (using @command{jsonlint})
@item
LESS (using @command{lessc})
@item
Lua (using @command{luac})
@item
Perl (using @command{perl})
@item
PHP (using @command{php}, @command{phpmd} and @command{phpcs})
@item
Puppet (using @command{puppet parser} and @command{puppet-lint})
@item
Python (using @command{flake8} or @command{pylint})
@item
Racket
@item
ReStructuredText (using @command{rst2pseudoxml.py} from Docutils)
@item
Ruby (using @command{rubocop}, @command{ruby} , @command{jruby} or
@command{ruby-lint})
@item
Rust (using @command{rustc})
@item
Sass (using @command{sass})
@item
Scala (using @command{scalac})
@item
SCSS (using @command{scss})
@item
Shell scripts (using @command{bash}, @command{dash}, or @command{zsh}
depending on the type of shell script)
@item
Slim (using @command{slimrb})
@item
TeX/LaTeX (using @command{chktex} or @command{lacheck})
@item
Texinfo (using @command{makeinfo})
@item
Verilog (using @command{verilator})
@item
XML (using @command{xmlstarlet} or @command{xmllint})
@item
YAML (using @command{js-yaml} or @command{ruby})
@end itemize


@item
Nice error indication and highlighting
@item
Easy customization
@item
Syntax checker configuration with project-specific configuration files
and options
@item
Error navigation with @code{next-error} and @code{previous-error}
@item
Error list with @code{flycheck-list-errors} at @kbd{C-c ! l}
@item
Easy declarative API to define new syntax checkers
@item
Error parsers for structured markup formats (e.g. Checkdoc XML)
@end itemize

@subsection 3rd party extensions

The following extensions provide additional cool features for Flycheck:

@itemize @bullet
@item
@uref{https://github.com/flycheck/flycheck-cask, flycheck-cask} makes
Flycheck use Cask packages in @uref{https://github.com/cask/cask, Cask}
projects.

@item
@uref{https://github.com/flycheck/flycheck-color-mode-line,
flycheck-color-mode-line.el} colors the mode line according to the
Flycheck status.

@item
@uref{https://github.com/flycheck/flycheck-d-unittest,
flycheck-d-unittests} adds a Flycheck checker to run unit tests for D
programs on the fly.

@item
@uref{https://github.com/flycheck/flycheck-hdevtools,
flycheck-hdevtools} adds a Flycheck syntax checker for Haskell based on
@uref{https://github.com/bitc/hdevtools/, hdevtools}.

@item
@uref{https://github.com/flycheck/flycheck-haskell} improves Haskell
support in Flycheck, by configuring Flycheck according to the current
Cabal project, and using Cabal sandbox packages.

@item
@uref{https://github.com/flycheck/flycheck-mercury,flycheck-mercury}
adds a Flycheck syntax checker for the @uref{http://mercurylang.org/,
Mercury Language}.

@end itemize

@node Installation, Activation, Features, Introduction
@comment  node-name,  next,  previous,  up
@section Installation

Install the ELPA package from @uref{http://melpa.milkbox.net, MELPA} or
@uref{http://marmalade-repo.org/, Marmalade} using @kbd{M-x
package-install RET flycheck}.  The former is the @emph{recommended}
repository.

Neither of these repositories is included in GNU Emacs by default.  You
need to enable these repositories explicitly.  For instance, to add the
MELPA repository, add the following code to @file{init.el}:

@lisp
(require 'package)
(add-to-list 'package-archives
             '("melpa" . "http://melpa.milkbox.net/packages/") t)
(package-initialize)
@end lisp

If you use @uref{https://github.com/cask/cask, Cask}, add the
following to your @file{Cask} file:

@lisp
(source gnu)
(source melpa)

(depends-on "flycheck")
@end lisp

Flycheck supports Emacs 24.  It is tested with Emacs 24.3, and Emacs
snapshot builds.  It should work with GNU Emacs 24.1 and 24.2 as well,
but it is not tested against these versions.  If it does not work with
these versions, please report an issue.

Flycheck does not support Windows, but tries to be compatible with it.
You may try to use Flycheck on Windows.  It should mostly work, but
expect problems and issues.  Pull requests which improve Windows
compatibility are welcome.

Flycheck also does not support GNU Emacs 23 and other flavors of Emacs
(e.g. XEmacs, Aquamacs, etc.).  Don't try, it will @emph{not} work.

Most checkers depend on external tools to perform the actual syntax
checking.  Use @code{flycheck-describe-checker} to get help about a
syntax checker and its dependencies.

@node Activation,  , Installation, Introduction
@comment  node-name,  next,  previous,  up
@section Activation

Once installed, enable Flycheck mode with @kbd{M-x flycheck-mode}.  To
automatically enable Flycheck in all buffers, in which it can be used,
add the following to your @file{init.el} file:

@lisp
(add-hook 'after-init-hook #'global-flycheck-mode)
@end lisp

Flycheck will not check syntax in buffers for remote or encrypted
files.  The former is potentially slow, and the latter might leak
confidential data to temporary directories.

@node Usage, Extending, Introduction, Top
@comment  node-name,  next,  previous,  up
@chapter Usage

This chapter explains the usage of Flycheck.

@menu
* Syntax checking::             How syntax is checked
* Selection::                   How syntax checkers are selected
* Configuration::               How to configure individual syntax checkers
* Reporting::                   How syntax warnings and errors are reported
* Navigation::                  How to navigate syntax warnings and errors
* Mode line::                   How status information is displayed in the mode
                                 line
@end menu

@node Syntax checking, Selection, Usage, Usage
@comment  node-name,  next,  previous,  up
@section Syntax checking

By default, @code{flycheck-mode} checks syntax automatically when

@itemize
@item
the mode is enabled,
@item
the file is saved,
@item
or if new lines are inserted.
@end itemize

@noindent
However, you can customize automatic syntax checking with
@code{flycheck-check-syntax-automatically}:

@defopt flycheck-check-syntax-automatically
When Flycheck should check syntax automatically.

This variable is list of events that may trigger syntax checks.  The
following events are known:

@table @code
@item mode-enabled
Check syntax immediately if @code{flycheck-mode} is enabled.
@item save
Check syntax immediately after the buffer was saved.
@item new-line
Check syntax immediately after a new line was inserted into the buffer.
@item idle-change
Check syntax a short time after the last change to the buffer.
@end table

An syntax check is only conducted for events that are contained in this
list.  For instance, the following setting will cause Flycheck to
@emph{only} check if the mode is enabled or the buffer was saved, but
@emph{never} after changes to the buffer contents:

@lisp
(setq flycheck-check-syntax-automatically '(mode-enabled save))
@end lisp

If the list is empty syntax is never checked automatically.  In this
case, use @code{flycheck-buffer} to check syntax manually.
@end defopt

@defopt flycheck-idle-change-delay
How many seconds to wait before starting a syntax check.

After the buffer was changed, Flycheck waits as many seconds as the
value of this variable before starting a syntax check.  If the buffer is
changed during this time, Flycheck starts to wait again.

This variable has no effekt, if @code{idle-change} is not contained in
@code{flycheck-check-syntax-automatically}.
@end defopt

@noindent
Regardless of automatic syntax checking you can also check the buffer
manually:

@table @kbd
@item C-c ! c
@itemx M-x flycheck-buffer
@findex flycheck-buffer
Start a syntax check in the current buffer.
@end table

Each syntax check is comprised of the following steps:

@enumerate
@item
Run hooks in @code{flycheck-before-syntax-check-hook}.
@item
Clear error information from previous syntax checks.
@item
Select a suitable syntax checker.  @xref{Selection}, for more
information on how syntax checkers are selected.
@item
Copy the contents of the buffer to be checked to a temporary file.
@item
Execute the syntax checker.
@item
Parse the output of the tool, and report all errors and warnings.
@xref{Reporting}, for more information.
@item
If the buffer can be checked with another syntax checker, continue from
step 4, but with the next syntax checker.  This is called ``chaining''
of syntax checkers.
@item
Run hooks in @code{flycheck-after-syntax-check-hook}.
@end enumerate

@defopt flycheck-after-syntax-check-hook
Functions to run after each syntax check.

This hook is run after a syntax check was finished.

At this point, @b{all} chained checkers were run, and all errors were
parsed, highlighted and reported.  @xref{Reporting}, for more
information about error reporting.  The variable
@code{flycheck-current-errors} contains all errors from all syntax
checkers run during the syntax check, so you can use the various error
analysis functions.

Note that this hook does @b{not} run after each individual syntax
checker in the syntax checker chain, but only after the @b{last
checker}.

This variable is a normal hook. @xref{Hooks, , ,elisp}.
@end defopt

@defopt flycheck-before-syntax-check-hook
Functions to run before each syntax check.

This hook is run right before a syntax check starts.

Error information from the previous syntax check is @b{not} cleared
before this hook runs.

Note that this hook does not @b{run} before each individual syntax
checker in the syntax checker chain, but only before the @b{first
checker}.

This variable is a normal hook. @xref{Hooks, , ,elisp}.
@end defopt

There is also a hook run whenever a syntax check fails:

@defopt flycheck-syntax-check-failed-hook
Functions to run if a syntax check failed.

This hook is run whenever an error occurs during Flycheck's
internal processing.  No information about the error is given to
this hook.

You should use this hook to conduct additional cleanup actions
when Flycheck failed.

This variable is a normal hook. @xref{Hooks, , ,elisp}.
@end defopt


@node Selection, Configuration, Syntax checking, Usage
@comment  node-name,  next,  previous,  up
@section Syntax checker selection

By default Flycheck automatically selects a suitable syntax checker from
all @dfn{enabled} syntax checkers, that is, all syntax checkers
contained in @code{flycheck-checkers} and not in
@code{flycheck-disabled-checkers}:

@defopt flycheck-checkers
A list of all syntax checkers to use as candidates for automatic checker
selection.

The first suitable syntax checker from this list is used to check a
buffer.  A syntax checker is suitable, if

@itemize @bullet
@item
it may be used for the current major mode,
@item
its predicate matches,
@item
and if the syntax checking tool exists.
@end itemize

A syntax checker contained in this list is said to be @dfn{registered}.

@xref{Syntax checkers}, for a list of available checkers.

You should not need to change this option normally.  Please use
@code{flycheck-disabled-checkers} to disable specific syntax checkers.
@end defopt

@defopt flycheck-disabled-checkers
A list of all syntax checkers which must @emph{not} be used for
automatic checker selection.

This variable overrides a @code{flycheck-checkers}: A syntax checker in
this list will never be used, even if it is contained in
@code{flycheck-checkers}.

A syntax checker contained in this list is said to be @dfn{disabled}.
If a syntax checker is registered and not disabled, it is @dfn{enabled}.

Use this option to disable specific syntax checkers.
@end defopt

If no suitable syntax checker is found the syntax check is
@emph{silently} omitted.  @emph{No} error is signaled, and only a
specific indicator informs about the omitted syntax check.  @xref{Mode
line}.

You can manually select a specific syntax checker for the current
buffer, too:

@table @kbd
@item C-c ! s
@itemx M-x flycheck-select-checker
@findex flycheck-select-checker
Select a syntax checker for the current buffer.

With prefix arg, deselect the current syntax checker if any, and
re-enable automatic selection.

Any defined syntax checker can be selected with this command, regardless
of whether it is contained in @code{flycheck-checkers} or
@code{flycheck-disabled-checkers}.
@end table

By default, the prompt uses IDO for completion and matching, but you can
change the completion system in use:

@defopt flycheck-completion-system
The completion system to use.

@table @code
@item ido
Use IDO.

IDO is a built-in alternative completion system, without good flex
matching and a powerful UI.  You may want to install
@uref{https://github.com/lewang/flx, flx-ido} to improve the flex
matching in IDO.

@item grizzl
Use @uref{https://github.com/d11wtq/grizzl, Grizzl}.

Grizzl is an alternative completion system with powerful flex matching,
but a very limited UI.

@item nil
Use the standard unfancy @code{completing-read}.

@code{completing-read} has a very simple and primitive UI, and does not
offer flex matching.  This is the default setting, though, to match
Emacs' defaults.  With this system, you may want enable
@code{icomplete-mode} to improve the display of completion candidates at
least.
@end table
@end defopt

@noindent
@code{flycheck-select-checker} sets @code{flycheck-checker}:

@defvar flycheck-checker
Syntax checker to use for the current buffer.

The variable is buffer local, and safe as file local variable for
registered checkers.

If unset, automatically select a suitable syntax checker.

If set, only use this syntax checker.  Automatic selection is
@emph{disabled}.  If the syntax checker is unusable, signal an error.
@end defvar

@noindent
You may directly set this variable, e.g. via file local variables.  For
instance, you can use the following file local variable within a Python
source file to always check this file with @command{pylint}:

@example
# Local Variables:
# flycheck-checker: python-pylint
# End:
@end example

@noindent
@xref{Specifying File Variables, , ,emacs}, for more information about
file variables.

Each syntax checker provides documentation with information about the
executable the syntax checker uses, in which buffers it will be used for
syntax checks, and whether it can be configured.  @xref{Configuration},
for more information about syntax checker configuration.

@table @kbd
@item C-c ! ?
@itemx M-x flycheck-describe-checker
@findex flycheck-describe-checker
Show the documentation of a syntax checker.
@end table

@node Configuration, Reporting, Selection, Usage
@comment  node-name,  next,  previous,  up
@section Syntax checker configuration

@subsection Syntax checker executables

For each syntax checker, there is a buffer-local, customizable variable
@code{flycheck-@var{checker}-executable}, where @var{checker} is the
name of the syntax checker.

The value of this variable is either nil, or a string.  In the former
case, Flycheck uses the default executable from the syntax checker
definition when executing the syntax checker.  In the latter case, it
uses the value of the variable as executable.

Use these variables to override the executable from the definition per
buffer.  For instance, you could use a different Emacs version with the
@code{emacs-lisp} or @code{emacs-lisp-checkdoc}.

You can either set this variable directly in your @file{init.el}, or
change it interactively:

@table @kbd
@item C-c ! e
@itemx M-x flycheck-set-checker-executable
@findex flycheck-set-checker-executable
Set the executable of a syntax checker in the current buffer.

Prompt for a syntax checker, and an executable file, and set the
corresponding executable variable.

With prefix arg, prompt for a syntax checker and reset its executable to
the default.
@end table

@subsection Syntax checker options

Some syntax checkers can be configured via options.  The following
options are provided by Flycheck (use @kbd{C-h v} or @kbd{M-x
describe-variable} on the variable name for detailed help):

@defopt flycheck-clang-definitions
Additional preprocessor definitions for @code{c/c++-clang}.
@end defopt

@defopt flycheck-clang-include-path
Include search path for @code{c/c++-clang}.
@end defopt

@defopt flycheck-clang-includes
Additional include files for @code{c/c++-clang}.
@end defopt

@defopt flycheck-clang-language-standard
The language standard for @code{c/c++-clang}.
@end defopt

@defopt flycheck-clang-ms-extensions
Whether to enable Microsoft extensions in @code{c/c++-clang}.
@end defopt

@defopt flycheck-clang-no-rtti
Whether to disable RTTI in @code{c/c++-clang}.
@end defopt

@defopt flycheck-clang-standard-library
The standard library to use for @code{c/c++-clang}.
@end defopt

@defopt flycheck-clang-warnings
Additional warnings to enable in @code{c/c++-clang}.
@end defopt

@defopt flycheck-cppcheck-checks
Additional checks to use in @code{c/c++-cppcheck}.
@end defopt

@defopt flycheck-emacs-lisp-initialize-packages
Whether to initialize packages (see @code{package-initialize}) before
invoking the byte compiler in the @code{emacs-lisp} syntax checker.

When @code{nil}, never initialize packages.  When @code{auto},
initialize packages only when checking files from the user's Emacs
configuration in @code{user-emacs-directory}.  For any other non-nil
value, always initialize packages.
@end defopt

@defopt flycheck-emacs-lisp-load-path
The @code{load-path} to use while checking with @code{emacs-lisp}.

The directory of the file being checked is always added to
@code{load-path}, regardless of the value of this variable.

Note that changing this variable can lead to wrong results of the
syntax check, e.g. if an unexpected version of a required library
is used.
@end defopt

@defopt flycheck-emacs-lisp-package-user-dir
The package directory for the @code{emacs-lisp} syntax checker.
@end defopt

@defopt flycheck-eslint-rulesdir
A directory with custom rules for the @code{javascript-eslint} syntax
checker.
@end defopt

@defopt flycheck-flake8-maximum-complexity
The maximum McCabe complexity the @code{python-flake8} syntax checker
allows without reporting a warning.
@end defopt

@defopt flycheck-flake8-maximum-line-length
The maximum length of a line in characters the @code{python-flake8}
syntax checker allows without reporting an error.
@end defopt

@defopt flycheck-ghc-no-user-package-database
Whether to disable the user package database for @code{haskell-ghc}.
@end defopt

@defopt flycheck-ghc-package-databases
A list of package database for @code{haskell-ghc}.
@end defopt

@defopt flycheck-ghc-search-path
A list of module directories for the search path of @code{haskell-ghc}.
@end defopt

@defopt flycheck-phpcs-standard
The coding standard @code{php-phpcs} shall use.
@end defopt

@defopt flycheck-phpmd-rulesets
The rule sets @code{php-phpmd} shall use.
@end defopt

@defopt flycheck-rubocop-lint-only
Whether to disable style checks for @code{ruby-rubocop}.
@end defopt

@defopt flycheck-sass-compass
Whether to enable the Compass CSS framework for @code{sass}.
@end defopt

@defopt flycheck-scss-compass
Whether to enable the Compass CSS framework for @code{scss}.
@end defopt

@defopt flycheck-sphinx-warn-on-missing-references
Whether to warn about missing references in @code{rst-sphinx}
@end defopt

@subsection Syntax checker configuration files

Some syntax checkers also read configuration files denoted by associated
@dfn{configuration file variables}.  The following configuration files
are provided by Flycheck:

@defopt flycheck-chktexrc
The configuration file for the @code{tex-chktex} syntax checker.
@end defopt

@defopt flycheck-coffeelintrc
The configuration file for the @code{coffee-coffeelint} syntax checker.
@end defopt

@defopt flycheck-eslintrc
The configuration file for the @code{javascript-eslint} syntax checker.
@end defopt

@defopt flycheck-flake8rc
The configuration file for the @code{python-flake8} syntax checker.
@end defopt

@defopt flycheck-gjslintrc
The configuration file for the @code{javascript-gjslint} syntax checker.
@end defopt

@defopt flycheck-jshintrc
The configuration file for the @code{javascript-jshint} syntax checker.
@end defopt

@defopt flycheck-pylintrc
The configuration file for the @code{python-pylint} syntax checker.
@end defopt

@defopt flycheck-rubocoprc
The configuration file for the @code{ruby-rubocop} syntax checker.
@end defopt

@defopt flycheck-tidyrc
The configuration file for the @code{html-tidy} syntax checker.
@end defopt

The value of these variables is either a string or nil.  In the former
case, locate the configuration file using the functions in
@code{flycheck-locate-config-file-functions}:

@defopt flycheck-locate-config-file-functions
Functions to locate syntax checker configuration files.

Each function in this hook must accept two arguments: The value of the
configuration file variable, and the syntax checker symbol.  It must
return either a string with an absolute path to the configuration file,
or nil, if it cannot locate the configuration file.

The functions in this hook are called in order of appearance, until a
function returns non-nil.  The configuration file returned by that
function is then given to the syntax checker if it exists.
@end defopt

With the default value of this variable, configuration files are located
by the following algorithm:

@enumerate
@item
If the configuration file variable contains a path a directory
separator, expand the path against the buffer's default directory and
use the resulting path as configuration file.
@item
If @uref{https://github.com/bbatsov/projectile, Projectile} is available
and the current buffer is part of a project project, search the
configuration file in the root directory of the project.
@item
If the buffer has a file name, search the buffer's directory and any
ancestors thereof for the configuration file.
@item
Eventually attempt to locate the configuration file in the user's home
directory.
@end enumerate

If any of these steps succeeds, the subsequent steps are not executed.

If the configuration file is found, pass it to the syntax checker upon
invocation.

If the configuration file is not found, or if the value of the variable
is nil, invoke the syntax checker without a configuration file.

Customize these variables using @kbd{M-x customize-group RET
flycheck-config-files}.  Use @code{flycheck-describe-checker} to find
out whether a syntax checker has a configuration file.

You may also use these variables as file-local variables.  For instance,
the following checks the Javascript file always with @file{.jshintrc}
from the parent directory:

@example
// Local variables:
// flycheck-jshintrc: "../.jshintrc"
// End:
@end example

@node Reporting, Navigation, Configuration, Usage
@comment  node-name,  next,  previous,  up
@section Error reporting

Errors and warnings from a syntax checker are

@itemize @bullet
@item
reported in the mode line or in a popup buffer, depending on the length
of the error messages,
@item
indicated according to @code{flycheck-indication-mode},
@item
and highlighted in the buffer with @code{flycheck-error} and
@code{flycheck-warning} faces respectively, according to
@code{flycheck-highlighting-mode}
@end itemize

@defvr {Face} flycheck-error
@defvrx {Face} flycheck-warning
The faces to use to highlight errors and warnings respectively.

Note that the default faces provided by GNU Emacs are ill-suited to
highlight errors because these are relatively pale and do not specify a
background color or underline.  Hence highlights are easily overlook and
even @b{invisible} for white space.

For best error highlighting customize these faces, or choose a color
theme that has reasonable Flycheck faces, for instance the excellent
@url{https://github.com/bbatsov/solarized-emacs,Solarized theme}.
@end defvr

@defopt flycheck-highlighting-mode
This variable determines how to highlight errors:

@table @code
@item columns
Highlights the error column.  If the error does not have a column,
highlight the whole line.

@item symbols
Highlights the symbol at the error column, if there is any, otherwise
behave like @code{columns}.  This is the default.

@item sexps
Highlights the expression at the error column, if there is any,
otherwise behave like @code{columns}.  Note that this mode can be
@b{very} slow in some major modes.

@item lines
Highlights the whole line of the error.

@item nil
Do not highlight errors at all.  However, errors will still be reported
in the mode line and in error message popups, and indicated according to
@code{flycheck-indication-mode}.
@end table
@end defopt

@defvr {Face} flycheck-fringe-error
@defvrx {Face} flycheck-fringe-warning
The faces of fringe indicators for errors and warnings respectively.
@end defvr

@defopt flycheck-indication-mode
This variable determines how to indicate errors:

If set to @code{left-fringe} or @code{right-fringe}, indicate errors and
warnings in the left and right fringe respectively.

If set to @code{nil}, do not indicate errors.  Errors will still be
reported in the mode line and in error message popups, and highlighted
according to @code{flycheck-highlighting-mode}.
@end defopt

You can also completely customize error processing by hooking into
Flycheck:

@defopt flycheck-process-error-functions
Functions to process errors.

Each function in this hook must accept a single argument:  The Flycheck
error to process.  @xref{Error API}, for more information about Flycheck
error objects.

The functions in this hook are called in order of appearance, until a
function returns non-nil.  Thus, a function in this hook may return nil,
to allow for further processing of the error, or t, to indicate that the
error was fully processed and inhibit any further processing.
@end defopt

You can also show a list with all errors in the current buffer:

@table @kbd
@item C-c ! l
@itemx M-x flycheck-list-errors
@findex flycheck-list-errors
List all errors in the current buffer in a separate buffer.

The error list automatically refreshes after a syntax check, and follows
the current buffer, that is, if you switch to another buffer, the error
list is updated to show the errors of the new buffer.
@end table

If you hover a highlighted error with the mouse, a tooltip with the
top-most error message will be shown.

Flycheck also displays errors under point after a short delay:

@defopt flycheck-display-errors-delay
Delay in seconds before displaying errors at point.

Use floating point numbers to express fractions of seconds.
@end defopt

The error is displayed via @code{flycheck-display-errors-function}:

@defopt flycheck-display-errors-function
A function to display errors under point.

If set to a function, call the function with a list of all errors to
show.  If set to nil, to not display errors at all.

The default function is @code{flycheck-display-error-messages}.
@end defopt

The following display functions are available:
@table @code
@item flycheck-display-error-messages
@findex flycheck-display-error-messages
Show error messages separated by empty lines in the echo area.  If the
error messages are too long for the echo area, show the error messages
in a popup buffer instead.

See @code{display-message-or-buffer} for details on when popup buffers
are used.

@item flycheck-display-errors-in-list
@findex flycheck-display-errors-in-list
Show errors in the error list from @code{flycheck-list-errors} or
@kbd{C-c ! l}.

Note that this function does @b{not} actually show the error list
itself, but only adds the errors at point to it.  You need to open the
error list manually with @kbd{C-c ! l} first.
@end table

You can also work with the error messages at point, and copy them into
the kill ring or search them on Google:

@table @kbd
@item C-c ! C-w
@itemx M-x flycheck-copy-messages-as-kill
@findex flycheck-copy-messages-as-kill
Copy all Flycheck error messages at the current point into kill ring.

@item C-c ! /
@itemx M-x flycheck-google-messages
@findex flycheck-google-messages
Google for all Flycheck error messages at the current point.

If there are more than @code{flycheck-google-max-messages} errors at
point, signal an error, to avoid spamming your browser with Google tabs.

Requires the @uref{https://github.com/Bruce-Connor/emacs-google-this,
Google This} library which is available on
@uref{http://melpa.milkbox.net/, MELPA}.

@item C-c ! C
@itemx M-x flycheck-clear
@findex flycheck-clear
Clear all Flycheck errors and warnings in the current buffer.
@end table

@node Navigation, Mode line, Reporting, Usage
@comment  node-name,  next,  previous,  up
@section Error navigation

Flycheck integrates into standard error navigation commands of Emacs.
If @b{no} compilation buffer (including those from @kbd{M-x compile},
@kbd{M-x grep}, @kbd{M-x occur}, etc.) is visible, @kbd{M-g n}
(@code{next-error}) and @kbd{M-g p} (@code{previous-error}) will
navigate between Flycheck warnings and errors in the current buffer.
@xref{Compilation Mode, , ,emacs}, for more information about these
commands.

You can disable this integration by setting
@code{flycheck-next-error-navigation} to nil:

@defopt flycheck-standard-error-navigation
If non-nil, enable navigation of Flycheck errors with the standard
@code{next-error} and friends.

Otherwise, do not integrate in standard error navigation, and let these
functions only navigate compilation mode errors.

Changes to this variable only take effect when enabling
@code{flycheck-mode}.
@end defopt

Visible compilation buffers take precedence over Flycheck navigation.
If such a buffer is visible, @kbd{M-g n} and @kbd{M-g p} will ignore
Flycheck errors and warnings, and navigate errors (or generally results)
reported by the compilation buffer instead.

To address this issue, Flycheck provides independent error navigation
commands:

@table @kbd
@item C-c ! n
@itemx M-x flycheck-next-error
@findex flycheck-next-error
Jump to the next Flycheck error.

With prefix argument, jump forwards by as many errors as specified by
the prefix argument, e.g. @kbd{M-3 C-c ! n} will move to the 3rd error
from the current point.

@item C-c ! p
@itemx M-x flycheck-previous-error
@findex flycheck-previous-error
Jump to the previous Flycheck error.

With prefix argument, jump backwards by as many errors as specified by
the prefix argument, e.g. @kbd{M-3 C-c ! p} will move to the 3rd
previous error from the current point.

@item M-x flycheck-first-error
Jump to the first Flycheck error.

With prefix argument, jump forwards to by as many errors as specified by
the prefix argument, e.g. @kbd{M-3 M-x flycheck-first-error} moves to
the 3rd error from the beginning of the buffer.

@end table

These functions are not affected by the value of
@code{flycheck-standard-error-navigation}.

@node Mode line,  , Navigation, Usage
@comment  node-name,  next,  previous,  up
@section Mode line

Flycheck indicates its state in the mode line:

@table @samp
@item FlyC
There are no errors in the current buffer.
@item FlyC*
A syntax check is being performed currently.
@item FlyC:3/4
There are three errors and four warnings in the current buffer.
@item FlyC-
Automatic syntax checker selection did not find a suitable syntax
checker.  @xref{Selection}, for more information.
@item FlyC!
The syntax check failed.  Inspect the @code{*Messages*} buffer for
details.
@item FlyC?
The syntax check had a dubious result.  The definition of the syntax
checker may be flawed.  Inspect the @code{*Messages*} buffer for
details.  This indicator should never be displayed for built-in syntax
checkers.  If it is, please report this issue to the Flycheck
developers.  @xref{Reporting issues}.
@end table

@node Extending, API, Usage, Top
@comment  node-name,  next,  previous,  up
@chapter Extending

This chapter explains how to add new syntax checkers to Flycheck, and
provides examples for common use cases.

If you define a new syntax checker, @emph{please} contribute it to
Flycheck to make it available to other users, too.  @xref{Contributing
syntax checkers}, for more information.

@menu
* Definition::                  How to define syntax checkers
* Error levels::                Built-in error levels and how to define new
* Error parsers::               Built-in error parsers
* Option filters::              Built-in option filters
* Extending checkers::          How to extend defined syntax checkers
* Examples::                    Examples on how to define syntax checkers
@end menu

@node Definition, Error levels, Extending, Extending
@comment  node-name,  next,  previous,  up
@section Definition of syntax checkers

You define new syntax checkers with @code{flycheck-define-checker}:

@defmac flycheck-define-checker symbol docstring &rest properties
Define @var{symbol} as new syntax checker with @var{docstring} and
@var{properties}.

@var{docstring} provides documentation for the syntax checker.  Use
@kbd{C-c ! ?} or @kbd{M-x flycheck-describe-checker} to view the
documentation of a syntax checker.

The following @var{properties} constitute a syntax checker:

@table @code
@item :command (@var{executable} @var{arg} ...)
An unquoted list describing the syntax checker command to execute.

@var{executable} must be a string with the executable of this syntax
checker.

A customizable, buffer-local variable
@code{flycheck-@var{symbol}-executable} is implicitly defined to allow
overriding of the executable.  If this variable is non-nil, Flycheck
uses the value of the variable as executable, otherwise it falls back to
@var{executable}.  In either case, the executable is checked with
@code{executable-find} before use.

Each @var{arg} is an argument to the executable, either as string, or as
one of the following special symbols and forms:

@table @code
@item source
The file to check.

This file is a temporary file with the contents of the buffer to check,
created in the system's temporary directory.

If the buffer to check has a file name, the non-directory component of
the name of the temporary file will be the same as in the buffer's file
name, to support languages which enforce specific rules on the file name
(e.g. the file must be named after the containing feature, class, etc.).

If the buffer to check has no file name, the name of the temporary file
is random.

This symbol is the @b{preferred} way to pass the input file to your
syntax checker.

@item source-inplace
The file to check.

This file is a temporary file with the contents of the buffer to check,
created @b{in the same directory} as the buffer's file.  The name of the
file is random.

If the buffer has no file name, this symbol is equivalent to
@code{source}.

This symbol should be used if and only if the syntax check @b{needs
other files} from the source directory (e.g. include files in C, or
Python modules).

@item source-original
The file name of the current buffer, as by @code{buffer-file-name}, or
an empty string, if the buffer has no file name.

This symbol is provided to @b{additionally} pass the real name of the
file to check to a syntax checker.

It should @b{never} be used as primary input to the syntax checker,
unless both @code{source} and @code{source-original} are absolutely not
applicable.  In this case, be sure to add a predicate to your syntax
checker that inhibits the syntax check, if the buffer has no file name,
or was modified, for otherwise the syntax check will fail or return
out-dated errors:

@lisp
:predicate (lambda () (and (buffer-file-name)
                           (not (buffer-modified-p)))
@end lisp

@item temporary-directory
The path to an existing temporary directory, which is unique on each
execution of the syntax checker.

Use this symbol if you need to move files created by a syntax checker
out of the way.

See the declaration of the @code{elixir} syntax checker for an
application of this symbol.

@item temporary-file-name
The path to a temporary file, which is unique on each execution of the
syntax checker.  The file is @emph{not} created automatically.

Use this symbol if you need to move files created by a syntax checker
out of the way.

See the declaration of the @code{go-build} syntax checker for an
application of this symbol.

@item (config-file @var{option} @var{variable})
A configuration file for this syntax checker.

@var{option} is a string containing the option that specifies a
configuration file to the syntax checker tool.

@var{variable} is a symbol referring to a variable from which to obtain
the name or path of the configuration file.  @xref{Configuration}, for
more information about syntax checker configuration.  Define this
variable with @code{flycheck-def-config-file-var}.

If the configuration file is found, pass the @var{option} and the
absolute path to the configuration file to the syntax checker.
Otherwise the cell is simply dropped from the arguments of the syntax
checker.

If @var{option} ends with a @code{=} character, @var{option} and the
absolute path to the configuration file are concatenated and given as a
single argument to the syntax checker.  Otherwise, @var{option} and the
configuration file path are given as two separate arguments.

@item (option @var{option} @var{variable} [@var{filters}])
The value of a variable.

@var{option} is a string containing the option for with to specify the
value.  @var{filter} is an optional function to be applied to the value
of @var{variable} before use.  @xref{Option filters}, for a list of
built-in option filters.

@var{variable} is a symbol referring to a variable whose value to use.
@xref{Configuration}, for more information about syntax checker
configuration.  Define this variable with
@code{flycheck-def-option-var}.

If @var{variable} is not @code{nil} after applying @var{filter}, pass
@var{option} and the value of @var{variable} after applying
@var{filter}.  Otherwise the cell is simply dropped from the arguments
of the syntax checker.

An @var{option} ending with a @code{=} character is treated like in a
@code{config-file} cell.

@item (option-list @var{option} @var{variable} [@var{prepend-fn} [@var{filter}]])
Like @code{option}, but for lists of options.

@var{option} is a string containing the option to specify.
@var{variable} is a variable whose value must be a list.
@var{prepend-fn} is a function called with @var{option} as first and the
item of the list as second argument.  It should return the result
of prepending @var{option} to the item, either as list or as string.  If
omitted, it defaults to @code{list}, so by default, @var{option} will be
prepended as a separate argument.

@var{filter} is an optional function to be applied to each item in the
list before use.  @xref{Option filters}, for a list of built-in option
filters.

For each item in the value of @var{variable}, which is not @code{nil}
after applying @var{filter}, pass @var{option} the the item after
applying @var{filter}, as returned by @var{prepend-fn}.

Nil items are simply ignored.

@item (option-flag @var{option} @var{variable})
Like @code{option}, but for boolean flags.

@var{option} is a string containing the option to
specify. @var{variable} is a symbol referring to a variable.

If @var{variable} is non-nil, pass @var{option} to the syntax checker.
Otherwise just ignore this argument.

@item (eval @var{form})
The result of evaluating @var{form}.

@var{form} is an arbitrary Emacs Lisp form.  It is evaluated literally
@emph{each time} the syntax checker is executed.  Special forms and
symbols in @var{form} are @emph{not} replaced!

@var{form} must evaluate either to a string, a list of strings or nil.
For any other result, signal an error.

If the result of @var{form} is not nil, pass the result to the syntax
checker @emph{literally}.  Special symbols and forms in the result of
@var{form} are @emph{not} replaced.
@end table

Note these special forms and symbols do @b{not} apply recursively.
Within the body of a cell, special forms and symbols are @b{not}
replaced!

This property is @b{mandatory}.

@item :error-patterns ((@var{level} @var{sexp}) ...)
An unquoted list of one or more error patterns to parse the output of
the syntax checker @code{:command}.

@var{level} is a Flycheck error level, and denotes the severity of
errors matched by the pattern.  This mainly affects the visual
representation of matched errors in buffers.

Flycheck provides the built-in error levels @code{error} and
@code{warning}.  You can define your own error levels with
@code{flycheck-define-error-level}.

The @var{level} is followed by one or more @code{rx} @var{sexp}
elements.  See the docstring of the function @code{rx} for more
information.  In addition to the standard forms of @code{rx}, Flycheck
supports the following additional forms to make specific parts of the
error output available to Flycheck:

@table @code
@item line
Matches the line number the error refers to, as a sequence of one or
more digits.

@item column
Matches a column number the error refers to, as a sequence of one or
more digits.

@item (file-name @var{sexp} ...)
Matches the file name the error refers to.  @var{sexp} matches the name
of the file.  If no @var{sexp} is given, use a default body of
@code{(minimal-match (one-or-more not-newline))}, which is equivalent to
@code{".+?"}.

@item (message @var{sexp} ...)
Matches the error message to be shown to the user.  @var{sexp} matches
the text of the message.  If no @var{sexp} is given, use a default body
of @code{(one-or-more not-newline)}, which is equivalent to @code{".+"}.
@end table

Each of these items is optional, however error messages without a
@code{line} will be ignored and are not shown in the buffer.

The patterns are applied in the order of declaration to the whole output
of the syntax checker.  Output already matched by a pattern will not be
matched by subsequent patterns.  In other words, the first pattern wins.

@item :error-parser @var{function}
@itemx :error-parser (lambda (ouptut checker buffer) @var{body} ...)
A function to parse the output of the syntax checker, either as unquoted
function symbol or @code{lambda} form.

The function must accept three arguments @var{output}, @var{checker} and
@var{buffer}, where @var{output} is the output of the syntax checker as
string, @var{checker} the syntax checker that was used, and
@code{buffer} a buffer object representing the checker buffer.

The function must return a list of @code{flycheck-error} objects parsed
from @var{output}.  @xref{Error API}, for information about
@code{flycheck-error}.  @xref{Error parsers}, for a list of built-in
error parsers.

If this property is given, it takes precedence over
@code{:error-patterns}.  To use an error parser together with patterns,
you must manually call @code{flycheck-parse-output-with-patterns} in
your error parser to apply the error patterns.  You can then manipulate
the @code{flycheck-error} objects returned by this function.

@item :modes @var{mode}
@itemx :modes (@var{mode}...)
An unquoted major mode symbol or an unquoted list thereof.

If given, this syntax checker is only used, if the major mode of the
buffer to check is equal (as in @code{eq}) to any given @var{mode}.

@item :predicate @var{function}
@itemx :error-parser (lambda () @var{body} ...)
A function to determines whether to use this syntax checker in the
current buffer, either as unquoted function symbol or as @code{lambda}
form.  The syntax checker is only used if this function returns non-nil
when called in the buffer to check.

If @var{:modes} is given, the function is only called in matching major
modes.  That means, if both @code{:modes} and @code{:predicate} are
given, @b{both} must match for this syntax checker to be used.

@item :next-checker (@var{item} ...)
An unquoted list defining the syntax checker to run after this checker.

Flycheck tries all items in the order of declaration, and runs the first
usable one.  Subsequent items are @emph{not} used.

Each @var{item} is either a syntax checker symbol or a cons cell
@code{(@var{predicate} . @var{checker})}.

In the former case, the syntax checker is usable, if it is eligible for
automatic selection.  In the latter case, the @var{predicate} must also
match.

@var{predicate} is either @code{no-errors} or @code{warnings-only}:

@table @code
@item no-errors
The syntax @var{checker} is only considered if this syntax checker
reported no errors at all.
@item warnings-only
The syntax @var{checker} is only considered if this syntax checker only
reported warnings, but no errors.
@end table
@end table

@code{:command} is @b{mandatory}.  A syntax checker must also have at
least one of @code{:modes} and @code{:predicate}, and at least one of
@code{:error-patterns} or @code{:error-parser} are present, an error is
signaled.  If @code{:predicate} and @code{:modes} are given, both must
match for the syntax checker to be used.  @code{:next-checkers} is
entirely optional.

If any property has an invalid value, a (compile-time) error is
signaled.
@end defmac

A syntax checker define with @code{flycheck-define-checker} is already
suitable for manual checker selection with
@code{flycheck-select-checker}.  To make the syntax checker available
for automatic selection, add it to @code{flycheck-checkers}.
@xref{Selection}.

@defmac flycheck-def-config-file-var @var{symbol} @var{checker} @
  &optional @var{filename}
Define @var{symbol} as configuration file variable for a syntax
@var{checker}, with a default value of @var{filename}.

@var{symbol} is declared as customizable, buffer-local variable using
@code{defcustom}, to provide a configuration file for the given syntax
@var{checker}.  The variable has the customization type @code{string},
and gets a comprehensive docstring, including a reference to
@var{checker}.

@var{filename} is used as initial value for the variable.  If omitted,
the initial value is nil.

Use this macro together with the @code{config-file} cell in the command
of a syntax checker.
@end defmac

@defmac flycheck-def-option-var @var{symbol} @var{initial-value} @
  @var{checker} &optional @var{custom-args}
Define @var{symbol} as option variable for a syntax @var{checker}, with
the given @var{initial-value}.

@var{symbol} is declared as customizable variable, buffer-local variable
using @code{defcustom}, to provide an option for the given syntax
@var{checker}.  @var{symbol} gets a comprehensive docstring, including a
reference to @var{checker}.

@var{custom-args} are forwarded to @code{defcustom}.  Declare the
customization type here.

Use this macro together with the @code{option} cell in the command of a
syntax checker.
@end defmac

@node Error levels, Error parsers, Definition, Extending
@comment  node-name,  next,  previous,  up
@section Error levels

Flycheck provides two built-in error levels:

@table @code
@item error
Severe errors which cannot be ignored
@item warning
Potential errors which can be ignored
@item info
Informational annotations
@end table

You can define your own error levels with
@code{flycheck-define-error-level}:

@deffn flycheck-define-error-level @var{level} &rest @var{properties}
Define a new error @var{level} with @var{properties}.

The following @var{properties} constitute an error level:

@table @code
@item :overlay-category @var{category}
The overlay @var{category} for @var{level}, as symbol.

An overlay category is a symbol whose properties provide the default
values for overlays of this category.  @xref{Overlay properties, ,
,elisp}, for more information about overlay properties and categories.

A category for an error level overlay should at least define the
@code{face} property, for error highlighting.  Other useful properties
for error level categories are @code{priority} to influence the stacking
of multiple error level overlays, and @code{help-echo} to define a
default error messages for errors without messages.
@item :fringe-face @var{face}
A face to use for fringe indicators for @var{level}, as symbol.
@item :fringe-bitmap @var{bitmap}
A fringe bitmap to use for fringe indicators for @var{level}, as symbol.

@xref{Fringe Bitmaps, , ,elisp}, for a list of built-in fringe bitmaps,
and instructions on how to define new bitmaps.
@end table

@end deffn

@node Error parsers, Option filters, Error levels, Extending
@comment  node-name,  next,  previous,  up
@section Error parsers

Syntax checkers may use more sophisticated error parsing by using the
@code{:error-parser} property.  @xref{Definition}, for information about
syntax checker definition.

Flycheck provides the following error parsers for use by syntax
checkers:

@table @code
@item flycheck-parse-with-patterns
Parse output with the @code{:error-patterns} of the syntax checker.
@item flycheck-parse-checkstyle
Parse XML output similar to @uref{http://checkstyle.sourceforge.net/,
Checkstyle}.
@end table

You may also define your own error parsers.  An error parser is a
function that takes three arguments:

@table @var
@item output
The complete output of the syntax checker as string.
@item checker
A symbol denoting the executed syntax checker.
@item buffer
A buffer object referring to the buffer that was syntax-checked.
@end table

The function shall return a list of Flycheck errors.  @xref{Error API},
for more information about Flycheck errors.

Flycheck provides some utility functions to implement error parsers.
@xref{Error parser API}.

@node Option filters, Extending checkers, Error parsers, Extending
@comment  node-name,  next,  previous,  up
@section Option filters

Flycheck provides the following built-in option filters for use with the
@code{option} cell:

@table @code
@item flycheck-option-int
An integral option that handles @code{nil} correctly (unlike
@code{number-to-string}).

@item flycheck-option-comma-separated-list
An option for a comma separated list.
@end table

@node Extending checkers, Examples, Option filters, Extending
@comment  node-name,  next,  previous,  up
@section Extending syntax checkers

There are some means to extend defined syntax checkers:

@defun flycheck-add-next-checker checker next-checker &optional append
Add a @var{next-checker} to run after @var{checker}.

@var{checker} is a syntax checker symbol.  @var{next-checker} is either
a syntax checker symbol or a cons cell in the format of a single entry
to the @code{:next-checkers} property.

@var{next-checker} is prepended before other checkers to run after
@var{checker}, unless @var{append} is non-nil.
@end defun

@node Examples,  , Extending checkers, Extending
@comment  node-name,  next,  previous,  up
@section Examples of syntax checkers

@menu
* Simple example::              How to define a basic syntax checker
* Predicate example::           How to control syntax checker usage
* Configuration example::       How to configure syntax checkers
* Chaining example::            How to execute more than one syntax checker
@end menu

@node Simple example, Predicate example, Examples, Examples
@comment  node-name,  next,  previous,  up
@subsection Basic syntax checkers

As explained in the previous chapter @ref{Extending} a syntax checker is
declared with @code{flycheck-define-checker}.

We will use this function to define a syntax checker using the PHP
CodeSniffer utility for the PHP programming language:

@lisp
(flycheck-define-checker php-phpcs
  "A PHP syntax checker using PHP_CodeSniffer.

See URL `http://pear.php.net/package/PHP_CodeSniffer/'."
  :command ("phpcs" "--report=checkstyle" source)
  :error-parser flycheck-parse-checkstyle
  :modes php-mode)
@end lisp

First we specify the @code{:command} to execute.  The first element of
the command list is the name of the executable, @command{phpcs} in our
case.  This command is checked for existence with @code{executable-find}
before using this syntax checker.  If the command does not exist, the
syntax checker is @emph{not} used.

The executable is following by the arguments, in this case some options
and the symbol @code{source}.  This symbol is replaced with the file to
check.  This file is a temporary file created in the system temporary
directory and containing the contents of the buffer to check.

Next we specify how to parse the output of the syntax checker.  PHP
CodeSniffer provides an option to output errors in an XML format similar
to the Java tool Checkstyle, so we use the built-in @emph{error parser}
@code{flycheck-parse-checkstyle} to parse the output.

Eventually we enable the syntax checker in PHP editing modes.

If the syntax checker does not provide any sort of structured output
format, we have to parse the error messages from the textual output.  To
do so, we can use @emph{error patterns}, like in the Pylint syntax
checker for the Python programming language:

@lisp
(flycheck-define-checker python-pylint
  "A Python syntax and style checker using Pylint.

See URL `http://pypi.python.org/pypi/pylint'."
  :command ("epylint" source-inplace)
  :error-patterns
  ((warning line-start (file-name) ":" line
            ": Warning (W" (zero-or-more not-newline) "): "
            (message) line-end)
   (error line-start (file-name) ":" line
          ": Error (E" (zero-or-more not-newline) "): "
          (message) line-end)
   (error line-start (file-name) ":" line ": [F] " (message) line-end))
  :modes python-mode)
@end lisp

Again, there is a @code{:command}, however we use the
@code{source-inplace} symbol this time.  This symbol causes the
temporary file to be created in the same directory as the original file,
making information from the source code tree available to the syntax
checker.  In case of Pylint, these are the Python packages from the
source code tree.

Next we give the list of @code{:error-patterns} to parse errors.  These
patterns extract the error location and the error message from the
output of @command{epylint}.  An error pattern is a list containing a
regular expression with match groups to extract the error information,
and an error level.

Eventually we enable the syntax checker in @code{python-mode}.

@node Predicate example, Configuration example, Simple example, Examples
@comment  node-name,  next,  previous,  up
@subsection Syntax checkers with predicates

In the previous examples the syntax checkers were specific to certain
major modes.  However, this is not always the case.  For instance, GNU
Emacs provides a single mode only for shell scripting in various Shell
languages.  A syntax checker for a specific shell must check whether the
edited shell script is written for the right shell:

@lisp
(flycheck-define-checker zsh
  "A Zsh syntax checker using the Zsh shell.

See URL `http://www.zsh.org/'."
  :command ("zsh" "-n" "-d" "-f" source)
  :error-patterns
  ((error line-start (file-name) ":" line ": " (message) line-end))
  :modes sh-mode
  :predicate (lambda () (eq sh-shell 'zsh)))
@end lisp

This syntax checker for the Zsh shell is enabled in @code{sh-mode} as
specified by @code{:modes}, however it specifies an additional
@code{:predicate} to determine whether the right shell is in use.  Hence
this syntax checker is only used if a Zsh shell scripting is being
edited in @code{sh-mode}, but not if a Bash or POSIX Shell script is
being edited.

A syntax checker may even go as far as not having @code{:modes} at all.
For instance, there is no special JSON mode, but syntax checking JSON is
still desirable.  Hence a JSON syntax checker may use the
@code{:predicate} to check the file extension:

@lisp
(flycheck-define-checker json-jsonlint
  "A JSON syntax and style checker using jsonlint.

See URL `https://github.com/zaach/jsonlint'."
  :command ("jsonlint" "-c" "-q" source)
  :error-patterns
  ((error line-start
          (file-name)
          ": line " line
          ", col " column ", "
          (message) line-end))
  :predicate
  (lambda ()
    (or
     (eq major-mode 'json-mode)
     (and buffer-file-name
          (string= "json" (file-name-extension buffer-file-name))))))
@end lisp

This syntax checker is now used whenever a file ends with @code{.json},
regardless of the major mode.

@node Configuration example, Chaining example, Predicate example, Examples
@comment  node-name,  next,  previous,  up
@subsection Configuration files for syntax checkers

Some syntax checkers can be configured using configuration files given
by an option.  Flycheck provides built-in support to handle such
configuration files:

@lisp
(flycheck-def-config-file-var flycheck-jshintrc javascript-jshint ".jshintrc")

(flycheck-define-checker javascript-jshint
  "A JavaScript syntax and style checker using jshint.

See URL `http://www.jshint.com'."
  :command ("jshint" "--checkstyle-reporter"
            (config-file "--config" flycheck-jshintrc) source)
  :error-parser flycheck-parse-checkstyle
  :modes (js-mode js2-mode js3-mode))
@end lisp

As you can see, we define a syntax checker for Javascript, using the
@command{jshint} utility.  This utility accepts a configuration file via
the @option{--config} option.

To use a configuration file with jshint, we first declare the variable
@code{flycheck-jshintrc} that provides the name of the file, as
oexplained in @ref{Configuration}.

In the @code{:command} we use a @code{config-file} element to pass the
configuration file to the syntax checker.  If the configuration file is
found, its path will be passed to the syntax checker, using the option
specified after the @code{config-file} symbol.  Otherwise the whole
element is simply omitted from the command line.

Some Syntax checkers can also be configured using options passed on the
command line.  Flycheck supports this case, too.  We will use this
facility to extend the PHP CodeSniffer syntax checker from the
@ref{Simple example} with support for coding standards:

@lisp
(flycheck-def-option-var flycheck-phpcs-standard nil phpcs
  "The coding standard for PHP CodeSniffer."
  :type '(choice (const :tag "Default standard" nil)
                 (string :tag "Standard name" nil)))
(put 'flycheck-phpcs-standard 'safe-local-variable #'stringp)

(flycheck-declare-checker php-phpcs
  "A PHP syntax checker using PHP_CodeSniffer."
  :command '("phpcs" "--report=checkstyle"
             (option "--standard=" flycheck-phpcs-standard)
             source)
  :error-parser 'flycheck-parse-checkstyle
  :modes 'php-mode)
@end lisp

The syntax checker is pretty much the same as before, except that a new
element was added to @code{:command}.  This element passes the value of
the new option variable @code{flycheck-phpcs-standard} to the syntax
checker.  This variable is declared with the special macro
@code{flycheck-def-option-var} at the beginning.


@node Chaining example,  , Configuration example, Examples
@comment  node-name,  next,  previous,  up
@subsection Chaining syntax checkers

For many languages, more than a single syntax checker is applicable.
For instance, Emacs Lisp can be checked for syntactic corrections with
the byte code compiler, and for adherence to the Emacs Lisp
documentation style using Checkdoc.  PHP, too, can be syntax checked
with the PHP parser, and verified against coding styles using PHP
CodeSniffer.

To support such cases, syntax checkers can be @dfn{chained} using the
@code{:next-checkers}.  The standard PHP syntax checker uses this to
run PHP CodeSniffer if there are no syntax errors:

@lisp
(flycheck-define-checker php
  "A PHP syntax checker using the PHP command line interpreter.

See URL `http://php.net/manual/en/features.commandline.php'."
  :command ("php" "-l" "-d" "error_reporting=E_ALL" "-d" "display_errors=1"
            "-d" "log_errors=0" source)
  :error-patterns
  ((error line-start (or "Parse" "Fatal" "syntax") " error" (any ":" ",") " "
          (message) " in " (file-name) " on line " line line-end))
  :modes (php-mode php+-mode)
  :next-checkers ((warnings-only . php-phpcs)))
@end lisp

Now PHP CodeSniffer will check the coding style, whenever a PHP syntax
check did not result in any errors, if PHP CodeSniffer syntax checker is
usable @emph{and} registered.

@node API, Contribution, Extending, Top
@comment  node-name,  next,  previous,  up
@chapter Flycheck API

This chapter provides a brief overview over the Flycheck API.

You may use this API to extend Flycheck, e.g. by implementing new error
parsers or more in-depth error analysis.  You will also find this API
helpful if you want to develop Flycheck itself.

As said this chapter merely provides an overview over the Flycheck API.
The documentation is therefore rather brief.  For a definite reference
on a function or variable, consult its docstring via
@code{describe-function} and @code{describe-variable} respectively.

@menu
* Error API::                   How to create and inspect Flycheck errors
* Error parser API::            Utilities for implementing error parsers
@end menu

@node Error API, Error parser API, API, API
@comment  node-name,  next,  previous,  up
@section Error API

Flycheck errors are represented by the CL structure @code{flycheck-error}.
@xref{Structures, , , cl}, for information about CL structures.

@deftp {Structure} flycheck-error @
  buffer checker filename line column message level

A Flycheck error with the following attributes, each of which may be
@code{nil}:

@table @code
@item buffer
The buffer object referring to the buffer this error belongs to.

Note that you do not need to set this attribute when creating errors in
an error parser.  Flycheck automatically keeps track of the buffer
itself.

@item checker
The syntax checker that reported this error.

@item filename
A string containing the filename the error refers to.

@item line
An integer providing the line the error refers to.

@item column
An integer providing the column the error refers to.

If this attribute is nil, Flycheck will assume the error to refer to the
whole line.

@item message
The human-readable error message as string.

@item level
The error level of the message, as symbol denoting an error level
defined with @code{flycheck-define-error-level}.
@end table

There are two constructors you may use to create errors:

@defun flycheck-error-new attributes
Create a new Flycheck error with the given @var{attributes}.

@var{attributes} are given as keyword arguments, for instance:

@lisp
(flycheck-error-new :line 10 :column 5 :message "Foo" :level 'warning)
@end lisp

@end defun

@defun flycheck-error-new-at line column &optional level message @
  &key checker filename buffer
Create a new Flycheck error at the given position.

@var{line} and @var{column} are the line and column of the new error
respectively.  The optional arguments @var{level} and @var{message} are
the level and the message respectively.

The @var{checker}, @var{filename} and @var{buffer} attributes may be
initialized as keyword arguments only.  Note that these keywords
arguments may only be used @b{together} with the optional arguments,
that is @var{level} and @var{message} must be specified explicitly to
use the keyword arguments.

If omitted, @var{buffer} defaults to the current buffer.
@end defun

@end deftp

The following functions are provided to work with errors:

@defun flycheck-error-with-buffer err &optional forms
Evaluate @var{forms} with the current buffer set to the buffer of
@var{err}.  If this buffer is not live, @var{forms} are not evaluated.
@end defun

@defun flycheck-error-line-region err
Get the error line region as @code{(@var{beg} . @var{end})}.
@end defun

@defun flycheck-error-column-region err
Get the error column region.

If @var{err} has no column, return @code{nil}.  Otherwise return the
region around the error column as cons cell @code{(@var{beg}
. @var{end})}.
@end defun

@defun flycheck-error-sexp-region err
Get the error expression region.

If @var{err} has an error column, return the region of the expression at
this column as cons cell @code{(@var{beg} . @var{end})}.  If @var{err}
has no error column, or if there is no expression at this column, return
@code{nil}
@end defun

@defun flycheck-error-pos err
Get the exact buffer position referred to by @var{err}.

This is the position that error navigation would jump to when navigating
to this error.
@end defun

@defun flycheck-error-format error
Format the @var{error} as a human-readable string.
@end defun

The following functions and variables may be used to analyze the errors
of a syntax check.

@defvar flycheck-current-errors
This buffer-local variable stores the errors of the last syntax check,
sorted by line and column number.
@end defvar

@defun flycheck-count-errors errors
Count the number of errors and warnings in @var{errors}.

Return a cons cell @code{(@var{no-errors} . @var{no-warnings})}.
@end defun

@defun flycheck-has-errors-p errors &optional level
Determine if there are any @var{errors} with the given @var{level}.

If @var{level} is omitted, determine whether @var{errors} is not nil.
Otherwise determine whether there are any errors whose level is equal to
the given @var{level}.
@end defun

@node Error parser API,  , Error API, API
@comment  node-name,  next,  previous,  up
@section Error parser API

@defun flycheck-parse-xml-string xml
Parse an @var{xml} string and return the parsed document tree.
@end defun

@node Contribution, Changes, API, Top
@comment  node-name,  next,  previous,  up
@chapter Contribution

Flycheck needs your help, in all aspects.  Please

@itemize @bullet
@item
report all bugs and issues you can find,
@item
tell us your ideas for improvements or new features,
@item
and send us your patches and pull requests!
@end itemize

This chapter helps you in doing so, by giving you guidelines for
contribution.

@menu
* Reporting issues::            How to report issues with Flycheck
* Contributing syntax checkers::  How to contribute your syntax checkers
* Contributing code::           How to contribute code
@end menu

@node Reporting issues, Contributing syntax checkers, Contribution, Contribution
@comment  node-name,  next,  previous,  up
@section Reporting issues

Please report any issues to the
@uref{https://github.com/flycheck/flycheck/issues,Flycheck issue
tracker}.

When doing so, please respect the following guidelines:

@itemize @bullet
@item
Check that the issue has not already been reported.
@item
Check that the issue has not already been fixed in the latest code.
@item
Be clear and precise.  If possible, name functions and command exactly.
@item
Open an issue with a clear title and description in grammatically
correct, complete sentences.  Include the version of Flycheck as shown
by @kbd{M-x flycheck-version}.
@end itemize

We will try to handle each issue appropriately, and adhering to these
guidelines helps us in doing so.


@node Contributing syntax checkers, Contributing code, Reporting issues, Contribution
@comment  node-name,  next,  previous,  up
@section Contributing syntax checkers

When creating a new syntax checker, either create an issue (see
@ref{Reporting issues}) and paste your syntax checker declaration, or
fork the repository, implement the syntax checker in Flycheck itself and
send us a pull request (see @ref{Contributing code}).

Whatever way you choose, please respect the following guidelines:

@itemize @bullet
@item
Provide a link to the website of the syntax checker tool.
@item
Show some example source code that triggered warnings or errors with the
syntax checker tool.
@item
If possible, please add unit tests for your new syntax checker.
@end itemize

@node Contributing code,  , Contributing syntax checkers, Contribution
@comment  node-name,  next,  previous,  up
@section Contributing code

Please contribute patches to Flycheck as pull requests on Github.

When doing so, please respect the following guidelines:

@itemize @bullet
@item
Read how to
@uref{http://gun.io/blog/how-to-github-fork-branch-and-pull-request,
properly contribute to open source projects on Github}.
@item
Use a topic branch to easily amend a pull request later, if necessary.
@item
Write
@uref{http://gun.io/blog/how-to-github-fork-branch-and-pull-request,
good commit messages}.
@item
Use the same coding style and spacing.
@item
Verify your Emacs Lisp code with @code{checkdoc} (@kbd{C-c ? d}).
@item
Add unit tests for your code, if possible.
@item
Open a @uref{https://help.github.com/articles/using-pull-requests,pull
request} that relates to but one subject with a clear title and
description in grammatically correct, complete sentences.  Be sure to
give use cases and rationale for your new feature.
@end itemize

We will try to respect and include each contribution, however we will
not do the following:

@itemize @bullet
@item
Include a feature without good use cases and rationale.
@item
Merge poorly written or incomplete code.
@end itemize

@noindent
You will be asked to improve your pull request in these cases.

@node Changes, Credits, Contribution, Top
@comment  node-name,  next,  previous,  up
@appendix Changes

This appendix provides a comprehensive changelog of all releases:

@menu
* master        :: unreleased
* 0.16          :: Jan 11, 2014
* 0.15          :: Nov 15, 2013
* 0.14.1        :: Aug 15, 2013
* 0.14          :: Aug 15, 2013
* 0.13          :: Jun 28, 2013
* 0.12          :: May 18, 2013
* 0.11          :: May 01, 2013
* 0.10          :: Apr 21, 2013
* 0.9           :: Apr 13, 2013
* 0.8           :: Apr 09, 2013
* 0.7.1         :: Feb 23, 2013
* 0.7           :: Feb 14, 2013
* 0.6.1         :: Jan 30, 2013
* 0.6           :: Jan 29, 2013
* 0.5           :: Dec 28, 2012
* 0.4           :: Nov 21, 2012
* 0.3           :: Oct 20, 2012
* 0.2           :: Oct 15, 2012
* 0.1           :: Oct 11, 2012
@end menu

@macro ghissue{number, text}
@gh{flycheck/flycheck/issues/\number\, \text\}
@end macro

@node 0.1, 0.2, Changes, Changes
@comment  node-name,  next,  previous,  up
@unnumberedsec 0.1 (Oct 11, 2012)

Initial release as flymake-checkers

@itemize @bullet
@item
New syntax checkers

@itemize @bullet
@item
TeX/LaTeX
@item
Shell scripts
@item
Python
@item
Ruby
@item
Coffeescript
@item
Emacs Lisp
@end itemize

@end itemize


@node 0.2, 0.3, 0.1, Changes
@comment  node-name,  next,  previous,  up
@unnumberedsec 0.2 (Oct 15, 2012)

@itemize @bullet
@item
New syntax checkers

@itemize @bullet
@item
PHP
@end itemize

@item
API changes

@itemize @bullet
@item
@ghissue{2, Simplify syntax checker declarations}
@end itemize

@end itemize

@node 0.3, 0.4, 0.2, Changes
@comment  node-name,  next,  previous,  up
@unnumberedsec 0.3 (Oct 20, 2012)

@itemize @bullet
@item
@ghissue{4, Replace @code{flymake-mode} with a custom syntax checking
minor mode}
@end itemize

@node 0.4, 0.5, 0.3, Changes
@comment  node-name,  next,  previous,  up
@unnumberedsec 0.4 (Nov 21, 2012)

@itemize @bullet
@item
@ghissue{5, Rename the project to Flycheck}
@item
New syntax checkers

@itemize @bullet
@item
@ghissue{9, HAML}
@item
@ghissue{9, CSS}
@item
@ghissue{9, Javascript with @command{jsl}}
@item
@ghissue{16, Javascript with @command{jshint}}
@item
@ghissue{12, JSON}
@item
LaTeX with @command{lacheck}
@end itemize

@item
Bug fixes:

@itemize @bullet
@item
@ghissue{10, Fix type error when checking compressed Emacs Lisp}
@end itemize

@end itemize

@node 0.5, 0.6, 0.4, Changes
@comment  node-name,  next,  previous,  up
@unnumberedsec 0.5 (Dec 28, 2012)

@itemize @bullet
@item
New syntax checkers:

@itemize @bullet
@item
@ghissue{15, SASS}
@item
@ghissue{21, Perl}
@item
XML
@item
@ghissue{30, Lua}
@end itemize

@item
New features:

@itemize @bullet
@item
@ghissue{25, Support manual buffer-local selection of syntax checker}
@item
@ghissue{28, Add customizable error indicators}
@item
@ghissue{27, Echo error messages at point without 3rd-party libraries
like flymake-cursor}
@end itemize

@item
Improvements:

@itemize @bullet
@item
@ghissue{24, Remember the last automatically selected syntax checker}
@end itemize

@item
Bug fixes:

@itemize @bullet
@item
@ghissue{19, Fix syntax checking of buffers without backing files}
@end itemize

@item
API changes:

@itemize @bullet
@item
@ghissue{15, Replace underlying Flymake API with a custom syntax
checking implementation}
@end itemize

@end itemize

@node 0.6, 0.6.1, 0.5, Changes
@comment  node-name,  next,  previous,  up
@unnumberedsec 0.6 (Jan 29, 2013)

@itemize @bullet
@item
New syntax checkers:

@itemize @bullet
@item
@ghissue{53, Emacs Lisp with @code{checkdoc-current-buffer}}
@item
@ghissue{72, PHP with PHP CodeSniffer}
@end itemize

@item
Removed syntax checkers:

@itemize @bullet
@item
Javascript with @command{jsl}
@end itemize

@item
New features:

@itemize @bullet
@item
@ghissue{26, Error navigation with @code{next-error} and
@code{previous-error}}
@item
@ghissue{33, Fringe icons instead of error indicators}
@item
@ghissue{59, Menu entry for Flycheck}
@item
@ghissue{35, Customizable error highlighting@comma{} taking the column
number into account}
@item
Configuration files for syntax checkers
@item
Add configuration file support to the syntax checkers
@code{coffee-coffeelint}, @code{html-tidy}, @code{javascript-jshint},
@code{pyton-flake8} and @code{tex-chktex}
@item
@ghissue{58, Allow to compile a buffer with a syntax checker for testing
purposes}
@item
@ghissue{31, Use multiple syntax checkers during a syntax check}
@item
@ghissue{52, Add dedicated help for syntax checkers}
@end itemize

@item
Improvements:

@itemize @bullet
@item
@ghissue{55, Match error patterns in order of declaration}
@end itemize

@item
Bug fixes:

@itemize @bullet
@item
@ghissue{24, Inherit highlighting faces from built-in faces}
@item
@ghissue{36, Correct error patterns of the HTML syntax checker}
@item
@ghissue{42, Detect syntax errors in the @code{python-flake8} syntax
checker}
@item
Fix various regressions after introducing unit tests
@item
@ghissue{45, Inhibit syntax checking during package installation}
@item
@ghissue{54, Disable syntax checking in Tramp buffers}
@item
@ghissue{65, Preserve whitespace in error messages}
@end itemize

@item
API changes:

@itemize @bullet
@item
@ghissue{41, Replace syntax checker variables with syntax checker
declarations}
@item
@ghissue{38, Support parsing errors with arbitrary functions instead of
error patterns}
@item
@ghissue{38, Add an error parser for Checkstyle-like XML output}
@end itemize

@end itemize

@node 0.6.1, 0.7, 0.6, Changes
@comment  node-name,  next,  previous,  up
@unnumberedsec 0.6.1 (Jan 30, 2013)

@itemize @bullet
@item
Fix package dependencies
@end itemize

@node 0.7, 0.7.1, 0.6.1, Changes
@comment  node-name,  next,  previous,  up
@unnumberedsec 0.7 (Feb 14, 2013)

@itemize @bullet
@item
New features:

@itemize @bullet
@item
Navigate to source of syntax checker declarations from syntax checker
help
@item
@ghissue{60, Add online Info manual}
@end itemize

@item
Improvements:

@itemize @bullet
@item
Use pipes instead of TTYs to read output from syntax checkers
@item
@ghissue{80, Defer syntax checks for invisible buffers}
@item
@ghissue{62, Immediately display error messages after error navigation}
@end itemize

@item
Bug fixes:

@itemize @bullet
@item
Never select deleted buffers
@item
Do not let the debugger interfere with necessary cleanup actions
@item
@ghissue{78, Do not attempt to parse empty XML trees}
@item
@ghissue{81, Fix infinite recursion on Windows}
@end itemize

@end itemize

@node 0.7.1, 0.8, 0.7, Changes
@comment  node-name,  next,  previous,  up
@unnumberedsec 0.7.1 (Feb 23, 2013)

@itemize @bullet
@item
Bug fixes:

@itemize @bullet
@item
@ghissue{87, Do not signal errors from @code{flycheck-mode}}
@item
Correctly fall back to @env{HOME} when searching configuration files
@item
Correctly ascend to parent directory when searching configuration files
@end itemize

@item
API changes:

@itemize @bullet
@item
Rename @code{config} cell to @code{config-file}
@item
Allow to pass the result of @code{config-file} cells as single argument
@item
@ghissue{86, Add support for evaluating Lisp forms in syntax checker
commands}
@end itemize

@end itemize

@node 0.8, 0.9, 0.7.1, Changes
@comment  node-name,  next,  previous,  up
@unnumberedsec 0.8 (Apr 9, 2013)

@itemize @bullet
@item
New syntax checkers:

@itemize @bullet
@item
@ghissue{91, Go using @command{gofmt}}
@item
@ghissue{101, Rust using @command{rustc}}
@end itemize

@item
New features:

@itemize @bullet
@item
@ghissue{29, Add a global Flycheck mode}.  @code{(global-flycheck-mode)}
is now the recommended way to enable Flycheck
@item
@ghissue{72, Add support for syntax checker options}
@item
Add option for the coding standard used by the @code{php-phpcs} syntax
checker
@item
Add options for the maximum McCabe complexity and the maximum line
length to @code{python-flake8}
@end itemize

@item
Improvements:

@itemize @bullet
@item
Support McCabe warnings in @code{python-flake8}
@item
Support warnings from @command{flake8} 2
@item
@ghissue{94, Show long error messages in a popup buffer}
@item
@ghissue{96, Show all error messages at point}
@item
@ghissue{98, Add support for naming warings from @command{flake8} 2}
@item
Flycheck mode is not longer enabled for buffers whose names start with a
space
@item
@ghissue{100, Improve highlighting to reduce screen flickering}
@end itemize

@end itemize

@node 0.9, 0.10, 0.8, Changes
@comment  node-name,  next,  previous,  up
@unnumberedsec 0.9 (Apr 13, 2013)

@itemize @bullet
@item
New syntax checkers:

@itemize @bullet
@item
@ghissue{103, SCSS using @command{scss}}
@item
RST (ReStructuredText) using Docutils
@item
@ghissue{107, Go using @command{go build} and @command{go test}}
@end itemize

@item
Improvements:

@itemize @bullet
@item
Quit the error message window when navigating away from error locations
@end itemize

@end itemize

@node 0.10, 0.11, 0.9, Changes
@comment  node-name,  next,  previous,  up
@unnumberedsec 0.10 (Apr 21, 2013)

@itemize @bullet
@item
Flycheck uses @ref{Top, , cl-lib, cl} now.  This library is built-in as
of GNU Emacs 24.3.  For earlier releases of GNU Emacs 24 an additional
compatibility library will be installed from GNU ELPA.

@item
New syntax checkers:

@itemize @bullet
@item
@ghissue{112, POSIX Shell script using @command{bash}}
@item
@ghissue{113, Ruby using @command{rubocop}}
@item
@ghissue{108, Elixir}
@item
@ghissue{122, Erlang}
@end itemize

@item
Removed syntax checkers:

@itemize @bullet
@item
@ghissue{115, Python using Pyflakes}.  Use the superior Flake8 syntax
checker
@end itemize

@item
New features:

@itemize @bullet
@item
Add @code{flycheck-copy-messages-as-kill}, mapped to @kbd{C-c ! C-w}, to
copy all error messages under point into kill ring
@item
Add @code{flycheck-google-messages}, mapped to @kbd{C-c ! /}, to google
for error messages under point.  Needs the
@uref{https://github.com/Bruce-Connor/emacs-google-this, Google This}
library
@item
Syntax checkers can redirect output to a temporary directory now using
the @code{temporary-directory} argument symbol
@end itemize

@item
Improvements:

@itemize @bullet
@item
Call option filters for @code{nil} values, too
@item
@ghissue{112, Improve error parsing in Bash syntax checker}
@item
Error navigation does not cross restrictions in narrowed buffers anymore
@item
@ghissue{99, Try to preserve the non-directory part of the buffer's file
name when substituting the @code{source} symbol}
@end itemize

@item
Bug fixes:

@itemize @bullet
@item
Fix error highlighting and navigation in narrowed buffers
@item
@ghissue{118, Use a hopefully more reliable way to parse output of PHP
CodeSniffer}
@end itemize

@end itemize

@node 0.11, 0.12, 0.10, Changes
@comment  node-name,  next,  previous,  up
@unnumberedsec 0.11 (May 01, 2013)

@itemize @bullet
@item
New syntax checkers:

@itemize @bullet
@item
@ghissue{124, Scala}
@end itemize

@item
New features:

@itemize @bullet
@item
Customizable error indication with control of the fringe side, via
@code{flycheck-indication-mode}
@item
@ghissue{128, Customizable automatic syntax checking@comma{} via
@code{flycheck-check-syntax-automatically}}
@item
@ghissue{133, Customizable configuration file search@comma{} via
@code{flycheck-locate-config-file-functions}}
@item
Find configuration files in @uref{https://github.com/bbatsov/projectile,
Projectile} projects
@item
Add @code{flycheck-before-syntax-check-hook} and
@code{flycheck-syntax-check-failed-hook}
@end itemize

@item
Improvements:

@itemize @bullet
@item
@ghissue{123, The @code{ruby} syntax checker now differentiates warnings
from errors}
@item
Faces are now in a separate customization group
@end itemize

@item
Bug fixes:

@itemize @bullet
@item
Add missing customization group for syntax checker options
@end itemize

@end itemize

@node 0.12, 0.13, 0.11, Changes
@comment  node-name,  next,  previous,  up
@unnumberedsec 0.12 (May 18, 2013)

@itemize @bullet
@item
New syntax checkers:

@itemize @bullet
@item
@ghissue{136, Ruby using @command{jruby}}
@item
@ghissue{138, Puppet}
@end itemize

@item
New features:

@itemize @bullet
@item
Highlight error expressions by default, with the new @code{sexps}
highlighting mode
@item
@ghissue{140, Automatically check syntax some time after the last change
in the buffer}
@item
Add @code{flycheck-version} to determine the installed Flycheck version
@item
Add @code{flycheck-list-errors}, mapped to @kbd{C-c ! l}, to list all
errors in a separate buffer
@end itemize

@item
Improvements:

@itemize @bullet
@item
Defer syntax checks while a buffer is reverted, to avoid race conditions
@end itemize

@item
Bug fixes:

@itemize @bullet
@item
@ghissue{136, Correctly parse syntax errors from JRuby}
@end itemize

@end itemize

@node 0.13, 0.14, 0.12, Changes
@comment  node-name,  next,  previous,  up
@unnumberedsec 0.13 (Jun 28, 2013)

@itemize @bullet
@item
@b{Breaking changes}:

@itemize @bullet
@item
Obsolete @code{flycheck-warning-face} and @code{flycheck-error-face} in
favor @code{flycheck-warning} and @code{flycheck-error} respectively
@item
Obsolete @code{:predicate} forms in favor of @code{:predicate} functions
@item
@code{flycheck-def-config-file-var} does not automatically mark
variables as safe anymore
@end itemize

@item
New features:

@itemize @bullet
@item
Make fringe indicator faces customizable independently with
@code{flycheck-fringe-error} and @code{flycheck-fringe-warning}
@item
Improve the default faces by using underlines instead of foreground
colors, if possible
@item
@ghissue{141, Customizable error processing with
@code{flycheck-process-error-functions}}
@item
@ghissue{144, Make the delay before starting a syntax check customizable
via @code{flycheck-idle-change-delay}}
@item
@ghissue{156, Make display of errors under point customizable via
@code{flycheck-display-errors-function}}
@end itemize

@item
Improvements

@itemize @bullet
@item
Always highlight errors on top of warnings now
@item
@ghissue{141, Do not trigger syntax checks in the middle of commands}
@item
Add the current directory to load path in the @code{emacs-lisp} syntax
checker
@item
Do not longer use the @code{emacs-lisp-checkdoc} syntax checker in
Scratch buffers
@item
@ghissue{149, Do not flush temporary files onto disk}
@item
Syntax checkers may have error patterns and error parser now
@item
Predicate forms are now wrapped into functions and compiled into
functions during byte compilation
@item
Copy each message separately in @code{flycheck-copy-messages-as-kill}
@item
Mark some customizable variables as safe for file variable usage, most
notably @code{flycheck-indication-mode},
@code{flycheck-highlighting-mode} and @code{flycheck-idle-change-delay}.
@end itemize

@item
Bug fixes:

@itemize @bullet
@item
Fix error when searching for a configuration file outside a Projectile
project
@item
Do not start a syntax check before the @code{flycheck-mode-hook} was run
@item
Do not start automatic syntax checks if Flycheck Mode is disabled
@item
@ghissue{143, Defer the initial syntax check until after the current
interactive command}
@item
Correctly clean up information about running processes
@item
@ghissue{150, Fix compatibility with Emacs 24.2 and earlier}
@item
Fix version information on Emacs trunk builds
@end itemize

@end itemize
@node 0.14, 0.14.1, 0.13, Changes
@comment  node-name,  next,  previous,  up
@unnumberedsec 0.14 (Aug 15, 2013)

@itemize @bullet
@item
@b{Breaking changes}:

@itemize @bullet
@item
@ghissue{163, Introduce @code{flycheck-define-checker} and obsolete
@code{flycheck-declare-checker}}
@item
Remove the obsolete @code{flycheck-error-face} and
@code{flycheck-warning-face}
@item
@ghissue{176, Do not initialize packages by default in @code{emacs-lisp}
syntax checker for non-configuration files}
@item
@ghissue{179, Change the default @code{flycheck-highlighting-mode} to
@code{symbols}}
@item
@ghissue{184, Drop support for Pylint 0.x in @command{python-pylint}}
@end itemize

@item
New features:

@itemize @bullet
@item
@ghissue{166, List errors at point only with prefix arg to
@code{flycheck-list-errors}}
@item
@ghissue{166, Add new display function
@code{flycheck-display-errors-in-list} to display errors at point in the
error list}
@item
New @code{option-list} argument cell to pass option lists to a syntax
checker
@item
@ghissue{174, New @code{flycheck-emacs-lisp-load-path} option to
customize the @code{load-path} used by the @code{emacs-lisp} syntax
checker}
@item
@ghissue{176, New @code{flycheck-emacs-lisp-initialize-packages} option
to initialize packages in the @code{emacs-lisp} syntax checker}
@item
@ghissue{176, New @code{flycheck-emacs-lisp-package-user-dir} option to
configure the package directory for the @code{emacs-lisp} syntax
checker}
@item
New option filter @code{flycheck-option-comma-separated-list} for
options with comma separated lists as values
@item
@ghissue{179, New highlighting mode @code{symbols} to highlight the
symbol pointed to by an error}
@end itemize

@item
New syntax checkers:

@itemize @bullet
@item
@ghissue{160, LESS}
@item
@ghissue{162, Haskell with @command{ghc}@comma{} @command{hdevtools}
and @command{hlint}}
@item
@ghissue{170, C/C++ with @command{cppcheck}}
@item
@ghissue{172, C/C++ with @command{clang}}
@item
CoffeeScript with @command{coffee}
@item
@ghissue{180, XML with @command{xmllint}}
@item
@ghissue{167, D with @command{dmd}}
@end itemize

@item
Improvements:

@itemize @bullet
@item
@ghissue{157, Support Web Mode in @code{html-tidy} syntax checker}
@item
@ghissue{159, Support Rubocop 0.9 and drop support for older Rubocop
releases}
@item
Include the message ID in error messages from @command{python-pylint}
@end itemize

@item
Bug fixes:

@itemize @bullet
@item
Fix warnings about flawed definitions in @code{emacs-lisp} and
@code{emacs-lisp-checkdoc}, caused by faulty formatting of sexps
@item
@ghissue{166, Refresh error lists when pressing @kbd{g}}
@item
@ghissue{175, Do not obscure active minibuffer input when displaying
errors in the echo area}
@item
Fix universal prefix argument for @code{flycheck-next-error} at
@code{C-c ! n}
@item
@ghissue{192, Correctly parse output of @command{coffeelint} 0.5.7}
@item
@ghissue{184, Correctly parse output of @command{pylint} 1.0}
@end itemize

@end itemize

@node 0.14.1, 0.15, 0.14, Changes
@comment  node-name,  next,  previous,  up
@unnumberedsec 0.14.1 (Aug 16, 2013)

@itemize @bullet
@item
Bug fixes:

@itemize @bullet
@item
@ghissue{194, Add a missing dependency}
@end itemize

@end itemize

@node 0.15, 0.16, 0.14.1, Changes
@comment  node-name,  next,  previous,  up
@unnumberedsec 0.15 (Nov 15, 2013)

@itemize @bullet
@item
Flycheck has a new home at @uref{https://github.com/flycheck/flycheck},
the online manual moved to @uref{http://flycheck.github.io}.

@item
@b{Breaking changes}:

@itemize @bullet
@item
Do not add the current directory to the @code{emacs-lisp} syntax checker
load path
@item
@ghissue{214, @code{flycheck-list-errors} cannot list errors at point
anymore}.  It does not accept a prefix argument anymore, and takes zero
arguments now
@item
@ghissue{214, @code{flycheck-display-errors-in-list} is gone}.  The
error list automatically highlights the error at point now
@item
Remove obsolete @code{flycheck-declare-checker}
@end itemize

@item
New syntax checkers:

@itemize @bullet
@item
@ghissue{236, YAML}
@item
@ghissue{245, Javascript with @command{gjslint}}
@item
@ghissue{246, Slim}
@item
@ghissue{249, PHP using @command{phpmd}}
@end itemize

@item
New features:

@itemize @bullet
@item
Support IDO or @uref{https://github.com/d11wtq/grizzl, Grizzl} as
completion systems for @code{flycheck-select-checker} at @kbd{C-c ! s}
@item
@ghissue{202, Disable standard error navigation with
@code{flycheck-standard-error-navigation}}
@item
@ghissue{207, Add @code{flycheck-clang-language-standard} to choose the
language standard for C/C++ syntax checking}
@item
@ghissue{207, Add @code{flycheck-clang-definitions} to set additional
definitions for C/C++ syntax checking}
@item
@ghissue{207, Add @code{flycheck-clang-no-rtti} to disable RTTI for
C/C++ syntax checking}
@item
Add new option cell @code{option-flag} for boolean flags in syntax
checker commands
@item
@ghissue{207, Add @code{flycheck-clang-includes} to include additional
files for C/C++ syntax checking}
@item
Add configuration file variable @code{flycheck-pylintrc} for Pylint
@item
@ghissue{214, New faces @code{flycheck-error-list-highlight-at-point}
and @code{flycheck-error-list-highlight} to highlight the errors at
point and at the current line respectively in the error list}
@item
@ghissue{214, The error list now automatically updates to show the
errors of the current buffer}
@item
@ghissue{212, Define new error levels with
@code{flycheck-define-error-level}}
@item
@ghissue{234, Add @code{flycheck-clang-standard-library} to choose the
standard library for C/C++ syntax checking}
@item
@ghissue{243, Customize the delay for displaying errors via
@code{flycheck-display-errors-delay}}
@item
@ghissue{215, Add @code{info} level for informational annotations by
syntax checkers}
@item
@ghissue{259, Add a new symbol @code{temporary-file-name} to pass
temporary file names to syntax checkers}
@end itemize

@item
Improvements:

@itemize @bullet
@item
@ghissue{214, The error list now refreshes automatically after each
syntax check}
@item
@ghissue{214, The errors at point are now automatically highlighted in
the error list}
@item
@code{emacs-lisp-checkdoc} does not longer check @file{.dir-locals.el}
files
@item
@ghissue{222, Do not automatically check syntax in encrypted files}
@item
@ghissue{215, Parse notes from @code{c/c++-clang} into info level
messages}
@item
@ghissue{204, Parse convention warnings from @command{pylint}} to
@ghissue{215, info level}
@item
@ghissue{215, Demote naming warnings from @code{python-flake8} to info
level}
@item
@ghissue{256, Support @code{enh-ruby-mode} in Ruby syntax checkers}
@item
Parse columns from @code{python-pylint} errors
@item
Do not compress temporary files for syntax checks if the original file
was compressed
@end itemize

@item
Bug fixes:

@itemize @bullet
@item
@ghissue{225, Find local includes in the Clang syntax checker}
@item
Do not emit spurious flawed definition warning in the @code{rst} syntax
checker
@item
@ghissue{251, Handle abbreviated file names in @command{luac}
output@comma{} by simply ignoring them}
@item
@ghissue{259, Correctly redirect the output binary of the
@code{go-build} syntax checker}
@item
@ghissue{263, Fix Cppcheck parsing with the built-in Emacs XML parser}
@end itemize

@end itemize

@node 0.16, master, 0.15, Changes
@comment  node-name,  next,  previous,  up
@unnumberedsec 0.16 (Jan 11, 2014)

@itemize @bullet
@item @b{Breaking changes}:

@itemize @bullet
@item
Argument substitution is no longer performed on syntax checker
executables.  The executable must be a string.
@item
@ghissue{275, Split out @code{haskell-hdevtools} into a separate
package}.  See @uref{https://github.com/flycheck/flycheck-hdevtools,
flycheck-hdevtools}
@item
Drop support for coffeelint 0.x
@item
@ghissue{230, The error list is reimplemented on top of Tabulated List
Mode}.  This greatly changes the appearance and behaviour of the error
list.
@end itemize

@item
New syntax checkers:

@itemize @bullet
@item
@ghissue{250, Ruby with @command{ruby-lint}}
@item
@ghissue{270, Handlebars}
@item
@ghissue{253, YAML with @command{yaml-jsyaml}}
@item
@ghissue{255, Chef recipes with @command{foodcritic}}
@item
@ghissue{276, AsciiDoc}
@item
@ghissue{271, CFEngine}
@item
@ghissue{277, Racket}
@item
Texinfo
@item
@ghissue{296, Verilog}
@item
@ghissue{291, Javascript with @command{eslint}}
@item
@ghissue{285, ERuby}
@end itemize

@item
New features:

@itemize @bullet
@item
@ghissue{272, Define variables to override the executables of syntax
checkers}
@item
@ghissue{272, Interactively set the executable of a syntax checker with
@code{flycheck-set-checker-executable}}
@item
@ghissue{269, Disable syntax checkers easily with
@code{flycheck-disabled-checkers}}
@item
@ghissue{268, Add support for the Compass CSS framework in the
@code{sass} and @code{scss} checkers@comma{} with
@code{flycheck-sass-compass} and @code{flycheck-scss-compass}
respectively}
@item
@ghissue{287, Disable style checks in @code{ruby-rubocop} with
@code{flycheck-rubocop-lint-only}}
@item
@ghissue{283, Add support for Microsoft extensions in @code{c/c++-clang}
via @code{flycheck-clang-ms-extensions}}
@item
@ghissue{230, New faces @code{flycheck-error-list-info}@comma{}
@code{flycheck-error-list-warning}@comma{}
@code{flycheck-error-list-error}@comma{}
@code{flycheck-error-list-line-number} and
@code{flycheck-error-list-column-number}}
@item
Add @code{flycheck-ghc-no-user-package-database} to disable the user
package database for @code{haskell-ghc}
@item
Add @code{flycheck-ghc-package-databases} to add additional package
databases to @code{haskell-ghc}
@item
Add @code{flycheck-ghc-search-path} to add additional directories to the
search path of @code{haskell-ghc}
@end itemize

@item
Improvements:

@itemize @bullet
@item
Demote Rubocop convention messages to @code{info} level
@item
@ghissue{282, Stop Flycheck before the buffer is reverted}
@item
Properly resolve local module imports in @code{haskell-ghc}
@end itemize

@item
Bug fixes:

@itemize @bullet
@item
@ghissue{280, Make relative imports work with @code{python-pylint}}
@item
Fix parsing of errors in @code{scss} and @code{sass}
@end itemize

@end itemize

@node master, , 0.16, Changes
@comment  node-name, next,  previous,  up
@unnumberedsec master (unreleased)

@itemize @bullet
@item @b{Breaking changes}:

@itemize @bullet
@item
The default @code{flycheck-completion-system} was changes to nil,
i.e. the built-in @code{completing-read}, for compliance with Emacs'
defaults.  To restore the previous behaviour, add the following to your
@file{init.el}:

@lisp
(eval-after-load 'flycheck '(setq flycheck-completion-system 'ido))
@end lisp

@end itemize

@item
New syntax checkers:

@itemize @bullet
@item
RST (ReStructuredText) using Sphinx
@end itemize

@item
New features:

@itemize @bullet
@item
@ghissue{266, Extend syntax checkers with
@code{flycheck-add-next-checkers}}
@end itemize

@item
Improvements:

@itemize @bullet
@item
@ghissue{301, Immediately re-check the buffer when it was changed during
a syntax check}
@item
@ghissue{305, Do not defer syntax checker after idle change timeout}
@item
Do not use the generic @code{rst} syntax checker in Sphinx projects
anymore, to avoid false positives by Sphinx-only markup
@end itemize

@item
Bug fixes

@itemize @bullet
@item
@ghissue{298, Fix compatibility with tabbar-mode}
@end itemize

@end itemize

@node Credits, GNU Free Documentation License, Changes, Top
@comment  node-name,  next,  previous,  up
@appendix Credits

Flycheck is written and maintained by @gh{lunaryorn, Sebastian Wiesner},
with contributions from the following people.  Their help and ideas,
their support and patches are greatly appreciated.

@itemize @bullet
@item
@gh{bbatsov, Bozhidar Batsov} provided valuable feedback and
refinements, brought Flycheck to a larger user base by adding it to his
awesome @gh{bbatsov/prelude, Prelude project}, and added a Ruby syntax
checker using @command{rubocop}.

@item
@gh{bbbscarter, Simon Carter} provided valuable feedback about automatic
syntax checking, and took great effort to debug some very subtle issues
in it.

@item
@gh{dhaley, Damon Haley} helped to shape and test the PHP CodeSniffer
checker.

@item
@gh{dholm, David Holm} added C/C++ syntax and style checkers using
@command{clang} and @command{cppcheck} respectively, and contributed a
Verilog syntax checker using @command{verilator}.

@item
@gh{gfrey, Gereon Frey} fixed the @command{go-build} syntax checker and
improved its tests.

@item
@gh{wyuenho, Jimmy Yuen Ho Wong} added the HTML syntax checker and the
jshint Javascript checker, and did valuable testing and bug fixing.

@item
@gh{kwitek,Krzysztof Witkowski} implemented @code{eval} support in
Flycheck commands.

@item
@gh{magnars/,Magnar Sveen} developed the awesome @gh{magnars/dash.el,
dash.el} and @gh{magnars/s.el, s.el} libraries, that drive considerable
parts of Flycheck's internals.

@item
@gh{maio, Marian Schubert} added the Perl syntax checker.

@item
@gh{markhellewell, Mark Hellewell} added the Puppet syntax and style
checkers.

@item
@gh{scrooloose, Martin Grenfell} created the awesome Vim library
@gh{scrooloose/syntastic, syntastic} which inspired this project and
many of its checkers.

@item
@gh{BinaryKhaos, Matthias Dahl} improved the performance of Flycheck's
temp file handling.

@item
@gh{mitchty, Mitch Tishmack} added support for Microsoft extensions to
the Clang syntax checker.

@item
@gh{ptrv, Peter Vasil} contributed syntax checkers for XML, Lua and Go
(using @command{go build} and @command{go test}), added unit tests and
did valuable testing.

@item
@gh{rdallasgray, Robert Dallas Gray} made error display customizable
with @code{flycheck-display-errors-function}.

@item
@gh{robert-zaremba, Robert Zaremba} added Go syntax checker using
@command{gofmt}.

@item
@gh{steckerhalter, steckerhalter} provided the PHP CodeSniffer checker.

@item
@gh{purcell, Steve Purcell} implemented many checkers, contributed
important ideas to the design of the checker API and engaged in
worthwhile discussion to shape this project.

@item
@gh{syl20bnr, Sylvain Benner} added syntax checkers for Elixir and
Erlang, and wrote the cool @gh{flycheck/flycheck-color-mode-line,
flycheck-color-mode-line} extension.

@item
@gh{thisirs, Sylvain Rousseau} added a syntax checker for POSIX shell
script using @command{bash}, and improved error parsing in the Bash
script syntax checker.

@item
@gh{tzz, Ted Zlatanov} added a syntax checker for CFEngine.

@item
@gh{tom-tan, tom tan} added a syntax checker for the D programming
language using @command{dmd}, and wrote the cool
@gh{flycheck/flycheck-d-unittest, flycheck-d-unittest} extension.

@item
@gh{yannick1974, Yannick Roehlly} added support for PEP8 naming errors
to the Flake8 syntax checker.

@item
@gh{yasuyk, Yasuyuki Oka} contributed a lot of syntax checkers for
various languages, including AsciiDoc, Chef recipes, ERuby, Handlebars,
Javascript, PHP, Racket, Ruby, Slim and YAML.

@item
@gh{vderyagin, Victor Deryagin} added the Rust syntax checker.
@end itemize

Of course we also need to thank @ref{Top, ,GNU Flymake, flymake}, the
first, respectable, though somewhat failed attempt at on-the-fly syntax
checking.

@node GNU Free Documentation License, Syntax checkers, Credits, Top
@comment  node-name,  next,  previous,  up
@appendix GNU Free Documentation License

@include fdl-1.3.texi

@node Syntax checkers, Definition Index, GNU Free Documentation License, Top
@comment  node-name,  next,  previous,  up
@appendix Available syntax checkers

The following syntax checkers are included in Flycheck, listed in the
order of their appearance in the default value of
@code{flycheck-checkers}:

@itemize @bullet
@iflyc asciidoc
@iflyc bash
@iflyc c/c++-clang
@iflyc c/c++-cppcheck
@iflyc cfengine
@iflyc chef-foodcritic
@iflyc coffee
@iflyc coffee-coffeelint
@iflyc css-csslint
@iflyc d-dmd
@iflyc elixir
@iflyc emacs-lisp
@iflyc emacs-lisp-checkdoc
@iflyc erlang
@iflyc eruby-erubis
@iflyc go-gofmt
@iflyc go-build
@iflyc go-test
@iflyc haml
@iflyc handlebars
@iflyc haskell-ghc
@iflyc haskell-hlint
@iflyc html-tidy
@iflyc javascript-jshint
@iflyc javascript-eslint
@iflyc javascript-gjslint
@iflyc json-jsonlint
@iflyc less
@iflyc lua
@iflyc perl
@iflyc php
@iflyc php-phpmd
@iflyc php-phpcs
@iflyc puppet-parser
@iflyc puppet-lint
@iflyc python-flake8
@iflyc python-pylint
@iflyc racket
@iflyc rst
@iflyc rst-sphinx
@iflyc ruby-rubocop
@iflyc ruby-rubylint
@iflyc ruby
@iflyc ruby-jruby
@iflyc rust
@iflyc sass
@iflyc scala
@iflyc scss
@iflyc sh-dash
@iflyc sh-bash
@iflyc slim
@iflyc tex-chktex
@iflyc tex-lacheck
@iflyc texinfo
@iflyc verilog-verilator
@iflyc xml-xmlstarlet
@iflyc xml-xmllint
@iflyc yaml-jsyaml
@iflyc yaml-ruby
@iflyc zsh
@end itemize

Use @kbd{M-x flycheck-describe-checker} in this buffer to get help for
the syntax checker under point.

@node Definition Index,  , Syntax checkers, Top
@comment  node-name,  next,  previous,  up
@unnumbered Type, Function and Variable Definition Index

@printindex cp

@bye

@c Local Variables:
@c mode: texinfo
@c TeX-master: t
@c TeX-command-default: "Makeinfo"
@c coding: utf-8
@c End:
