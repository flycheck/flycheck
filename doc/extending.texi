This chapter explains how to add new syntax checkers to Flycheck, and
provides examples for common use cases.

If you define a new syntax checker, @emph{please} contribute it to
Flycheck to make it available to other users, too.  @xref{Contributing
syntax checkers}, for more information.

@menu
* Definition::          How to define syntax checkers
* Error parsers::       Built-in error parsers
* Option filters::      Built-in option filters
* Examples::            Examples on how to define syntax checkers
@end menu

@node Definition, Error parsers, Extending, Extending
@comment  node-name,  next,  previous,  up
@section Definition of syntax checkers

You define new syntax checkers with @code{flycheck-define-checker}:

@defmac flycheck-define-checker symbol docstring &rest properties
Define @var{symbol} as new syntax checker with @var{docstring} and
@var{properties}.

@var{docstring} provides documentation for the syntax checker.  Use
@kbd{C-c ! ?} or @kbd{M-x flycheck-describe-checker} to view the
documentation of a syntax checker.

The following @var{properties} constitute a syntax checker:

@table @code
@item :command (@var{command} @var{arg} ...)
An unquoted list describing the syntax checker command to execute.

@var{command} is checked for existence with @code{executable-find}
before executing a syntax checker.

In @var{command} and @var{arg}, the following special symbols and sexps
are substituted before executing the syntax checker:

@table @code
@item source
This symbol is substituted with the file to check.  This file is a
temporary file with the contents of the buffer to check, created in the
system's temporary directory.

If the buffer to check has a file name, the non-directory component of
the name of the temporary file will be the same as in the buffer's file
name, to support languages which enforce specific rules on the file name
(e.g. the file must be named after the containing feature, class, etc.).

If the buffer to check has no file name, the name of the temporary file
is random.

This symbol is the @b{preferred} way to pass the input file to your
syntax checker.

@item source-inplace
This symbol is substituted with the file to check.  This file is a
temporary file with the contents of the buffer to check, created @b{in
the same directory} as the buffer's file.  The name of the file is
random.

If the buffer has no file name, this symbol is equivalent to
@code{source}.

This symbol should be used if and only if the syntax check @b{needs
other files} from the source directory (e.g. include files in C, or
Python modules).

@item source-original
This symbol is substituted with @code{buffer-file-name}, or an empty
string, if the buffer has no file name.

This symbol is provided to @b{additionally} pass the real name of the
file to check to a syntax checker.

It should @b{never} be used as primary input to the syntax checker,
unless both @code{source} and @code{source-original} are absolutely not
applicable.  In this case, be sure to add a predicate to your syntax
checker that inhibits the syntax check, if the buffer has no file name,
or was modified, for otherwise the syntax check will fail or return
out-dated errors:

@lisp
:predicate (lambda () (and (buffer-file-name)
                           (not (buffer-modified-p)))
@end lisp

@item temporary-directory
This symbol is substituted with the path of an existing temporary
directory, which is unique on each execution of the syntax checker.

Use this symbol if you need to move files created by a syntax checker
out of the way.

See the declaration of the @code{elixir} syntax checker for an
application of this symbol.

@item (config-file @var{option} @var{variable})
This cell is substituted with a configuration file for the syntax
checker.  @var{option} is a string containing the option that specifies
a configuration file to the syntax checker tool.

@var{variable} is a symbol referring to a variable from which to obtain
the name or path of the configuration file.  @xref{Configuration}, for
more information about syntax checker configuration.  Define this
variable with @code{flycheck-def-config-file-var}.

If the configuration file is found, the cell is substituted with the
@var{option} and the absolute path to the configuration file as string.
Otherwise the cell is simply dropped from the arguments of the syntax
checker.

If @var{option} ends with a @code{=} character, @var{option} and the
absolute path to the configuration file are concatenated and given as a
single argument to the syntax checker.  Otherwise, @var{option} and the
configuration file path are given as two separate arguments.

@item (option @var{option} @var{variable} [@var{filters}])
This cell is substituted with the value of @var{variable}.  @var{option}
is a string containing the option for with to specify the value.
@var{filter} is an optional function to be applied to the value of
@var{variable} before substitution.  @xref{Option filters}, for a list
of built-in option filters.

@var{variable} is a symbol referring to a variable whose value to use.
@xref{Configuration}, for more information about syntax checker
configuration.  Define this variable with
@code{flycheck-def-option-var}.

If @var{variable} is not @var{nil} after applying @var{filter}, the cell
is substituted with the @var{option} and the value of @var{variable}
after applying @var{filter}.  Otherwise the cell is simply dropped from
the arguments of the syntax checker.

An @var{option} ending with a @code{=} character is treated like in a
@code{config-file} cell.

@item (eval @var{form})
This cell is substituted with a result of evaluating @var{form}.
@var{form} must either return a string or a list of strings, or
@code{nil} to indicate that nothing should be substituted for
@var{cell}.  In case of other return values an error is signaled.
@emph{No} further substitutions are performed, neither in @var{form}
before it is evaluated, nor in the result of evaluating FORM.
@end table

This property is @b{mandatory}.

@item :error-patterns ((@var{level} @var{sexp}) ...)
An unquoted list of one or more error patterns to parse the output of
the syntax checker @code{:command}.

@var{level} is either @code{warning} or @code{error} and denotes the
severity of errors matched by the pattern.

The @var{level} is followed by one or more @code{rx} @var{sexp}
elements.  See the docstring of the function @code{rx} for more
information.  In addition to the standard forms of @code{rx}, Flycheck
supports the following additional forms to make specific parts of the
error output available to Flycheck:

@table @code
@item line
Matches the line number the error refers to, as a sequence of one or
more digits.

@item column
Matches a column number the error refers to, as a sequence of one or
more digits.

@item (file-name @var{sexp} ...)
Matches the file name the error refers to.  @var{sexp} matches the name
of the file.  If no @var{sexp} is given, use a default body of
@code{(minimal-match (one-or-more not-newline))}, which is equivalent to
@code{".+?"}.

@item (message @var{sexp} ...)
Matches the error message to be shown to the user.  @var{sexp} matches
the text of the message.  If no @var{sexp} is given, use a default body
of @code{(one-or-more not-newline)}, which is equivalent to @code{".+"}.
@end table

Each of these items is optional, however error messages without a
@code{line} will be ignored and are not shown in the buffer.

The patterns are applied in the order of declaration to the whole output
of the syntax checker.  Output already matched by a pattern will not be
matched by subsequent patterns.  In other words, the first pattern wins.

@item :error-parser @var{function}
@itemx :error-parser (lambda (ouptut checker buffer) @var{body} ...)
A function to parse the output of the syntax checker, either as unquoted
function symbol or @code{lambda} form.

The function must accept three arguments @var{output}, @var{checker} and
@var{buffer}, where @var{output} is the output of the syntax checker as
string, @var{checker} the syntax checker that was used, and
@code{buffer} a buffer object representing the checker buffer.

The function must return a list of @code{flycheck-error} objects parsed
from @var{output}.  @xref{Error API}, for information about
@code{flycheck-error}.  @xref{Error parsers}, for a list of built-in
error parsers.

If this property is given, it takes precedence over
@code{:error-patterns}.  To use an error parser together with patterns,
you must manually call @code{flycheck-parse-output-with-patterns} in
your error parser to apply the error patterns.  You can then manipulate
the @code{flycheck-error} objects returned by this function.

@item :modes @var{mode}
@itemx :modes (@var{mode}...)
An unquoted major mode symbol or an unquoted list thereof.

If given, this syntax checker is only used, if the major mode of the
buffer to check is equal (as in @code{eq}) to any given @var{mode}.

@item :predicate @var{function}
@itemx :error-parser (lambda () @var{body} ...)
A function to determines whether to use this syntax checker in the
current buffer, either as unquoted function symbol or as @code{lambda}
form.  The syntax checker is only used if this function returns non-nil
when called in the buffer to check.

If @var{:modes} is given, the function is only called in matching major
modes.  That means, if both @code{:modes} and @code{:predicate} are
given, @b{both} must match for this syntax checker to be used.

@item :next-checker (@var{item} ...)
An unquoted list defining the syntax checker to run after this checker.

Each @var{item} is either a syntax checker symbol or a cons cell
@code{(@var{predicate} . @var{checker})}.  In the former case, the
syntax checker is always considered.  In the later case, @var{checker}
is only considered if the @var{predicate} matches.

@var{predicate} is either @code{no-errors} or @code{warnings-only}:

@table @code
@item no-errors
The syntax @var{checker} is only considered if this syntax checker
reported no errors at all.
@item warnings-only
The syntax @var{checker} is only considered if this syntax checker only
reported warnings, but no errors.
@end table
@end table

@code{:command} is @b{mandatory}.  A syntax checker must also have at
least one of @code{:modes} and @code{:predicate}, and at least one of
@code{:error-patterns} or @code{:error-parser} are present, an error is
signaled.  If @code{:predicate} and @code{:modes} are given, both must
match for the syntax checker to be used.  @code{:next-checkers} is
entirely optional.

If any property has an invalid value, a (compile-time) error is
signaled.
@end defmac

A syntax checker define with @code{flycheck-define-checker} is already
suitable for manual checker selection with
@code{flycheck-select-checker}.  To make the syntax checker available
for automatic selection, add it to @code{flycheck-checkers}.
@xref{Selection}.

@defmac flycheck-def-config-file-var @var{symbol} @var{checker} @
  &optional @var{filename}
Define @var{symbol} as configuration file variable for a syntax
@var{checker}, with a default value of @var{filename}.

@var{symbol} is declared as customizable, buffer-local variable using
@code{defcustom}, to provide a configuration file for the given syntax
@var{checker}.  The variable has the customization type @code{string},
and gets a comprehensive docstring, including a reference to
@var{checker}.

@var{filename} is used as initial value for the variable.  If omitted,
the initial value is nil.

Use this macro together with the @code{config-file} cell in the command
of a syntax checker.
@end defmac

@defmac flycheck-def-option-var @var{symbol} @var{initial-value} @
  @var{checker} &optional @var{custom-args}
Define @var{symbol} as option variable for a syntax @var{checker}, with
the given @var{initial-value}.

@var{symbol} is declared as customizable variable, buffer-local variable
using @code{defcustom}, to provide an option for the given syntax
@var{checker}.  @var{symbol} gets a comprehensive docstring, including a
reference to @var{checker}.

@var{custom-args} are forwarded to @code{defcustom}.  Declare the
customization type here.

Use this macro together with the @code{option} cell in the command of a
syntax checker.
@end defmac

@node Error parsers, Option filters, Definition, Extending
@comment  node-name,  next,  previous,  up
@section Error parsers

Syntax checkers may use more sophisticated error parsing by using the
@code{:error-parser} property.  @xref{Definition}, for information about
syntax checker definition.

Flycheck provides the following error parsers for use by syntax
checkers:

@table @code
@item flycheck-parse-with-patterns
Parse output with the @code{:error-patterns} of the syntax checker.
@item flycheck-parse-checkstyle
Parse XML output similar to @uref{http://checkstyle.sourceforge.net/,
Checkstyle}.
@end table

You may also define your own error parsers.  An error parser is a
function that takes three arguments:

@table @var
@item output
The complete output of the syntax checker as string.
@item checker
A symbol denoting the executed syntax checker.
@item buffer
A buffer object referring to the buffer that was syntax-checked.
@end table

The function shall return a list of Flycheck errors.  @xref{Error API},
for more information about Flycheck errors.

Flycheck provides some utility functions to implement error parsers.
@xref{Error parser API}.

@node Option filters, Examples, Error parsers, Extending
@comment  node-name,  next,  previous,  up
@section Option filters

Flycheck provides the following built-in option filters for use with the
@code{option} cell:

@table @code
@item flycheck-option-int
An integral option that handles @code{nil} correctly (unlike
@code{number-to-string}).
@end table

@node Examples,  , Option filters, Extending
@comment  node-name,  next,  previous,  up
@section Examples of syntax checkers

@menu
* Simple example::              How to define a basic syntax checker
* Predicate example::           How to control syntax checker usage
* Configuration example::       How to configure syntax checkers
* Chaining example::            How to execute more than one syntax checker
@end menu

@node Simple example, Predicate example, Examples, Examples
@comment  node-name,  next,  previous,  up
@subsection Basic syntax checkers

As explained in the previous chapter @ref{Extending} a syntax checker is
declared with @code{flycheck-define-checker}.

We will use this function to define a syntax checker using the PHP
CodeSniffer utility for the PHP programming language:

@lisp
(flycheck-define-checker php-phpcs
  "A PHP syntax checker using PHP_CodeSniffer.

See URL `http://pear.php.net/package/PHP_CodeSniffer/'."
  :command ("phpcs" "--report=checkstyle" source)
  :error-parser flycheck-parse-checkstyle
  :modes php-mode)
@end lisp

First we specify the @code{:command} to execute.  The first element of
the command list is the name of the executable, @command{phpcs} in our
case.  This command is checked for existence with @code{executable-find}
before using this syntax checker.  If the command does not exist, the
syntax checker is @emph{not} used.

The executable is following by the arguments, in this case some options
and the symbol @code{source}.  This symbol is replaced with the file to
check.  This file is a temporary file created in the system temporary
directory and containing the contents of the buffer to check.

Next we specify how to parse the output of the syntax checker.  PHP
CodeSniffer provides an option to output errors in an XML format similar
to the Java tool Checkstyle, so we use the built-in @emph{error parser}
@code{flycheck-parse-checkstyle} to parse the output.

Eventually we enable the syntax checker in PHP editing modes.

If the syntax checker does not provide any sort of structured output
format, we have to parse the error messages from the textual output.  To
do so, we can use @emph{error patterns}, like in the Pylint syntax
checker for the Python programming language:

@lisp
(flycheck-define-checker python-pylint
  "A Python syntax and style checker using Pylint.

See URL `http://pypi.python.org/pypi/pylint'."
  :command ("epylint" source-inplace)
  :error-patterns
  ((warning line-start (file-name) ":" line
            ": Warning (W" (zero-or-more not-newline) "): "
            (message) line-end)
   (error line-start (file-name) ":" line
          ": Error (E" (zero-or-more not-newline) "): "
          (message) line-end)
   (error line-start (file-name) ":" line ": [F] " (message) line-end))
  :modes python-mode)
@end lisp

Again, there is a @code{:command}, however we use the
@code{source-inplace} symbol this time.  This symbol causes the
temporary file to be created in the same directory as the original file,
making information from the source code tree available to the syntax
checker.  In case of Pylint, these are the Python packages from the
source code tree.

Next we give the list of @code{:error-patterns} to parse errors.  These
patterns extract the error location and the error message from the
output of @command{epylint}.  An error pattern is a list containing a
regular expression with match groups to extract the error information,
and an error level (either @code{warning} or @code{error}).

Eventually we enable the syntax checker in @code{python-mode}.

@node Predicate example, Configuration example, Simple example, Examples
@comment  node-name,  next,  previous,  up
@subsection Syntax checkers with predicates

In the previous examples the syntax checkers were specific to certain
major modes.  However, this is not always the case.  For instance, GNU
Emacs provides a single mode only for shell scripting in various Shell
languages.  A syntax checker for a specific shell must check whether the
edited shell script is written for the right shell:

@lisp
(flycheck-define-checker zsh
  "A Zsh syntax checker using the Zsh shell.

See URL `http://www.zsh.org/'."
  :command ("zsh" "-n" "-d" "-f" source)
  :error-patterns
  ((error line-start (file-name) ":" line ": " (message) line-end))
  :modes sh-mode
  :predicate (lambda () (eq sh-shell 'zsh)))
@end lisp

This syntax checker for the Zsh shell is enabled in @code{sh-mode} as
specified by @code{:modes}, however it specifies an additional
@code{:predicate} to determine whether the right shell is in use.  Hence
this syntax checker is only used if a Zsh shell scripting is being
edited in @code{sh-mode}, but not if a Bash or POSIX Shell script is
being edited.

A syntax checker may even go as far as not having @code{:modes} at all.
For instance, there is no special JSON mode, but syntax checking JSON is
still desirable.  Hence a JSON syntax checker may use the
@code{:predicate} to check the file extension:

@lisp
(flycheck-define-checker json-jsonlint
  "A JSON syntax and style checker using jsonlint.

See URL `https://github.com/zaach/jsonlint'."
  :command ("jsonlint" "-c" "-q" source)
  :error-patterns
  ((error line-start
          (file-name)
          ": line " line
          ", col " column ", "
          (message) line-end))
  :predicate
  (lambda ()
    (or
     (eq major-mode 'json-mode)
     (and buffer-file-name
          (string= "json" (file-name-extension buffer-file-name))))))
@end lisp

This syntax checker is now used whenever a file ends with @code{.json},
regardless of the major mode.

@node Configuration example, Chaining example, Predicate example, Examples
@comment  node-name,  next,  previous,  up
@subsection Configuration files for syntax checkers

Some syntax checkers can be configured using configuration files given
by an option.  Flycheck provides built-in support to handle such
configuration files:

@lisp
(flycheck-def-config-file-var flycheck-jshintrc javascript-jshint ".jshintrc")

(flycheck-define-checker javascript-jshint
  "A JavaScript syntax and style checker using jshint.

See URL `http://www.jshint.com'."
  :command ("jshint" "--checkstyle-reporter"
            (config-file "--config" flycheck-jshintrc) source)
  :error-parser flycheck-parse-checkstyle
  :modes (js-mode js2-mode js3-mode))
@end lisp

As you can see, we define a syntax checker for Javascript, using the
@command{jshint} utility.  This utility accepts a configuration file via
the @option{--config} option.

To use a configuration file with jshint, we first declare the variable
@code{flycheck-jshintrc} that provides the name of the file, as
explained in @ref{Configuration}.

In the @code{:command} we use a @code{config-file} element to pass the
configuration file to the syntax checker.  If the configuration file is
found, its path will be passed to the syntax checker, using the option
specified after the @code{config-file} symbol.  Otherwise the whole
element is simply omitted from the command line.

Some Syntax checkers can also be configured using options passed on the
command line.  Flycheck supports this case, too.  We will use this
facility to extend the PHP CodeSniffer syntax checker from the
@ref{Simple example} with support for coding standards:

@lisp
(flycheck-def-option-var flycheck-phpcs-standard nil phpcs
  "The coding standard for PHP CodeSniffer."
  :type '(choice (const :tag "Default standard" nil)
                 (string :tag "Standard name" nil)))
(put 'flycheck-phpcs-standard 'safe-local-variable #'stringp)

(flycheck-declare-checker php-phpcs
  "A PHP syntax checker using PHP_CodeSniffer."
  :command '("phpcs" "--report=checkstyle"
             (option "--standard=" flycheck-phpcs-standard)
             source)
  :error-parser 'flycheck-parse-checkstyle
  :modes 'php-mode)
@end lisp

The syntax checker is pretty much the same as before, except that a new
element was added to @code{:command}.  This element passes the value of
the new option variable @code{flycheck-phpcs-standard} to the syntax
checker.  This variable is declared with the special macro
@code{flycheck-def-option-var} at the beginning.


@node Chaining example,  , Configuration example, Examples
@comment  node-name,  next,  previous,  up
@subsection Chaining syntax checkers

For many languages, more than a single syntax checker is applicable.
For instance, Emacs Lisp can be checked for syntactic corrections with
the byte code compiler, and for adherence to the Emacs Lisp
documentation style using Checkdoc.  PHP, too, can be syntax checked
with the PHP parser, and verified against coding styles using PHP
CodeSniffer.

To support such cases, syntax checkers can be @dfn{chained} using the
@code{:next-checkers}.  The standard PHP syntax checker uses this to
run PHP CodeSniffer if there are no syntax errors:

@lisp
(flycheck-define-checker php
  "A PHP syntax checker using the PHP command line interpreter.

See URL `http://php.net/manual/en/features.commandline.php'."
  :command ("php" "-l" "-d" "error_reporting=E_ALL" "-d" "display_errors=1"
            "-d" "log_errors=0" source)
  :error-patterns
  ((error line-start (or "Parse" "Fatal" "syntax") " error" (any ":" ",") " "
          (message) " in " (file-name) " on line " line line-end))
  :modes (php-mode php+-mode)
  :next-checkers ((warnings-only . php-phpcs)))
@end lisp

Now PHP CodeSniffer will check the coding style, whenever a PHP syntax
check did not result in any errors, if PHP CodeSniffer syntax checker is
usable @emph{and} registered.

@c Local Variables:
@c mode: texinfo
@c TeX-master: "flycheck"
@c End:
