This is flycheck.info, produced by makeinfo version 5.1 from
flycheck.texi.

This manual is for Flycheck, the on-the-fly syntax checker for GNU
Emacs.

   Copyright (C) 2013 Sebastian Wiesner

     Permission is granted to copy, distribute and/or modify this
     document under the terms of the GNU Free Documentation License,
     Version 1.3 or any later version published by the Free Software
     Foundation; with no Invariant Sections, no Front-Cover Texts, and
     no Back-Cover Texts.  A copy of the license is included in the
     section entitled "GNU Free Documentation License".
INFO-DIR-SECTION Emacs
START-INFO-DIR-ENTRY
* Flycheck: (flycheck). On the fly syntax checking (aka "flymake done right")
END-INFO-DIR-ENTRY


File: flycheck.info,  Node: Top,  Next: Introduction,  Prev: (dir),  Up: (dir)

Flycheck manual
***************

This manual is for Flycheck, the on-the-fly syntax checker for GNU
Emacs.

   Copyright (C) 2013 Sebastian Wiesner

     Permission is granted to copy, distribute and/or modify this
     document under the terms of the GNU Free Documentation License,
     Version 1.3 or any later version published by the Free Software
     Foundation; with no Invariant Sections, no Front-Cover Texts, and
     no Back-Cover Texts.  A copy of the license is included in the
     section entitled "GNU Free Documentation License".

* Menu:

* Introduction::                Introduce Flycheck, aka "flymake done right"
* Usage::                       How to use Flycheck for on-the-fly syntax checking
* Extending::                   How to extend Flycheck with new syntax checkers
* API::                         An overview about the Flycheck API
* Contribution::                How to contribute to Flycheck development
* Changes::                     Changes to Flycheck
* Credits::                     Developers and contributors to Flycheck
* GNU Free Documentation License::  The license of this documentation
* Syntax checkers::             Available syntax checkers
* Function and Variable Index::  A menu containing functions and variables


File: flycheck.info,  Node: Introduction,  Next: Usage,  Prev: Top,  Up: Top

1 Introduction
**************

Flycheck (aka "Flymake done right") is a modern on-the-fly syntax
checking extension for GNU Emacs 24 withL

   * ready-to-use syntax checkers for a bunch of languages,
   * easy customization,
   * a comprehensive manual,
   * a dead simple, declarative API to create new syntax checkers,
   * major-mode based selection of syntax checkers,
   * multiple syntax checkers per buffer,
   * a "doesn't get in your way" guarantee,
   * and a clean, concise and understandable implementation with decent
     test coverage.

* Menu:

* Features::                    What Flycheck can do for you
* Installation::                How to install Flycheck in your GNU Emacs 24
* Activation::                  How to activate Flycheck for on-the-fly syntax
                                 checking


File: flycheck.info,  Node: Features,  Next: Installation,  Prev: Introduction,  Up: Introduction

1.1 Features
============

     Automatic syntax checking after saving or insertion of new lines
   * Built-in syntax checkers for:
        * CoffeeScript (using 'coffeelint')
        * CSS (using 'csslint'))
        * Emacs Lisp (using the byte compiler and CheckDoc)
        * Go (using 'gofmt', 'go build' and 'go test')
        * Haml
        * HTML (using 'tidy')
        * Javascript (using 'jshint')
        * JSON (using 'jsonlint')
        * Lua
        * Perl
        * PHP (using the PHP Command Line and PHP CodeSniffer)
        * Python (using 'flake8', 'pylint', or 'pyflakes')
        * Ruby
        * Rust (using 'rustc')
        * RST (ReStructuredText, using Docutils)
        * Sass
        * SCSS
        * Shell scripts (using Bash, Dash, or Zsh depending on the type
          of shell script)
        * TeX/LaTeX (using 'chktex' or 'lacheck')
        * XML (using 'xmlstarlet')
   * Nice error indication and highlighting
   * Easy customization
   * Syntax checker configuration with project-specific configuration
     files and options
   * Error navigation with 'next-error' and 'previous-error'
   * Easy declarative API to define new syntax checkers
   * Error parsers for structured markup formats (e.g.  Checkdoc XML)


File: flycheck.info,  Node: Installation,  Next: Activation,  Prev: Features,  Up: Introduction

1.2 Installation
================

Install the ELPA package from MELPA (http://melpa.milkbox.net) or
Marmalade (http://marmalade-repo.org/) using 'M-x package-install RET
flycheck'.  The former is the _recommended_ repository.

   Neither of these repositories is included in GNU Emacs by default.
You need to enable these repositories explicitly.  For instance, to add
the MELPA repository, add the following code to 'init.el':

     (require 'package)
     (add-to-list 'package-archives
                  '("melpa" . "http://melpa.milkbox.net/packages/") t)
     (package-initialize)

   Flycheck is written and tested against GNU Emacs 24.2 and newer.  It
should work on GNU Emacs 24.1, too.  Earlier releases of GNU Emacs,
especially GNU Emacs 23 and before, and other flavors of Emacs (e.g.
XEmacs, Aquamacs, etc.)  are not supported.  Flycheck may or may not
work, the latter being more likely.

   Most checkers depend on external tools to perform the actual syntax
checking.  Use 'flycheck-describe-checker' to get help about a syntax
checker and its dependencies.


File: flycheck.info,  Node: Activation,  Prev: Installation,  Up: Introduction

1.3 Activation
==============

Once installed, enable Flycheck mode with 'M-x flycheck-mode'.  To
automatically enable Flycheck in all buffers, in which it can be used,
add the following to your 'init.el' file:

     (add-hook 'after-init-hook #'global-flycheck-mode)


File: flycheck.info,  Node: Usage,  Next: Extending,  Prev: Introduction,  Up: Top

2 Usage
*******

This chapter explains the usage of Flycheck.

* Menu:

* Syntax checking::             How syntax is checked
* Selection::                   How syntax checkers are selected
* Configuration::               How to configure individual syntax checkers
* Reporting::                   How syntax warnings and errors are reported
* Navigation::                  How to navigate syntax warnings and errors
* Mode line::                   How status information is displayed in the mode
                                 line


File: flycheck.info,  Node: Syntax checking,  Next: Selection,  Prev: Usage,  Up: Usage

2.1 Syntax checking
===================

In 'flycheck-mode' the buffer is automatically checked on the fly when

   * the file is saved,
   * or if new lines are inserted.

You can also check the buffer manually:

'C-c ! c'
'M-x flycheck-buffer'
     Start a syntax check in the current buffer.

   Each syntax check is comprised of the following steps:

  1. Select a suitable syntax checker.  *Note Selection::, for more
     information on how syntax checkers are selected.
  2. Copy the contents of the buffer to be checked to a temporary file.
  3. Execute the syntax checker tool(s).
  4. Parse the output of the tool, and report all errors and warnings.
     *Note Reporting::, for more information.
  5. Run hooks in 'flycheck-after-syntax-check-hook'.

 -- User Option: flycheck-after-syntax-check-hook
     This variable is a list of function to execute after a syntax check
     is completed, including all chained syntax checkers.

     By the time these functions are called, all errors and warnings are
     already reported.  *Note Reporting::, for more information about
     error reporting.

     This variable is a normal hook.  *Note (elisp)Hooks::.


File: flycheck.info,  Node: Selection,  Next: Configuration,  Prev: Syntax checking,  Up: Usage

2.2 Syntax checker selection
============================

By default Flycheck automatically selects a suitable syntax checker from
'flycheck-checkers':

 -- User Option: flycheck-checkers
     A list of all syntax checkers to use as candidates for automatic
     checker selection.

     The first suitable syntax checker from this list is used to check a
     buffer.  A syntax checker is suitable, if
        * it may be used for the current major mode,
        * it's predicate matches,
        * and if the syntax checking tool exists.

     A syntax checker contained in this list is said to be "registered".

     *Note Syntax checkers::, for a list of available checkers.

   If no suitable syntax checker is found the syntax check is _silently_
omitted.  _No_ error is signaled, and only a specific indicator informs
about the omitted syntax check.  *Note Mode line::.

   You can manually select a specific syntax checker for the current
buffer, too:

'C-c ! s'
'M-x flycheck-select-checker'
     Prompt for a checker.  If no syntax checker is entered deselect the
     current syntax checker, and re-enable automatic selection again.
     With prefix arg, re-enable automatic selection without prompting.

     Syntax checker do _not_ need to be registered to be manually
     selected with this command.

'flycheck-select-checker' sets 'flycheck-checker':

 -- Variable: flycheck-checker
     Syntax checker to use for the current buffer.

     The variable is buffer local, and safe as file local variable for
     registered checkers.

     If unset, automatically select a suitable syntax checker.

     If set, only use this syntax checker.  Automatic selection is
     _disabled_.  If the syntax checker is unusable, signal an error.

You may directly set this variable, e.g.  via file local variables.  For
instance, you can use the following file local variable within a Python
source file to always check this file with 'pylint':

     # Local Variables:
     # flycheck-checker: python-pylint
     # End:

*Note (emacs)Specifying File Variables::, for more information about
file variables.

   Each syntax checker provides documentation with information about the
executable the syntax checker uses, in which buffers it will be used for
syntax checks, and whether it can be configured.  *Note Configuration::,
for more information about syntax checker configuration.

'C-c ! ?'
'M-x flycheck-describe-checker'
     Show the documentation of a syntax checker.


File: flycheck.info,  Node: Configuration,  Next: Reporting,  Prev: Selection,  Up: Usage

2.3 Syntax checker configuration
================================

Some syntax checkers can be configured via options.  The following
options are provided by Flycheck (use 'C-h v' or 'M-x describe-variable'
on the variable name for detailed help):

 -- User Option: flycheck-flake8-maximum-complexity
     The maximum McCabe complexity the 'python-flake8' syntax checker
     allows without reporting a warning.

 -- User Option: flycheck-flake8-maximum-line-length
     The maximum length of a line in characters the 'python-flake8'
     syntax checker allows without reporting an error.

 -- User Option: flycheck-phpcs-standard
     The coding standard the syntax checker 'php-phpcs' shall use.

   Some syntax checkers also read configuration files denoted by
associated "configuration file variables".  The following configuration
files are provided by Flycheck:

 -- User Option: flycheck-chktexrc
     The configuration file for the 'tex-chktex' syntax checker.

 -- User Option: flycheck-coffeelintrc
     The configuration file for the 'coffee-coffeelint' syntax checker.

 -- User Option: flycheck-flake8rc
     The configuration file for the 'python-flake8' syntax checker.

 -- User Option: flycheck-jshintrc
     The configuration file for the 'javascript-jshint' syntax checker.

 -- User Option: flycheck-tidyrc
     The configuration file for the 'html-tidy' syntax checker.

   All configuration file variables are interpreted according to the
following rules:

   If the variable contains a plain file name _without_ any slash, e.g.
'.jshintrc', this file is searched

  1. in the buffer's directory,
  2. any ancestors thereof,
  3. and in the 'HOME' directory eventually.

If the buffer has no 'buffer-file-name', only the 'HOME' directory is
searched.

   If the variable contains a _path with_ a slash, e.g.  './.jshintrc'
or '~/.jshintrc', the path is expanded against the buffer's directory
using 'expand-file-name'.

   Customize these variables using 'M-x customize-group RET
flycheck-config-files'.  Use 'flycheck-describe-checker' to find out
whether a syntax checker has a configuration file.

   You may also use these variables as file-local variables.  For
instance, the following checks the Javascript file always with
'.jshintrc' from the parent directory:

     // Local variables:
     // flycheck-jshintrc: "../.jshintrc"
     // End:

   Some syntax checkers have options that cannot be changed in
configuration files.  These options can be changed by various variables.
Customize these with 'M-x customize-group RET flycheck-options'.


File: flycheck.info,  Node: Reporting,  Next: Navigation,  Prev: Configuration,  Up: Usage

2.4 Error reporting
===================

Errors and warnings from a syntax checker are
   * reported in the mode line or in a popup buffer, depending on the
     length of the error messages,
   * indicated by fringe icons,
   * and highlighted in the buffer with 'flycheck-error-face' and
     'flycheck-warning-face' respectively, according to
     'flycheck-highlighting-mode'

 -- User Option: flycheck-error-face
 -- User Option: flycheck-warning-face
     The faces to use to highlight errors and warnings respectively.

     Note that the default faces provided by GNU Emacs are ill-suited to
     highlight errors because these are relatively pale and do not
     specify a background color or underline.  Hence highlights are
     easily overlook and even invisible for white space.

     For best error highlighting customize these faces, or choose a
     color theme that has reasonable Flycheck faces, for instance the
     excellent Solarized theme
     (https://github.com/bbatsov/solarized-emacs).

 -- User Option: flycheck-highlighting-mode
     This variable determines how to highlight errors:

     If set to 'columns' try to highlight errors as exactly as possible.
     If an error provides information about a specific column, only this
     column is highlighted.  This retains as much information as
     possible from the syntax checker, but a single column highlight may
     be easily overlooked.  This mode is the default.

     If set to 'lines' the whole line on which the error occurred is
     highlighted, regardless of whether the error is actually specific
     to a column.  Column information is hence ignored.

     If set to 'nil' highlighting is completely disabled.  Errors will
     only be reported via fringe icons and error message popups.

     Note that this variable does _not_ affect error _navigation_.
     'next-error' and 'previous-error' always jump to the error column,
     regardless of the highlighting mode.

   To view an error message, either hover the mouse of the highlighted
error, or move the point to the highlighted error and wait for a short
moment to see the error message in the echo area.

'C-c ! C'
'M-x flycheck-clear'
     Clear all Flycheck errors and warnings in the current buffer.


File: flycheck.info,  Node: Navigation,  Next: Mode line,  Prev: Reporting,  Up: Usage

2.5 Error navigation
====================

Flycheck supports the standard error navigation commands of Emacs.  If
no compilation buffer (including those from 'M-x compile', 'M-x grep',
'M-x occur', etc.)  is visible, 'M-g n' ('next-error') and 'M-g p'
('previous-error') will navigate between Flycheck warnings and errors in
the current buffer.  *Note (emacs)Compilation Mode::, for more
information about these commands.

   Visible compilation buffers take precedence over Flycheck navigation.
If such a buffer is visible, 'M-g n' and 'M-g p' will ignore Flycheck
errors and warnings, and navigate errors (or generally results) reported
by the compilation buffer instead.

   To address this issue, Flycheck provides independent error navigation
commands:

'C-c ! n'
'M-x flycheck-next-error'
     Jump to the next Flycheck error.

     With prefix argument, jump forwards by as many errors as specified
     by the prefix argument, e.g.  'M-3 C-c ! n' will move to the 3rd
     error from the current point.

'C-c ! p'
'M-x flycheck-previous-error'
     Jump to the previous Flycheck error.

     With prefix argument, jump backwards by as many errors as specified
     by the prefix argument, e.g.  'M-3 C-c ! p' will move to the 3rd
     previous error from the current point.

'M-x flycheck-first-error'
     Jump to the first Flycheck error.

     With prefix argument, jump forwards to by as many errors as
     specified by the prefix argument, e.g.  'M-3 M-x
     flycheck-first-error' moves to the 3rd error from the beginning of
     the buffer.

   Error navigation jumps to the exact error column, or to the first
non-whitespace character of a line if the error is not specific to a
column.


File: flycheck.info,  Node: Mode line,  Prev: Navigation,  Up: Usage

2.6 Mode line
=============

Flycheck indicates its state in the mode line:

'FlyC'
     There are no errors in the current buffer.
'FlyC*'
     A syntax check is being performed currently.
'FlyC:3/4'
     There are three errors and four warnings in the current buffer.
'FlyC-'
     Automatic syntax checker selection did not find a suitable syntax
     checker.  *Note Selection::, for more information.
'FlyC!'
     The syntax check failed.  Inspect the '*Messages*' buffer for
     details.
'FlyC?'
     The syntax check had a dubious result.  The definition of the
     syntax checker may be flawed.  Inspect the '*Messages*' buffer for
     details.  This indicator should never be displayed for built-in
     syntax checkers.  If it is, please report this issue to the
     Flycheck developers.  *Note Reporting issues::.


File: flycheck.info,  Node: Extending,  Next: API,  Prev: Usage,  Up: Top

3 Extending
***********

Flycheck is extensible with new syntax checkers.  This chapter explains
how to do so, and provides examples for common use cases.

   If you implement new syntax checkers, please consider contributing
these.  *Note Contributing syntax checkers::, for more information.

* Menu:

* Declaration::         How to declare syntax checkers
* Error parsers::       Built-in error parsers
* Option filters::      Built-in option filters
* Examples::            Examples on how to declare syntax checkers


File: flycheck.info,  Node: Declaration,  Next: Error parsers,  Prev: Extending,  Up: Extending

3.1 Declaration of syntax checkers
==================================

Checkers are declared with 'flycheck-declare-checker':

 -- Macro: flycheck-declare-checker symbol docstring &rest properties
     Declare SYMBOL as new syntax checker with PROPERTIES.

     DOCSTRING provides documentation for the syntax checker.

     The PROPERTIES specify the new syntax checker:

     ':command '(EXECUTABLE ARGUMENTS...)'
          A list providing the command to execute.  The command consists
          of an EXECUTABLE specified as string in the 'car', and the
          ARGUMENTS for this executable in the 'cdr'.  *Note (elisp)List
          elements::, for more information about the elements of a list.

          The EXECUTABLE is checked for existence with 'executable-find'
          before executing the syntax checker.

          In ARGUMENTS, various special symbols are substituted before
          executing the syntax checker:

          'source'
          'source-inplace'
               These symbols are substituted with the file to check.
               This file is a temporary file with the contents of the
               buffer.  With 'source' the copy is created in the
               temporary directory of the system.  This is
               _recommended_.

               With 'source-inplace' the temporary files is created in
               the same directory as the buffer's file.  Use this, if
               the syntax check needs other files from the source
               directory.  If the buffer has no 'buffer-file-name',
               'source-inplace' is the same as 'source'.

          'source-original'
               This symbol is substituted with 'buffer-file-name', or an
               empty string, if the buffer has no file name.  Note that
               if the buffer is modified, the content of the file is not
               up to date with the actual content of the buffer.  Hence
               do not use this as primary input to a syntax checker!

               See the declaration of the 'emacs-lisp-checkdoc' syntax
               checker for an application of this symbol.

          '(config-file OPTION VARIABLE)'
               This cell is substituted with a configuration file for
               the syntax checker.  OPTION is a string containing the
               option that specifies a configuration file to the syntax
               checker tool.

               VARIABLE is a symbol referring to a variable from which
               to obtain the name or path of the configuration file.
               *Note Configuration::, for more information about syntax
               checker configuration.  Define this variable with
               'flycheck-def-config-file-var'.

               If the configuration file is found according to the rules
               documented in *note Configuration::, the cell is
               substituted with the OPTION and the absolute path to the
               configuration file as string.  Otherwise the cell is
               simply dropped from the arguments of the syntax checker.

               If OPTION ends with a '=' character, OPTION and the
               absolute path to the configuration file are concatenated
               and given as a single argument to the syntax checker.
               Otherwise, OPTION and the configuration file path are
               given as two separate arguments.

          '(option OPTION VARIABLE [FILTERS])'
               This cell is substituted with the value of VARIABLE.
               OPTION is a string containing the option for with to
               specify the value.  FILTER is an optional function to be
               applied to the value of VARIABLE before substitution.
               *Note Option filters::, for a list of built-in option
               filters.

               VARIABLE is a symbol referring to a variable whose value
               to use.  *Note Configuration::, for more information
               about syntax checker configuration.  Define this variable
               with 'flycheck-def-option-var'.

               If VARIABLE is not NIL after applying FILTER, the cell is
               substituted with the OPTION and the value of VARIABLE
               after applying FILTER.  Otherwise the cell is simply
               dropped from the arguments of the syntax checker.

               An OPTION ending with a '=' character is treated like in
               a 'config-file' cell.

          '(eval FORM)'
               This cell is substituted with a result of evaluating
               FORM.  FORM must either return a string or a list of
               strings, or 'nil' to indicate that nothing should be
               substituted for CELL.  In case of other return values an
               error is signaled.  _No_ further substitutions are
               performed, neither in FORM before it is evaluated, nor in
               the result of evaluating FORM.

          This property is mandatory.

     ':error-parser 'PARSER'
          An error parser to use for parsing the output of the syntax
          checker.

          The PARSER is a function symbol.  *Note Error parsers::, for
          more information about error parsers, including a list of
          built-in error parsers.

          Using a error parser is preferred if a syntax checker provides
          a structured output format like XML or JSON. If possible,
          re-use one of the built-in error parsers listed in *note Error
          parsers::

          May not be specified together with ':error-patterns'.

     ':error-patterns '((REGEXP LEVEL)...)'
          A list of one or more error patterns to parse the output of
          ':command'.

          The REGEXP is a regular expression matching a single error or
          warning.  The LEVEL is either 'error' or 'warning' and
          classifies the severity of the matched error message.

          Do not use error patterns if you can use an error parser.

          The REGEXP may provide the following match groups:

          _Group 1_
               The file name.
          _Group 2_
               The line number.
          _Group 3_
               The column number.
          _Group 4_
               The error text.

          Each of these groups is optional, however error messages
          without line numbers will be ignored.  Use explicitly numbered
          groups to make sure that the group numbering is correct.
          *Note (elisp)Regexp Backslash::, for more information about
          regular expression groups.

          The patterns are applied in the order of declaration to the
          whole output of the syntax checker.  Output already matched by
          a pattern will not be matched by subsequent patterns.  In
          other words, the first pattern wins.

          May not be specified together with ':error-parser'.

     ':modes 'MAJOR-MODE'
     ':modes '(MAJOR-MODE...)'
          A single MAJOR-MODE, or a list thereof.

          MAJOR-MODE is a symbol referring to a major mode.  If given
          the syntax checker will only be used in buffers with any of
          the given major modes.

     ':predicate FORM'
          A predicate that determines whether the syntax checker may be
          used.

          FORM is a quoted Emacs Lisp form.  It is evaluated before each
          syntax check to determine whether the syntax checker may be
          used for the current buffer.  If FORM evaluates to nil, the
          syntax checker is not used.

          If :MODES is given, FORM is only evaluated if the major mode
          matches.  Otherwise the syntax checker is not used.

     ':next-checker '(ITEM...)'
          A list of syntax checker to run after this syntax checker.

          Each ITEM is either a single syntax checker symbol, or a cons
          cell '(PREDICATE . CHECKER)'.  Each ITEM is tried on the order
          of declaration.

          If the ITEM is a syntax checker symbol, determine whether it
          is usable and registered (i.e.  contained in
          'flycheck-checkers').  If so start a new syntax check with
          that syntax checker, and merged its results with the results
          of this syntax checker.  If not, try the next ITEM.

          If ITEM is a cons cell, PREDICATE specifies whether to run the
          CHECKER depending on the results of this syntax checker:

          'no-errors'
               The CHECKER is only used if this syntax checker resulted
               in no errors at all.
          'warnings-only'
               The CHECKER is only used if this syntax checker did not
               result in error messages of severity 'error'.

          If the predicate matches, and CHECKER is usable and
          registered, start a new syntax checker with CHECKER and merged
          its results with the results of this syntax checker.  If not,
          try the next ITEM.

          If there is no further ITEM, finish the syntax check.

     At least on of ':modes' and ':predicate' must be present.  If both
     are present, both must match for the syntax checker to be used.

     Either ':error-patterns' or ':error-parser' must be present.  If
     both are present, an error is signaled.

   A syntax checker declared with 'flycheck-declare-checker' is already
suitable for manual checker selection with 'flycheck-select-checker'.
For automatic selection the syntax checker must be registered by adding
it to 'flycheck-checkers'.  *Note Selection::.

 -- Macro: flycheck-def-config-file-var SYMBOL CHECKER &optional
          FILENAME
     Define SYMBOL as configuration file variable for a syntax CHECKER,
     with a default value of FILENAME.

     SYMBOL is declared as customizable, buffer-local variable using
     'defcustom', to provide a configuration file for the given syntax
     CHECKER.  The variable has the customization type 'string', and
     gets a comprehensive docstring, including a reference to CHECKER.

     FILENAME is used as initial value for the variable.  If omitted,
     the initial value is nil.

     Use this macro together with the 'config-file' cell in the command
     of a syntax checker.

 -- Macro: flycheck-def-option-var SYMBOL INITIAL-VALUE CHECKER
          &optional CUSTOM-ARGS
     Define SYMBOL as option variable for a syntax CHECKER, with the
     given INITIAL-VALUE.

     SYMBOL is declared as customizable variable, buffer-local variable
     using 'defcustom', to provide an option for the given syntax
     CHECKER.  SYMBOL gets a comprehensive docstring, including a
     reference to CHECKER.

     CUSTOM-ARGS are forwarded to 'defcustom'.  Declare the
     customization type here.

     Use this macro together with the 'option' cell in the command of a
     syntax checker.


File: flycheck.info,  Node: Error parsers,  Next: Option filters,  Prev: Declaration,  Up: Extending

3.2 Error parsers
=================

Syntax checkers may use more sophisticated error parsing by using the
':error-parser' property.  *Note Declaration::.

   Flycheck provides the following error parsers for use by syntax
checkers:

'flycheck-parse-checkstyle'
     Parse XML output similar to Checkstyle
     (http://checkstyle.sourceforge.net/).

   You may also define your own error parsers.  An error parser is a
function that takes three arguments:

OUTPUT
     The complete output of the syntax checker as string.
CHECKER
     A symbol denoting the executed syntax checker.
BUFFER
     A buffer object referring to the buffer that was syntax-checked.

   The function shall return a list of Flycheck errors.  *Note Error
API::, for more information about Flycheck errors.

   Flycheck provides some utility functions to implement error parsers.
*Note Error parser API::.


File: flycheck.info,  Node: Option filters,  Next: Examples,  Prev: Error parsers,  Up: Extending

3.3 Option filters
==================

Flycheck provides the following built-in option filters for use with the
'option' cell:

'flycheck-option-int'
     An integral option that handles 'nil' correctly (unlike
     'number-to-string').


File: flycheck.info,  Node: Examples,  Prev: Option filters,  Up: Extending

3.4 Examples of syntax checkers
===============================

* Menu:

* Simple example::              How to declare basic syntax checkers
* Predicate example::           How to control syntax checker usage
* Configuration example::       How to configure syntax checkers
* Chaining example::            How to execute more than one syntax checker


File: flycheck.info,  Node: Simple example,  Next: Predicate example,  Prev: Examples,  Up: Examples

3.4.1 Basic syntax checkers
---------------------------

As explained in the previous chapter *note Extending:: a syntax checker
is declared with 'flycheck-declare-checker'.

   We will use this function to declare a syntax checker using the
CodeSniffer utility for the PHP programming language:

     (flycheck-declare-checker php-phpcs
       "A PHP syntax checker using PHP_CodeSniffer.

     See URL `http://pear.php.net/package/PHP_CodeSniffer/'."
       :command '("phpcs" "--report=checkstyle" source)
       :error-parser 'flycheck-parse-checkstyle
       :modes '(php-mode php+-mode))

   First we specify the ':command' to execute.  The first element of the
command list is the name of the executable, 'phpcs' in our case.  This
command is checked for existence with 'executable-find' before using
this syntax checker.  If the command does not exist, the syntax checker
is _not_ used.

   The executable is following by the arguments, in this case some
options and the symbol 'source'.  This symbol is replaced with the file
to check.  This file is a temporary file created in the system temporary
directory and containing the contents of the buffer to check.

   Next we specify how to parse the output of the syntax checker.  PHP
CodeSniffer provides an option to output errors in an XML format similar
to the Java tool Checkstyle, so we use the built-in _error parser_
'flycheck-parse-checkstyle' to parse the output.

   Eventually we enable the syntax checker in PHP editing modes.

   If the syntax checker does not provide any sort of structured output
format, we have to parse the error messages from the textual output.  To
do so, we can use _error patterns_, like in the Pylint syntax checker
for the Python programming language:

     (flycheck-declare-checker python-pylint
       "A Python syntax and style checker using the pylint utility.

     See URL `http://pypi.python.org/pypi/pylint'."
       :command '("epylint" source-inplace)
       :error-patterns
       '(("^\\(?1:.*\\):\\(?2:[0-9]+\\): Warning (W.*): \\(?4:.*\\)$" warning)
         ("^\\(?1:.*\\):\\(?2:[0-9]+\\): Error (E.*): \\(?4:.*\\)$" error)
         ("^\\(?1:.*\\):\\(?2:[0-9]+\\): \\[F\\] \\(?4:.*\\)$" error))
       :modes 'python-mode)

   Again, there is a ':command', however we use the 'source-inplace'
symbol this time.  This symbol causes the temporary file to be created
in the same directory as the original file, making information from the
source code tree available to the syntax checker.  In case of Pylint,
these are the Python packages from the source code tree.

   Next we give the list of _error patterns_ to parse errors.  These
patterns extract the error location and the error message from the
output of 'epylint'.  An error pattern is a list containing a regular
expression with match groups to extract the error information, and an
error level (either 'warning' or 'error').

   Eventually we enable the syntax checker in 'python-mode'.


File: flycheck.info,  Node: Predicate example,  Next: Configuration example,  Prev: Simple example,  Up: Examples

3.4.2 Syntax checkers with predicates
-------------------------------------

In the previous examples the syntax checkers were specific to certain
major modes.  However, this is not always the case.  For instance, GNU
Emacs provides a single mode only for shell scripting in various Shell
languages.  A syntax checker for a specific shell must check whether the
edited shell script is written for the right shell:

     (flycheck-declare-checker zsh
       "A Zsh syntax checker using the zsh executable.

     See URL `http://www.zsh.org/'."
       :command '("zsh" "-n" "-d" "-f" source)
       :error-patterns '(("^\\(?1:.*\\):\\(?2:[0-9]+\\): \\(?4:.*\\)$" error))
       :modes 'sh-mode
       :predicate '(eq sh-shell 'zsh))

   This syntax checker for the Zsh shell is enabled in 'sh-mode' as
specified by ':modes', however it specifies an additional ':predicate'
to determine whether the right shell is in use.  Hence this syntax
checker is only used if a Zsh shell scripting is being edited in
'sh-mode', but not if a Bash or POSIX Shell script is being edited.

   A syntax checker may even go as far as not having ':modes' at all.
For instance, there is no special JSON mode, but syntax checking JSON is
still desirable.  Hence a JSON syntax checker may use the ':predicate'
to check the file extension:

     (flycheck-declare-checker json-jsonlint
       "A JSON syntax and style checker using jsonlint.

     See URL `https://github.com/zaach/jsonlint'."
       :command '("jsonlint" "-c" "-q" source)
       :error-patterns
       '(("^\\(?1:.+\\)\: line \\(?2:[0-9]+\\), col \\(?3:[0-9]+\\), \\(?4:.+\\)$"
          error))
       :predicate '(and buffer-file-name
                        (string= "json" (file-name-extension buffer-file-name)))))

   This syntax checker is now used whenever a file ends with .json,
regardless of the major mode.


File: flycheck.info,  Node: Configuration example,  Next: Chaining example,  Prev: Predicate example,  Up: Examples

3.4.3 Configuration files for syntax checkers
---------------------------------------------

Some syntax checkers can be configured using configuration files given
by an option.  Flycheck provides built-in support to handle such
configuration files:

     (flycheck-def-config-file-var flycheck-jshintrc javascript-jshint ".jshintrc")

     (flycheck-declare-checker javascript-jshint
       "A JavaScript syntax and style checker using jshint.

     See URL `http://www.jshint.com'."
       :command '("jshint" "--checkstyle-reporter"
                  (config-file "--config" flycheck-jshintrc) source)
       :error-parser 'flycheck-parse-checkstyle
       :modes '(js-mode js2-mode js3-mode))

   As you can see, we declare a syntax checker for Javascript, using the
'jshint' utility.  This utility accepts a configuration file via the
'--config' option.

   To use a configuration file with jshint, we first declare the
variable 'flycheck-jshintrc' that provides the name of the file, as
explained in *note Configuration::.

   In the ':command' we use a 'config-file' element to pass the
configuration file to the syntax checker.  If the configuration file is
found, its path will be passed to the syntax checker, using the option
specified after the 'config-file' symbol.  Otherwise the whole element
is simply omitted from the command line.

   Some Syntax checkers can also be configured using options passed on
the command line.  Flycheck supports this case, too.  We will use this
facility to extend the PHP CodeSniffer syntax checker from the *note
Simple example:: with support for coding standards:

     (flycheck-def-option-var flycheck-phpcs-standard nil phpcs
       "The coding standard for PHP CodeSniffer."
       :type '(choice (const :tag "Default standard" nil)
                      (string :tag "Standard name" nil)))
     (put 'flycheck-phpcs-standard 'safe-local-variable #'stringp)

     (flycheck-declare-checker php-phpcs
       "A PHP syntax checker using PHP_CodeSniffer."
       :command '("phpcs" "--report=checkstyle"
                  (option "--standard=" flycheck-phpcs-standard)
                  source)
       :error-parser 'flycheck-parse-checkstyle
       :modes '(php-mode php+-mode))

   The syntax checker is pretty much the same as before, except that a
new element was added to ':command'.  This element passes the value of
the new option variable 'flycheck-phpcs-standard' to the syntax checker.
This variable is declared with the special macro
'flycheck-def-option-var' at the beginning.


File: flycheck.info,  Node: Chaining example,  Prev: Configuration example,  Up: Examples

3.4.4 Chaining syntax checkers
------------------------------

For many languages, more than a single syntax checker is applicable.
For instance, Emacs Lisp can be checked for syntactic corrections with
the byte code compiler, and for adherence to the Emacs Lisp
documentation style using Checkdoc.  PHP, too, can be syntax checked
with the PHP parser, and verified against coding styles using PHP
CodeSniffer.

   To support such cases, syntax checkers can be "chained" using the
':next-checkers'.  The standard PHP syntax checker uses this to run PHP
CodeSniffer if there are no syntax errors:

     (flycheck-declare-checker php
       "A PHP syntax checker using the PHP command line.

     See URL `http://php.net/manual/en/features.commandline.php'."
       :command '("php" "-l" "-d" "error_reporting=E_ALL" "-d" "display_errors=1"
                  "-d" "log_errors=0" source)
       :error-patterns
       '(("\\(?:Parse\\|Fatal\\|syntax\\) error[:,] \\(?4:.*\\) in \\(?1:.*\\) on line \\(?2:[0-9]+\\)"
         error))
       :modes '(php-mode php+-mode)
       :next-checkers '((warnings-only . php-phpcs)))

   Now PHP CodeSniffer will check the coding style, whenever a PHP
syntax check did not result in any errors, if PHP CodeSniffer syntax
checker is usable _and_ registered.


File: flycheck.info,  Node: API,  Next: Contribution,  Prev: Extending,  Up: Top

4 Flycheck API
**************

This chapter provides a brief overview over the Flycheck API.

   You may use this API to extend Flycheck, e.g.  by implementing new
error parsers or more in-depth error analysis.  You will also find this
API helpful if you want to develop Flycheck itself.

   As said this chapter merely provides an overview over the Flycheck
API. The documentation is therefore rather brief.  For a definite
reference on a function or variable, consult its docstring via
'describe-function' and 'describe-variable' respectively.

* Menu:

* Error API::                   How to create and inspect Flycheck errors
* Error parser API::            Utilities for implementing error parsers


File: flycheck.info,  Node: Error API,  Next: Error parser API,  Prev: API,  Up: API

4.1 Error API
=============

Flycheck errors are represented by the structure 'flycheck-error'.
*Note (cl)Structures::, for information about CL structures.

   This structure has the following attributes, each of which may be
nil:

'buffer'
     The buffer object referring to the buffer this error belongs to.

     Note that you do not need to set this attribute when creating
     errors in an error parser.  Flycheck automatically keeps track of
     the buffer itself.

'filename'
     A string containing the filename the error refers to.

'line'
     An integer providing the line the error refers to.

'column'
     An integer providing the column the error refers to.

     If this attribute is nil, Flycheck will assume the error to refer
     to the whole line.

'message'
     The human-readable error message as string.

'level'
     The severity of the error message, as either 'error' or 'warning'.

   The structure has only a single constructor:

 -- Function: flycheck-error-new attributes
     Create a new Flycheck error with the given ATTRIBUTES.

     ATTRIBUTES are given as keyword arguments.

   The following functions are provided to work with errors:

 -- Function: flycheck-error-with-buffer err &optional forms
     Evaluate FORMS with the current buffer set to the buffer of ERR.
     If this buffer is not live, FORMS are not evaluated.

 -- Function: flycheck-error-region err &optional ignore-column
     Get the buffer region referred to by ERR.

     If IGNORE-COLUMN is non-nil, ignore the column attribute of ERR
     when determining the region.

     Return the region as cons cell '(BEG . END)'.

 -- Function: flycheck-error-pos err
     Get the buffer position referred to by ERR.

     This is the position that error navigation would jump to when
     navigating to this error.

   The following functions and variables may be used to analyze the
errors of a syntax check.

 -- Variable: flycheck-current-errors
     This buffer-local variable stores the errors of the last syntax
     check, sorted by line and column number.

 -- Function: flycheck-count-errors errors
     Count the number of errors and warnings in ERRORS.

     Return a cons cell '(NO-ERRORS . NO-WARNINGS)'.

 -- Function: flycheck-has-errors-p errors &optional level
     Determine if there are any ERRORS with the given LEVEL.

     If LEVEL is omitted, determine whether ERRORS is not nil.
     Otherwise determine whether there are any errors whose level is
     equal to the given LEVEL.


File: flycheck.info,  Node: Error parser API,  Prev: Error API,  Up: API

4.2 Error parser API
====================

 -- Function: flycheck-parse-xml-string xml
     Parse an XML string and return the parsed document tree.


File: flycheck.info,  Node: Contribution,  Next: Changes,  Prev: API,  Up: Top

5 Contribution
**************

Flycheck needs your help, in all aspects.  Please

   * report all bugs and issues you can find,
   * tell us your ideas for improvements or new features,
   * and send us your patches and pull requests!

   This chapter helps you in doing so, by giving you guidelines for
contribution.

* Menu:

* Reporting issues::            How to report issues with Flycheck
* Contributing syntax checkers::  How to contribute your syntax checkers
* Contributing code::           How to contribute code
* Unit tests::                  How to write unit tests for your code


File: flycheck.info,  Node: Reporting issues,  Next: Contributing syntax checkers,  Up: Contribution

5.1 Reporting issues
====================

Please report any issues to the Flycheck issue tracker
(https://github.com/lunaryorn/flycheck/issues).

   When doing so, please respect the following guidelines:

   * Check that the issue has not already been reported.
   * Check that the issue has not already been fixed in the latest code.
   * Be clear and precise.  If possible, name functions and command
     exactly.
   * Open an issue with a clear title and description in grammatically
     correct, complete sentences.

   We will try to handle each issue appropriately, and adhering to these
guidelines helps us in doing so.


File: flycheck.info,  Node: Contributing syntax checkers,  Next: Contributing code,  Prev: Reporting issues,  Up: Contribution

5.2 Contributing syntax checkers
================================

When creating a new syntax checker, either create an issue (see *note
Reporting issues::) and paste your syntax checker declaration, or fork
the repository, implement the syntax checker in Flycheck itself and send
us a pull request (see *note Contributing code::).

   Whatever way you choose, please respect the following guidelines:

   * Provide a link to the website of the syntax checker tool.
   * Show some example source code that triggered warnings or errors
     with the syntax checker tool.
   * If possible, please add unit tests for your new syntax checker.
     *Note Unit tests::.


File: flycheck.info,  Node: Contributing code,  Next: Unit tests,  Prev: Contributing syntax checkers,  Up: Contribution

5.3 Contributing code
=====================

Please contribute patches to Flycheck as pull requests on Github.

   When doing so, please respect the following guidelines:

   * Read how to properly contribute to open source projects on Github
     (http://gun.io/blog/how-to-github-fork-branch-and-pull-request).
   * Use a topic branch to easily amend a pull request later, if
     necessary.
   * Write good commit messages
     (http://gun.io/blog/how-to-github-fork-branch-and-pull-request).
   * Use the same coding style and spacing.
   * Verify your Emacs Lisp code with 'checkdoc' ('C-c ? d').
   * Add unit tests for your code, if possible.  *Note Unit tests::.
   * Open a pull request
     (https://help.github.com/articles/using-pull-requests) that relates
     to but one subject with a clear title and description in
     grammatically correct, complete sentences.  Be sure to give use
     cases and rationale for your new feature.

   We will try to respect and include each contribution, however we will
not do the following:

   * Include a feature without good use cases and rationale.
   * Merge poorly written or incomplete code.

You will be asked to improve your pull request in these cases.


File: flycheck.info,  Node: Unit tests,  Prev: Contributing code,  Up: Contribution

5.4 Writing unit tests
======================

Flycheck has a comprehensive to maintain and ensure the functionality
and quality of the code.  Please add unit tests for your code if
possible.

   The test suite is contained in the 'tests/' directory and written
using the *note ERT: (ert)Top. library.

   To add unit tests do the following:

   * Familiarize yourself with the *note ERT: (ert)Top. library.
   * Familiarize yourself with the test suite in
     'flycheck-testsuite.el'.
   * Add your tests to the appropriate file.  Create a new test file if
     necessary.
   * Extend the provisioning script 'vagrant/provision.sh' with the
     dependencies of your tests, if necessary.  This includes syntax
     checker tools.
   * Install Virtual Box (https://www.virtualbox.org/) and Vagrant
     (http://www.vagrantup.com/).
   * Run your tests with 'make virtual-test'.

   You may also run the tests locally during development.  To do so:
   * Install Carton (https://github.com/rejeep/carton).
   * Setup your development environment with 'carton install'.
   * Run the tests with 'tests/run.sh'.  Use 'tests/run.sh flake8' to
     run only tests whose names contain the string 'flake8'.


File: flycheck.info,  Node: Changes,  Next: Credits,  Prev: Contribution,  Up: Top

Appendix A Changes
******************

This appendix provides a comprehensive changelog of all releases:

* Menu:

* master        :: unreleased
* 0.9           :: Apr 13, 2013
* 0.8           :: Apr 09, 2013
* 0.7.1         :: Feb 23, 2013
* 0.7           :: Feb 14, 2013
* 0.6.1         :: Jan 30, 2013
* 0.6           :: Jan 29, 2013
* 0.5           :: Dec 28, 2012
* 0.4           :: Nov 21, 2012
* 0.3           :: Oct 20, 2012
* 0.2           :: Oct 15, 2012
* 0.1           :: Oct 11, 2012


File: flycheck.info,  Node: 0.1,  Next: 0.2,  Up: Changes

0.1 (Oct 11, 2012)
==================

Initial release as flymake-checkers

   * New syntax checkers

        * TeX/LaTeX
        * Shell scripts
        * Python
        * Ruby
        * Coffeescript
        * Emacs Lisp


File: flycheck.info,  Node: 0.2,  Next: 0.3,  Prev: 0.1,  Up: Changes

0.2 (Oct 15, 2012)
==================

   * New syntax checkers

        * PHP

   * API changes

        * Simplify syntax checker declarations
          (https://github.com/lunaryorn/flycheck/issues/2)


File: flycheck.info,  Node: 0.3,  Next: 0.4,  Prev: 0.2,  Up: Changes

0.3 (Oct 20, 2012)
==================

   * Replace 'flymake-mode' with a custom syntax checking minor mode
     (https://github.com/lunaryorn/flycheck/issues/4)


File: flycheck.info,  Node: 0.4,  Next: 0.5,  Prev: 0.3,  Up: Changes

0.4 (Nov 21, 2012)
==================

   * Rename the project to Flycheck
     (https://github.com/lunaryorn/flycheck/issues/5)
   * New syntax checkers

        * HAML (https://github.com/lunaryorn/flycheck/issues/9)
        * CSS (https://github.com/lunaryorn/flycheck/issues/9)
        * Javascript with 'jsl'
          (https://github.com/lunaryorn/flycheck/issues/9)
        * Javascript with 'jshint'
          (https://github.com/lunaryorn/flycheck/issues/16)
        * JSON (https://github.com/lunaryorn/flycheck/issues/12)
        * LaTeX with 'lacheck'

   * Bug fixes
        * Fix type error when checking compressed Emacs Lisp
          (https://github.com/lunaryorn/flycheck/issues/10)


File: flycheck.info,  Node: 0.5,  Next: 0.6,  Prev: 0.4,  Up: Changes

0.5 (Dec 28, 2012)
==================

   * New syntax checkers:

        * SASS (https://github.com/lunaryorn/flycheck/issues/15)
        * Perl (https://github.com/lunaryorn/flycheck/issues/21)
        * XML
        * Lua (https://github.com/lunaryorn/flycheck/issues/30)

   * New features:

        * Support manual buffer-local selection of syntax checker
          (https://github.com/lunaryorn/flycheck/issues/25)
        * Add customizable error indicators
          (https://github.com/lunaryorn/flycheck/issues/28)
        * Echo error messages at point without 3rd-party libraries like
          flymake-cursor
          (https://github.com/lunaryorn/flycheck/issues/27)

   * Improvements:

        * Remember the last automatically selected syntax checker
          (https://github.com/lunaryorn/flycheck/issues/24)

   * Bug fixes:

        * Fix syntax checking of buffers without backing files
          (https://github.com/lunaryorn/flycheck/issues/19)

   * API changes:

        * Replace underlying Flymake API with a custom syntax checking
          implementation
          (https://github.com/lunaryorn/flycheck/issues/15)


File: flycheck.info,  Node: 0.6,  Next: 0.6.1,  Prev: 0.5,  Up: Changes

0.6 (Jan 29, 2013)
==================

   * New syntax checkers:

        * Emacs Lisp with 'checkdoc-current-buffer'
          (https://github.com/lunaryorn/flycheck/issues/53)
        * PHP with PHP CodeSniffer
          (https://github.com/lunaryorn/flycheck/issues/72)

   * Removed syntax checkers:

        * Javascript with 'jsl'

   * New features:

        * Error navigation with 'next-error' and 'previous-error'
          (https://github.com/lunaryorn/flycheck/issues/26)
        * Fringe icons instead of error indicators
          (https://github.com/lunaryorn/flycheck/issues/33)
        * Menu entry for Flycheck
          (https://github.com/lunaryorn/flycheck/issues/59)
        * Customizable error highlighting, taking the column number into
          account (https://github.com/lunaryorn/flycheck/issues/35)
        * Configuration files for syntax checkers
        * Add configuration file support to the syntax checkers
          'coffee-coffeelint', 'html-tidy', 'javascript-jshint',
          'pyton-flake8' and 'tex-chktex'
        * Allow to compile a buffer with a syntax checker for testing
          purposes (https://github.com/lunaryorn/flycheck/issues/58)
        * Use multiple syntax checkers during a syntax check
          (https://github.com/lunaryorn/flycheck/issues/31)
        * Add dedicated help for syntax checkers
          (https://github.com/lunaryorn/flycheck/issues/52)

   * Improvements:

        * Match error patterns in order of declaration
          (https://github.com/lunaryorn/flycheck/issues/55)

   * Bug fixes:

        * Inherit highlighting faces from built-in faces
          (https://github.com/lunaryorn/flycheck/issues/24)
        * Correct error patterns of the HTML syntax checker
          (https://github.com/lunaryorn/flycheck/issues/36)
        * Detect syntax errors in the 'python-flake8' syntax checker
          (https://github.com/lunaryorn/flycheck/issues/42)
        * Fix various regressions after introducing unit tests
        * Inhibit syntax checking during package installation
          (https://github.com/lunaryorn/flycheck/issues/45)
        * Disable syntax checking in Tramp buffers
          (https://github.com/lunaryorn/flycheck/issues/54)
        * Preserve whitespace in error messages
          (https://github.com/lunaryorn/flycheck/issues/65)

   * API changes:
        * Replace syntax checker variables with syntax checker
          declarations (https://github.com/lunaryorn/flycheck/issues/41)
        * Support parsing errors with arbitrary functions instead of
          error patterns
          (https://github.com/lunaryorn/flycheck/issues/38)
        * Add an error parser for Checkstyle-like XML output
          (https://github.com/lunaryorn/flycheck/issues/38)


File: flycheck.info,  Node: 0.6.1,  Next: 0.7,  Prev: 0.6,  Up: Changes

0.6.1 (Jan 30, 2013)
====================

   * Fix package dependencies


File: flycheck.info,  Node: 0.7,  Next: 0.7.1,  Prev: 0.6.1,  Up: Changes

0.7 (Feb 14, 2013)
==================

   * New features:

        * Navigate to source of syntax checker declarations from syntax
          checker help
        * Add online Info manual
          (https://github.com/lunaryorn/flycheck/issues/60)

   * Improvements:

        * Use pipes instead of TTYs to read output from syntax checkers
        * Defer syntax checks for invisible buffers
          (https://github.com/lunaryorn/flycheck/issues/80)
        * Immediately display error messages after error navigation
          (https://github.com/lunaryorn/flycheck/issues/62)

   * Bug fixes:

        * Never select deleted buffers
        * Do not let the debugger interfere with necessary cleanup
          actions
        * Do not attempt to parse empty XML trees
          (https://github.com/lunaryorn/flycheck/issues/78)
        * Fix infinite recursion on Windows
          (https://github.com/lunaryorn/flycheck/issues/81)


File: flycheck.info,  Node: 0.7.1,  Next: 0.8,  Prev: 0.7,  Up: Changes

0.7.1 (Feb 23, 2013)
====================

   * Bug fixes:

        * Do not signal errors from 'flycheck-mode'
          (https://github.com/lunaryorn/flycheck/issues/87)
        * Correctly fall back to 'HOME' when searching configuration
          files
        * Correctly ascend to parent directory when searching
          configuration files

   * API changes:

        * Rename 'config' cell to 'config-file'
        * Allow to pass the result of 'config-file' cells as single
          argument
        * Add support for evaluating Lisp forms in syntax checker
          commands (https://github.com/lunaryorn/flycheck/issues/86)


File: flycheck.info,  Node: 0.8,  Next: 0.9,  Prev: 0.7.1,  Up: Changes

0.8 (Apr 9, 2013)
=================

   * New syntax checkers:

        * Go using 'gofmt'
          (https://github.com/lunaryorn/flycheck/issues/91)
        * Rust using 'rustc'
          (https://github.com/lunaryorn/flycheck/issues/101)

   * New features:

        * Add a global Flycheck mode
          (https://github.com/lunaryorn/flycheck/issues/29).
          '(global-flycheck-mode)' is now the recommended way to enable
          Flycheck
        * Add support for syntax checker options
          (https://github.com/lunaryorn/flycheck/issues/72)
        * Add option for the coding standard used by the 'php-phpcs'
          syntax checker
        * Add options for the maximum McCabe complexity and the maximum
          line length to 'python-flake8'

   * Improvements:

        * Support McCabe warnings in 'python-flake8'
        * Support warnings from 'flake8' 2
        * Show long error messages in a popup buffer
          (https://github.com/lunaryorn/flycheck/issues/94)
        * Show all error messages at point
          (https://github.com/lunaryorn/flycheck/issues/96)
        * Add support for naming warings from 'flake8' 2
          (https://github.com/lunaryorn/flycheck/issues/98)
        * Flycheck mode is not longer enabled for buffers whose names
          start with a space
        * Improve highlighting to reduce screen flickering
          (https://github.com/lunaryorn/flycheck/issues/100)


File: flycheck.info,  Node: 0.9,  Next: master,  Prev: 0.8,  Up: Changes

0.9 (Apr 13, 2013)
==================

   * New syntax checkers:

        * SCSS using 'scss'
          (https://github.com/lunaryorn/flycheck/issues/103)
        * RST (ReStructuredText) using Docutils
        * Go using 'go build' and 'go test'
          (https://github.com/lunaryorn/flycheck/issues/107)

   * Improvements:

        * Quit the error message window when navigating away from error
          locations


File: flycheck.info,  Node: master,  Prev: 0.9,  Up: Changes

master (unreleased)
===================

Flycheck uses *note cl-lib: (cl)Top. now.  This library is built-in as
of GNU Emacs 24.3.  For earlier releases of GNU Emacs 24 an additional
compatibility library will be installed from GNU ELPA.

   * Improvements:

        * Call option filters for 'nil' values, too


File: flycheck.info,  Node: Credits,  Next: GNU Free Documentation License,  Prev: Changes,  Up: Top

Appendix B Credits
******************

The following people contributed to Flycheck.  Their help and ideas,
their support and patches are greatly appreciated.

   * Bozhidar Batsov (https://github.com/bbatsov) provided valuable
     feedback and refinements, and brought Flycheck to a larger user
     base by adding it to his awesome Prelude project
     (https://github.com/bbatsov/prelude).

   * Damon Haley (https://github.com/dhaley) helped to shape and test
     the PHP CodeSniffer checker.

   * Jimmy Yuen Ho Wong (https://github.com/wyuenho) added the HTML
     syntax checker and the jshint Javascript checker, and did valuable
     testing and bug fixing.

   * Krzysztof Witkowski (https://github.com/kwitek) implemented 'eval'
     support in Flycheck commands.

   * Magnar Sveen (https://github.com/magnars/) developed the awesome
     dash.el (https://github.com/magnars/dash.el) and s.el
     (https://github.com/magnars/s.el) libraries, that drive
     considerable parts of Flycheck's internals.

   * Marian Schubert (https://github.com/maio) added the Perl syntax
     checker.

   * Martin Grenfell (https://github.com/scrooloose) created the awesome
     Vim library syntastic (https://github.com/scrooloose/syntastic)
     which inspired this project and many of its checkers.

   * Peter Vasil (https://github.com/ptrv) contributed syntax checkers
     for XML, Lua and Go (using 'go build' and 'go test'), added unit
     tests and did valuable testing.

   * Robert Zaremba (https://github.com/robert-zaremba) added Go syntax
     checker using 'gofmt'.

   * steckerhalter (https://github.com/steckerhalter) provided the PHP
     CodeSniffer checker.

   * Steve Purcell (https://github.com/purcell) implemented many
     checkers, contributed important ideas to the design of the checker
     API and engaged in worthwhile discussion to shape this project.

   * Yannick Roehlly (https://github.com/yannick1974) added support for
     PEP8 naming errors to the Flake8 syntax checker.

   * Victor Deryagin (https://github.com/vderyagin) added the Rust
     syntax checker.

   Of course we also need to thank *note GNU Flymake: (flymake)Top, the
first, respectable, though somewhat failed attempt at on-the-fly syntax
checking.


File: flycheck.info,  Node: GNU Free Documentation License,  Next: Syntax checkers,  Prev: Credits,  Up: Top

Appendix C GNU Free Documentation License
*****************************************

                     Version 1.3, 3 November 2008

     Copyright (C) 2000, 2001, 2002, 2007, 2008 Free Software Foundation, Inc.
     <http://fsf.org/>

     Everyone is permitted to copy and distribute verbatim copies
     of this license document, but changing it is not allowed.

  0. PREAMBLE

     The purpose of this License is to make a manual, textbook, or other
     functional and useful document "free" in the sense of freedom: to
     assure everyone the effective freedom to copy and redistribute it,
     with or without modifying it, either commercially or
     noncommercially.  Secondarily, this License preserves for the
     author and publisher a way to get credit for their work, while not
     being considered responsible for modifications made by others.

     This License is a kind of "copyleft", which means that derivative
     works of the document must themselves be free in the same sense.
     It complements the GNU General Public License, which is a copyleft
     license designed for free software.

     We have designed this License in order to use it for manuals for
     free software, because free software needs free documentation: a
     free program should come with manuals providing the same freedoms
     that the software does.  But this License is not limited to
     software manuals; it can be used for any textual work, regardless
     of subject matter or whether it is published as a printed book.  We
     recommend this License principally for works whose purpose is
     instruction or reference.

  1. APPLICABILITY AND DEFINITIONS

     This License applies to any manual or other work, in any medium,
     that contains a notice placed by the copyright holder saying it can
     be distributed under the terms of this License.  Such a notice
     grants a world-wide, royalty-free license, unlimited in duration,
     to use that work under the conditions stated herein.  The
     "Document", below, refers to any such manual or work.  Any member
     of the public is a licensee, and is addressed as "you".  You accept
     the license if you copy, modify or distribute the work in a way
     requiring permission under copyright law.

     A "Modified Version" of the Document means any work containing the
     Document or a portion of it, either copied verbatim, or with
     modifications and/or translated into another language.

     A "Secondary Section" is a named appendix or a front-matter section
     of the Document that deals exclusively with the relationship of the
     publishers or authors of the Document to the Document's overall
     subject (or to related matters) and contains nothing that could
     fall directly within that overall subject.  (Thus, if the Document
     is in part a textbook of mathematics, a Secondary Section may not
     explain any mathematics.)  The relationship could be a matter of
     historical connection with the subject or with related matters, or
     of legal, commercial, philosophical, ethical or political position
     regarding them.

     The "Invariant Sections" are certain Secondary Sections whose
     titles are designated, as being those of Invariant Sections, in the
     notice that says that the Document is released under this License.
     If a section does not fit the above definition of Secondary then it
     is not allowed to be designated as Invariant.  The Document may
     contain zero Invariant Sections.  If the Document does not identify
     any Invariant Sections then there are none.

     The "Cover Texts" are certain short passages of text that are
     listed, as Front-Cover Texts or Back-Cover Texts, in the notice
     that says that the Document is released under this License.  A
     Front-Cover Text may be at most 5 words, and a Back-Cover Text may
     be at most 25 words.

     A "Transparent" copy of the Document means a machine-readable copy,
     represented in a format whose specification is available to the
     general public, that is suitable for revising the document
     straightforwardly with generic text editors or (for images composed
     of pixels) generic paint programs or (for drawings) some widely
     available drawing editor, and that is suitable for input to text
     formatters or for automatic translation to a variety of formats
     suitable for input to text formatters.  A copy made in an otherwise
     Transparent file format whose markup, or absence of markup, has
     been arranged to thwart or discourage subsequent modification by
     readers is not Transparent.  An image format is not Transparent if
     used for any substantial amount of text.  A copy that is not
     "Transparent" is called "Opaque".

     Examples of suitable formats for Transparent copies include plain
     ASCII without markup, Texinfo input format, LaTeX input format,
     SGML or XML using a publicly available DTD, and standard-conforming
     simple HTML, PostScript or PDF designed for human modification.
     Examples of transparent image formats include PNG, XCF and JPG.
     Opaque formats include proprietary formats that can be read and
     edited only by proprietary word processors, SGML or XML for which
     the DTD and/or processing tools are not generally available, and
     the machine-generated HTML, PostScript or PDF produced by some word
     processors for output purposes only.

     The "Title Page" means, for a printed book, the title page itself,
     plus such following pages as are needed to hold, legibly, the
     material this License requires to appear in the title page.  For
     works in formats which do not have any title page as such, "Title
     Page" means the text near the most prominent appearance of the
     work's title, preceding the beginning of the body of the text.

     The "publisher" means any person or entity that distributes copies
     of the Document to the public.

     A section "Entitled XYZ" means a named subunit of the Document
     whose title either is precisely XYZ or contains XYZ in parentheses
     following text that translates XYZ in another language.  (Here XYZ
     stands for a specific section name mentioned below, such as
     "Acknowledgements", "Dedications", "Endorsements", or "History".)
     To "Preserve the Title" of such a section when you modify the
     Document means that it remains a section "Entitled XYZ" according
     to this definition.

     The Document may include Warranty Disclaimers next to the notice
     which states that this License applies to the Document.  These
     Warranty Disclaimers are considered to be included by reference in
     this License, but only as regards disclaiming warranties: any other
     implication that these Warranty Disclaimers may have is void and
     has no effect on the meaning of this License.

  2. VERBATIM COPYING

     You may copy and distribute the Document in any medium, either
     commercially or noncommercially, provided that this License, the
     copyright notices, and the license notice saying this License
     applies to the Document are reproduced in all copies, and that you
     add no other conditions whatsoever to those of this License.  You
     may not use technical measures to obstruct or control the reading
     or further copying of the copies you make or distribute.  However,
     you may accept compensation in exchange for copies.  If you
     distribute a large enough number of copies you must also follow the
     conditions in section 3.

     You may also lend copies, under the same conditions stated above,
     and you may publicly display copies.

  3. COPYING IN QUANTITY

     If you publish printed copies (or copies in media that commonly
     have printed covers) of the Document, numbering more than 100, and
     the Document's license notice requires Cover Texts, you must
     enclose the copies in covers that carry, clearly and legibly, all
     these Cover Texts: Front-Cover Texts on the front cover, and
     Back-Cover Texts on the back cover.  Both covers must also clearly
     and legibly identify you as the publisher of these copies.  The
     front cover must present the full title with all words of the title
     equally prominent and visible.  You may add other material on the
     covers in addition.  Copying with changes limited to the covers, as
     long as they preserve the title of the Document and satisfy these
     conditions, can be treated as verbatim copying in other respects.

     If the required texts for either cover are too voluminous to fit
     legibly, you should put the first ones listed (as many as fit
     reasonably) on the actual cover, and continue the rest onto
     adjacent pages.

     If you publish or distribute Opaque copies of the Document
     numbering more than 100, you must either include a machine-readable
     Transparent copy along with each Opaque copy, or state in or with
     each Opaque copy a computer-network location from which the general
     network-using public has access to download using public-standard
     network protocols a complete Transparent copy of the Document, free
     of added material.  If you use the latter option, you must take
     reasonably prudent steps, when you begin distribution of Opaque
     copies in quantity, to ensure that this Transparent copy will
     remain thus accessible at the stated location until at least one
     year after the last time you distribute an Opaque copy (directly or
     through your agents or retailers) of that edition to the public.

     It is requested, but not required, that you contact the authors of
     the Document well before redistributing any large number of copies,
     to give them a chance to provide you with an updated version of the
     Document.

  4. MODIFICATIONS

     You may copy and distribute a Modified Version of the Document
     under the conditions of sections 2 and 3 above, provided that you
     release the Modified Version under precisely this License, with the
     Modified Version filling the role of the Document, thus licensing
     distribution and modification of the Modified Version to whoever
     possesses a copy of it.  In addition, you must do these things in
     the Modified Version:

       A. Use in the Title Page (and on the covers, if any) a title
          distinct from that of the Document, and from those of previous
          versions (which should, if there were any, be listed in the
          History section of the Document).  You may use the same title
          as a previous version if the original publisher of that
          version gives permission.

       B. List on the Title Page, as authors, one or more persons or
          entities responsible for authorship of the modifications in
          the Modified Version, together with at least five of the
          principal authors of the Document (all of its principal
          authors, if it has fewer than five), unless they release you
          from this requirement.

       C. State on the Title page the name of the publisher of the
          Modified Version, as the publisher.

       D. Preserve all the copyright notices of the Document.

       E. Add an appropriate copyright notice for your modifications
          adjacent to the other copyright notices.

       F. Include, immediately after the copyright notices, a license
          notice giving the public permission to use the Modified
          Version under the terms of this License, in the form shown in
          the Addendum below.

       G. Preserve in that license notice the full lists of Invariant
          Sections and required Cover Texts given in the Document's
          license notice.

       H. Include an unaltered copy of this License.

       I. Preserve the section Entitled "History", Preserve its Title,
          and add to it an item stating at least the title, year, new
          authors, and publisher of the Modified Version as given on the
          Title Page.  If there is no section Entitled "History" in the
          Document, create one stating the title, year, authors, and
          publisher of the Document as given on its Title Page, then add
          an item describing the Modified Version as stated in the
          previous sentence.

       J. Preserve the network location, if any, given in the Document
          for public access to a Transparent copy of the Document, and
          likewise the network locations given in the Document for
          previous versions it was based on.  These may be placed in the
          "History" section.  You may omit a network location for a work
          that was published at least four years before the Document
          itself, or if the original publisher of the version it refers
          to gives permission.

       K. For any section Entitled "Acknowledgements" or "Dedications",
          Preserve the Title of the section, and preserve in the section
          all the substance and tone of each of the contributor
          acknowledgements and/or dedications given therein.

       L. Preserve all the Invariant Sections of the Document, unaltered
          in their text and in their titles.  Section numbers or the
          equivalent are not considered part of the section titles.

       M. Delete any section Entitled "Endorsements".  Such a section
          may not be included in the Modified Version.

       N. Do not retitle any existing section to be Entitled
          "Endorsements" or to conflict in title with any Invariant
          Section.

       O. Preserve any Warranty Disclaimers.

     If the Modified Version includes new front-matter sections or
     appendices that qualify as Secondary Sections and contain no
     material copied from the Document, you may at your option designate
     some or all of these sections as invariant.  To do this, add their
     titles to the list of Invariant Sections in the Modified Version's
     license notice.  These titles must be distinct from any other
     section titles.

     You may add a section Entitled "Endorsements", provided it contains
     nothing but endorsements of your Modified Version by various
     parties--for example, statements of peer review or that the text
     has been approved by an organization as the authoritative
     definition of a standard.

     You may add a passage of up to five words as a Front-Cover Text,
     and a passage of up to 25 words as a Back-Cover Text, to the end of
     the list of Cover Texts in the Modified Version.  Only one passage
     of Front-Cover Text and one of Back-Cover Text may be added by (or
     through arrangements made by) any one entity.  If the Document
     already includes a cover text for the same cover, previously added
     by you or by arrangement made by the same entity you are acting on
     behalf of, you may not add another; but you may replace the old
     one, on explicit permission from the previous publisher that added
     the old one.

     The author(s) and publisher(s) of the Document do not by this
     License give permission to use their names for publicity for or to
     assert or imply endorsement of any Modified Version.

  5. COMBINING DOCUMENTS

     You may combine the Document with other documents released under
     this License, under the terms defined in section 4 above for
     modified versions, provided that you include in the combination all
     of the Invariant Sections of all of the original documents,
     unmodified, and list them all as Invariant Sections of your
     combined work in its license notice, and that you preserve all
     their Warranty Disclaimers.

     The combined work need only contain one copy of this License, and
     multiple identical Invariant Sections may be replaced with a single
     copy.  If there are multiple Invariant Sections with the same name
     but different contents, make the title of each such section unique
     by adding at the end of it, in parentheses, the name of the
     original author or publisher of that section if known, or else a
     unique number.  Make the same adjustment to the section titles in
     the list of Invariant Sections in the license notice of the
     combined work.

     In the combination, you must combine any sections Entitled
     "History" in the various original documents, forming one section
     Entitled "History"; likewise combine any sections Entitled
     "Acknowledgements", and any sections Entitled "Dedications".  You
     must delete all sections Entitled "Endorsements."

  6. COLLECTIONS OF DOCUMENTS

     You may make a collection consisting of the Document and other
     documents released under this License, and replace the individual
     copies of this License in the various documents with a single copy
     that is included in the collection, provided that you follow the
     rules of this License for verbatim copying of each of the documents
     in all other respects.

     You may extract a single document from such a collection, and
     distribute it individually under this License, provided you insert
     a copy of this License into the extracted document, and follow this
     License in all other respects regarding verbatim copying of that
     document.

  7. AGGREGATION WITH INDEPENDENT WORKS

     A compilation of the Document or its derivatives with other
     separate and independent documents or works, in or on a volume of a
     storage or distribution medium, is called an "aggregate" if the
     copyright resulting from the compilation is not used to limit the
     legal rights of the compilation's users beyond what the individual
     works permit.  When the Document is included in an aggregate, this
     License does not apply to the other works in the aggregate which
     are not themselves derivative works of the Document.

     If the Cover Text requirement of section 3 is applicable to these
     copies of the Document, then if the Document is less than one half
     of the entire aggregate, the Document's Cover Texts may be placed
     on covers that bracket the Document within the aggregate, or the
     electronic equivalent of covers if the Document is in electronic
     form.  Otherwise they must appear on printed covers that bracket
     the whole aggregate.

  8. TRANSLATION

     Translation is considered a kind of modification, so you may
     distribute translations of the Document under the terms of section
     4.  Replacing Invariant Sections with translations requires special
     permission from their copyright holders, but you may include
     translations of some or all Invariant Sections in addition to the
     original versions of these Invariant Sections.  You may include a
     translation of this License, and all the license notices in the
     Document, and any Warranty Disclaimers, provided that you also
     include the original English version of this License and the
     original versions of those notices and disclaimers.  In case of a
     disagreement between the translation and the original version of
     this License or a notice or disclaimer, the original version will
     prevail.

     If a section in the Document is Entitled "Acknowledgements",
     "Dedications", or "History", the requirement (section 4) to
     Preserve its Title (section 1) will typically require changing the
     actual title.

  9. TERMINATION

     You may not copy, modify, sublicense, or distribute the Document
     except as expressly provided under this License.  Any attempt
     otherwise to copy, modify, sublicense, or distribute it is void,
     and will automatically terminate your rights under this License.

     However, if you cease all violation of this License, then your
     license from a particular copyright holder is reinstated (a)
     provisionally, unless and until the copyright holder explicitly and
     finally terminates your license, and (b) permanently, if the
     copyright holder fails to notify you of the violation by some
     reasonable means prior to 60 days after the cessation.

     Moreover, your license from a particular copyright holder is
     reinstated permanently if the copyright holder notifies you of the
     violation by some reasonable means, this is the first time you have
     received notice of violation of this License (for any work) from
     that copyright holder, and you cure the violation prior to 30 days
     after your receipt of the notice.

     Termination of your rights under this section does not terminate
     the licenses of parties who have received copies or rights from you
     under this License.  If your rights have been terminated and not
     permanently reinstated, receipt of a copy of some or all of the
     same material does not give you any rights to use it.

  10. FUTURE REVISIONS OF THIS LICENSE

     The Free Software Foundation may publish new, revised versions of
     the GNU Free Documentation License from time to time.  Such new
     versions will be similar in spirit to the present version, but may
     differ in detail to address new problems or concerns.  See
     <http://www.gnu.org/copyleft/>.

     Each version of the License is given a distinguishing version
     number.  If the Document specifies that a particular numbered
     version of this License "or any later version" applies to it, you
     have the option of following the terms and conditions either of
     that specified version or of any later version that has been
     published (not as a draft) by the Free Software Foundation.  If the
     Document does not specify a version number of this License, you may
     choose any version ever published (not as a draft) by the Free
     Software Foundation.  If the Document specifies that a proxy can
     decide which future versions of this License can be used, that
     proxy's public statement of acceptance of a version permanently
     authorizes you to choose that version for the Document.

  11. RELICENSING

     "Massive Multiauthor Collaboration Site" (or "MMC Site") means any
     World Wide Web server that publishes copyrightable works and also
     provides prominent facilities for anybody to edit those works.  A
     public wiki that anybody can edit is an example of such a server.
     A "Massive Multiauthor Collaboration" (or "MMC") contained in the
     site means any set of copyrightable works thus published on the MMC
     site.

     "CC-BY-SA" means the Creative Commons Attribution-Share Alike 3.0
     license published by Creative Commons Corporation, a not-for-profit
     corporation with a principal place of business in San Francisco,
     California, as well as future copyleft versions of that license
     published by that same organization.

     "Incorporate" means to publish or republish a Document, in whole or
     in part, as part of another Document.

     An MMC is "eligible for relicensing" if it is licensed under this
     License, and if all works that were first published under this
     License somewhere other than this MMC, and subsequently
     incorporated in whole or in part into the MMC, (1) had no cover
     texts or invariant sections, and (2) were thus incorporated prior
     to November 1, 2008.

     The operator of an MMC Site may republish an MMC contained in the
     site under CC-BY-SA on the same site at any time before August 1,
     2009, provided the MMC is eligible for relicensing.

ADDENDUM: How to use this License for your documents
====================================================

To use this License in a document you have written, include a copy of
the License in the document and put the following copyright and license
notices just after the title page:

       Copyright (C)  YEAR  YOUR NAME.
       Permission is granted to copy, distribute and/or modify this document
       under the terms of the GNU Free Documentation License, Version 1.3
       or any later version published by the Free Software Foundation;
       with no Invariant Sections, no Front-Cover Texts, and no Back-Cover
       Texts.  A copy of the license is included in the section entitled ``GNU
       Free Documentation License''.

   If you have Invariant Sections, Front-Cover Texts and Back-Cover
Texts, replace the "with...Texts." line with this:

         with the Invariant Sections being LIST THEIR TITLES, with
         the Front-Cover Texts being LIST, and with the Back-Cover Texts
         being LIST.

   If you have Invariant Sections without Cover Texts, or some other
combination of the three, merge those two alternatives to suit the
situation.

   If your document contains nontrivial examples of program code, we
recommend releasing these examples in parallel under your choice of free
software license, such as the GNU General Public License, to permit
their use in free software.


File: flycheck.info,  Node: Syntax checkers,  Next: Function and Variable Index,  Prev: GNU Free Documentation License,  Up: Top

Appendix D Available syntax checkers
************************************

The following syntax checkers are included in Flycheck, listed in the
order of their appearance in the default value of 'flycheck-checkers':

   * 'bash'
   * 'coffee-coffeelint'
   * 'css-csslint'
   * 'emacs-lisp'
   * 'emacs-lisp-checkdoc'
   * 'go-gofmt'
   * 'go-build'
   * 'go-test'
   * 'haml'
   * 'html-tidy'
   * 'javascript-jshint'
   * 'json-jsonlint'
   * 'lua'
   * 'perl'
   * 'php'
   * 'php-phpcs'
   * 'python-flake8'
   * 'python-pylint'
   * 'python-pyflakes'
   * 'rst'
   * 'ruby'
   * 'rust-rustc'
   * 'sass'
   * 'scss'
   * 'sh'
   * 'tex-chktex'
   * 'tex-lacheck'
   * 'xml-xmlstarlet'
   * 'zsh'

   Use 'M-x flycheck-describe-checker' in this buffer to get help for
the syntax checker under point.


File: flycheck.info,  Node: Function and Variable Index,  Prev: Syntax checkers,  Up: Top

Function and Variable Index
***************************

 [index ]
* Menu:

* flycheck-after-syntax-check-hook:      Syntax checking.     (line  27)
* flycheck-buffer:                       Syntax checking.     (line  15)
* flycheck-checker:                      Selection.           (line  41)
* flycheck-checkers:                     Selection.           (line   9)
* flycheck-chktexrc:                     Configuration.       (line  25)
* flycheck-clear:                        Reporting.           (line  54)
* flycheck-coffeelintrc:                 Configuration.       (line  28)
* flycheck-count-errors:                 Error API.           (line  71)
* flycheck-current-errors:               Error API.           (line  67)
* flycheck-declare-checker:              Declaration.         (line   8)
* flycheck-def-config-file-var:          Declaration.         (line 217)
* flycheck-def-option-var:               Declaration.         (line 233)
* flycheck-describe-checker:             Selection.           (line  70)
* flycheck-error-face:                   Reporting.           (line  14)
* flycheck-error-new:                    Error API.           (line  39)
* flycheck-error-pos:                    Error API.           (line  58)
* flycheck-error-region:                 Error API.           (line  50)
* flycheck-error-with-buffer:            Error API.           (line  46)
* flycheck-flake8-maximum-complexity:    Configuration.       (line  10)
* flycheck-flake8-maximum-line-length:   Configuration.       (line  14)
* flycheck-flake8rc:                     Configuration.       (line  31)
* flycheck-has-errors-p:                 Error API.           (line  76)
* flycheck-highlighting-mode:            Reporting.           (line  28)
* flycheck-jshintrc:                     Configuration.       (line  34)
* flycheck-next-error:                   Navigation.          (line  23)
* flycheck-parse-xml-string:             Error parser API.    (line   6)
* flycheck-phpcs-standard:               Configuration.       (line  18)
* flycheck-previous-error:               Navigation.          (line  31)
* flycheck-select-checker:               Selection.           (line  32)
* flycheck-tidyrc:                       Configuration.       (line  37)
* flycheck-warning-face:                 Reporting.           (line  15)



Tag Table:
Node: Top734
Node: Introduction2083
Node: Features2984
Node: Installation4335
Node: Activation5509
Node: Usage5860
Node: Syntax checking6483
Node: Selection7745
Node: Configuration10326
Node: Reporting12994
Node: Navigation15349
Node: Mode line17145
Node: Extending18046
Node: Declaration18645
Node: Error parsers29578
Node: Option filters30562
Node: Examples30901
Node: Simple example31333
Node: Predicate example34397
Node: Configuration example36378
Node: Chaining example39037
Node: API40423
Node: Error API41211
Node: Error parser API43812
Node: Contribution44038
Node: Reporting issues44714
Node: Contributing syntax checkers45450
Node: Contributing code46245
Node: Unit tests47585
Node: Changes48872
Node: 0.149456
Node: 0.249740
Node: 0.350018
Node: 0.450254
Node: 0.551029
Node: 0.652249
Node: 0.6.155099
Node: 0.755248
Node: 0.7.156262
Node: 0.856977
Node: 0.958489
Node: master58987
Node: Credits59363
Node: GNU Free Documentation License61727
Node: Syntax checkers86879
Node: Function and Variable Index87816

End Tag Table
