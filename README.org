* =flycheck=

Flycheck is flymake reloaded with

- an improved customization interface based on major modes (instead of file name
  patterns),
- a much nicer and easier, declarative syntax for checker definitions (instead
  of init functions)
- a bunch of ready-to-use syntax checkers for various languages (instead of
  broken checkers using non-existing tools)
- and a clean, concise and understandable implementation (instead of a almost 2k
  line mess of spaghetti code).


** Motivation

Get rid of flymake which is utterly broken.


** Features

- Automatic syntax check after saving or insertion of new lines
- Built-in syntax checkers for:
  - CoffeeScript
  - CSS
  - Emacs Lisp
  - HAML
  - HTML
  - Javascript
  - JSON
  - PHP
  - Python
  - Ruby
  - SASS
  - Shell scripts (Bash, Dash and Zsh)
  - TeX/LaTeX
- Easy customization (see =flycheck-checkers=)
- Easy declarative API to define new syntax checkers

Compared to flymake these features are currently *missing*

- Jump to next/previous error
- Show error message under cursor (as provided by flymake-cursor)


** Installation

Install the ELPA package from [[http://melpa.milkbox.net][MELPA]] (bleeding edge snapshots) or [[http://marmalade-repo.org/][Marmalade]]
(stable releases) with ~M-x package-install flycheck~.

Or [[https://github.com/lunaryorn/flycheck/tags][download]] the latest release and install ~flycheck.el~ with ~M-x
package-install-file~.

The library is written and tested against GNU Emacs 24 and may or may not work
in earlier versions of GNU Emacs.

Most checkers have dependencies against external tools that perform the
checking.  See [[Checkers]] for details.


** Usage

Enable =flycheck-mode= in your ~init.el~ file.

#+BEGIN_SRC emacs-lisp
  ;; Enable flymake for all files
  (add-hook 'find-file-hook 'flycheck-mode-on)
  ;; Enable flymake for Python only
  (add-hook 'python-mode-hook 'flycheck-mode-on)
#+END_SRC

Or do ~M-x flycheck-mode~ manually after visiting a file.

On-the-fly syntax checking with flycheck will then start immediately.

Use =flycheck-buffer= to check the current buffer manually, and =flycheck-clear=
to clear all errors reported for the current buffer.


** Mode line

Flycheck indicates its state in the mode line:

- ~FlyC~ :: No errors in the current buffer.
- ~FlyC*~ :: The syntax check is currently running.
- ~FlyC:3/4~ :: There are three errors and four warnings in the current buffer.
- ~FlyC!~ :: The syntax check failed.  Inspect the ~*Messages*~ buffer for
             details.
- ~FlyC?~ :: The syntax check had a dubious result.  The definition of the
             checker might be flawed.  Inspect the ~*Messages*~ buffer for
             details.


** Checkers

You need to install external utilities for the following checkers:

- CoffeeScript :: Install [[http://www.coffeelint.org/][coffeelint]].
- CSS :: Install [[https://github.com/stubbornella/csslint][csslint]].
- HAML :: Install [[http://haml.info][HAML]].
- HTML :: Install [[https://github.com/w3c/tidy-html5][Tidy]].
- Javascript :: Install [[http://www.jshint.com][jshint]] or [[http://www.jslint.com/][jslint]].  The former will automatically use a
                ~.jshintrc~ file in the buffer's directory, any ancestor thereof
                or your ~$HOME~ directory.  You may override the path to this
                file with the variable `flycheck-jshintrc`.
- JSON :: Install [[https://github.com/zaach/jsonlint][jsonlint]].
- PHP :: Install the [[http://php.net/manual/en/features.commandline.php][PHP command line]].
- Python :: Install [[http://pypi.python.org/pypi/flake8][flake8]], [[http://pypi.python.org/pypi/pyflakes][pyflakes]] or [[http://pypi.python.org/pypi/pylint][pylint]].
- Ruby :: Install Ruby.
- SASS :: Install [[http://sass-lang.com][SASS]].
- Shell scripts :: Install Bash or Zsh depending on the type of shell file you
                   want to check.
- TeX/LaTeX :: Install [[http://baruch.ev-en.org/proj/chktex/][chktex]] or [[http://www.ctan.org/pkg/lacheck][lacheck]].  Most TeX distributions, including
               TeXLive and MacTeX, already do this for you.


** Customization

- ~M-x customize-variable flycheck-checkers~ :: A list of all checkers.
     The checkers are tried in the order of appearance in this list.  The first
     checker that supports the current mode and whose executable exists is
     used.  To change the preference of checkers, change their order in this
     list or remove entries from this list.

Some modes have multiple checkers.  For instance =python-mode= has three
checkers using ~flake8~, ~pylint~ or ~pyflakes~.  When doing syntax checking in
=python-mode=, the checkers are tried in this order and the first whose
executable is found is used.

To chance the order of preference or enforce a single checker, just modify the
order of their appearance in =flycheck-checkers= or delete checkers you do not
want to use.  For instance, to always use ~pyflakes~ in =python-mode=, just
remove =flycheck-checker-python-flake8= and =flycheck-checker-python-pylint=
from =flycheck-checkers= via customization.


** Extending

In flycheck a syntax checker is a [[http://www.gnu.org/software/emacs/manual/html_node/elisp/Property-Lists.html#Property-Lists][property list]] with the following keys
(the /checker properties/):

+ =:command= (/mandatory/) :: A list containing the executable of the syntax
     checking tool (in the =car= of the list) and its arguments (in the =cdr=).
     Before enabling a checker *the executable is checked for existence* with
     =executable-find=.  If this check fails the checker is *not* used.  In
     arguments the special symbol =source= is replaced with a *temporary copy of
     the source file[fn:1]*, created in the system temporary directory.  Use
     =source-inplace= instead to force the copy being created in the *same
     directory as the original source file*.
+ =:error-patterns= (/mandatory/) :: A single pattern or a list of error
     patterns to parse the output of =:command=.  Each pattern has the form
     =(REGEXP FILE-IDX LINE-IDX COL-IDX ERR-TEXT-IDX LEVEL)=.  =REGEXP= is a
     regular expression that matches a single error or warning.  It may match a
     *multi-line* string.  =FILE-IDX=, =LINE-IDX=, =COL-IDX= and =ERR-TEXT-IDX=
     are *indexes of match groups* that provide the file name, the line number,
     the column number and the error message respectively.  Each of these may be
     nil to indicate that the message does not provide the corresponding
     information.  =LEVEL= is either =warning= or =error= and indicates the
     *severity of this error*.  *All* patterns are applied in the order of
     declaration to the *whole* output of the checker.
+ =:modes= (/optional/) :: A single major mode symbol or a list thereof.  If
     given the checker will only be used in any of these modes.
+ =:predicate= (/optional/) :: A form that if present is evaluated to determine
     whether the checker is to be used.  The checker is only used if the form
     evaluates to non-nil.

*At least one* of =:modes= and =:predicate= must *be present*.  If *both* are
present, *both* must match for the checker to be used.

Checkers are registered via =flycheck-checkers=, which is a list of symbols.
Each symbol in this list must either be a *variable bound to a checker property
list*, or be a *function returning one*.  In the former case, the variables
value is *retrieved anew on each syntax check*.  In the latter case the
function is *invoked on each syntax check with no arguments*.


*** Example

Let's see this in action by explaining the definition of a [[http://python.org][Python]] checker
included in flycheck.  This checker uses the [[http://pypi.python.org/pypi/pylint][pylint]] utility to perform the
actual syntax check.

First we declare the checker properties:

#+BEGIN_SRC emacs-lisp
  (defvar flycheck-checker-python-pylint
    '(:command
      ("epylint" source-inplace)
      :error-patterns
      (("^\\(.*\\):\\([0-9]+\\): Warning (W.*): \\(.*\\)$" 1 2 nil 3 warning)
       ("^\\(.*\\):\\([0-9]+\\): Error (E.*): \\(.*\\)$" 1 2 nil 3 error)
       ("^\\(.*\\):\\([0-9]+\\): \\[F\\] \\(.*\\)$" 1 2 nil 3 error))
      :modes python-mode))
#+END_SRC

We specify the command to execute in this mode in =:command=.  It is a
straight-forward list with the executable name as first element and some
subsequent arguments.  The symbol =source= is automatically replaced with the
name of the file to check.  Note that a checker is not enabled if its executable
does not exist (as by =executable-find=).

Next we give a list of error patterns to extract error location and message from
the ~epylint~ output.  An error pattern is a list containing a regular
expression that matches the error, indexes of groups that match the file name,
the line number, the column number and the error message respectively, and an
error level (either =warning= or =error=).  As you can see ~epylint~ emits both
errors and warnings.

Eventually we declare that the checker is to be used in =python-mode=.

Now we only need to register this error checker for use with

#+BEGIN_SRC emacs-lisp
  (add-to-list 'flycheck-checkers 'flycheck-checker-python-pylint)
#+END_SRC

Assuming that =flycheck-mode= is enabled [[(see Usage]]), Python source code will
now be syntax-checked on the fly in =pyton-mode=.

Some checkers have more complicated conditions for whether they are to be used
or not.  For instance, syntax checking in =sh-mode= needs to use different
shells depending on the value of =sh-shell=.  Hence in the checkers for this
mode we also give a =:predicate= that determines whether the right shell is
active:

#+BEGIN_SRC emacs-lisp
  (defvar flycheck-checker-zsh
    '(:command
      ("zsh" "-n" "-d" "-f" source)
      :error-patterns
      (("^\\(.*\\):\\([0-9]+\\): \\(.*\\)$" 1 2 nil 3 error))
      :modes sh-mode
      :predicate (eq sh-shell 'zsh)))
#+END_SRC

We declare that the checker is to be used in =sh-mode= *and* if a Zsh shell
script is being edited.  The =predicate= is simply an Emacs Lisp form that is
evaluated whenever flycheck tries to use the checker for the current
buffer. If both =:modes= and =:predicate= are given, *both* must match for the
checker to be used.


** Further help

- ~C-h f flycheck-mode~
- ~C-h f flycheck-checkers~


** Credits

The Vim library [[https://github.com/scrooloose/syntastic][syntastic]] by [[https://github.com/scrooloose][Martin Grenfell]] inspired this library and many of
its checkers.

[[https://github.com/purcell][Steve Purcell]] implemented many checkers, contributed important ideas to the
design of the checker API and engaged in worthwhile discussion to shape this
project.

[[https://github.com/wyuenho][Jimmy Yuen Ho Wong]] added the HTML syntax checker and the jshint Javascript
checker, and did valuable testing and bug fixing.


** License

This program is free software; you can redistribute it and/or modify it under
the terms of the GNU General Public License as published by the Free Software
Foundation; either version 2 of the License, or (at your option) any later
version.

This program is distributed in the hope that it will be useful, but WITHOUT ANY
WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A
PARTICULAR PURPOSE.  See the GNU General Public License for more details.

You should have received a copy of the GNU General Public License along with
this program; if not, write to the Free Software Foundation, Inc., 51 Franklin
Street, Fifth Floor, Boston, MA 02110-1301, USA.

See [[file:COPYING][COPYING]] for details.


** Footnotes

[fn:1] These temporary copies are necessary to allow for syntax checks of
   modified, but not yet saved buffers.
